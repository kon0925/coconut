# 
# This file implements tests of the BDBSQL_USER_AUTHENTICATION_KEYSTORE 
# extension.
#

set testdir [file dirname $argv0]/../../lang/sql/sqlite/test
source $testdir/tester.tcl
set testprefix bdb_userauth_ks

ifcapable !userauth_keystore {
  finish_test
  return
}

# SQLite tests defaultly provide a predefined key when opening a database
# connection if encryption is enabled. Disable this for our tests.
#
do_not_use_codec

set SQL_USER_TABLE {select uname, isadmin from sqlite_user order by uname;}
set KS_FILE test.db-journal/sql-userauth.ks
set LCK_FILE test.db-journal/___sql-userauth.ks.lck
set BAK_FILE test.db-journal/___sql-userauth.ks.bak

# check if two small files are the same
proc compare_file {file1 file2} {
  set f1 [open $file1]
  set f2 [open $file2]
  set r1 [read $f1]
  set r2 [read $f2]
  close $f1
  close $f2
  return [string compare $r1 $r2]
}

#############################################################################
# Keystore API of user login/edit/delete will fail when working with a 
# non-existing database.
#
reset_db

do_test userauth_ks-1.1 {
  file exists test.db
} {0}

do_test userauth_ks-1.2 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_AUTH}

do_test userauth_ks-1.3 {
  sqlite3_user_change db alice pw-4-alice 1
} {SQLITE_AUTH}

do_test userauth_ks-1.4 {
  sqlite3_user_delete db alice
} {SQLITE_AUTH}
#############################################################################

#############################################################################
# Keystore API will fail when working with an existing non-encrypted database.
#
do_execsql_test userauth_ks-2.0 {
  CREATE TABLE t1(x);
  select name from sqlite_master;
} {t1}

do_test userauth_ks-2.1 {
  sqlite3_user_add db alice pw-4-alice 1
} {SQLITE_ERROR}

do_test userauth_ks-2.3 {
  sqlite3_user_change db alice pw-4-alice 1
} {SQLITE_AUTH}

do_test userauth_ks-2.4 {
  sqlite3_user_delete db alice
} {SQLITE_AUTH}

do_test userauth_ks-2.5 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_AUTH}
#############################################################################

#############################################################################
# Keystore API will fail when working with an existing encrypted database 
# without the encryption key provided.
#
reset_db
do_execsql_test userauth_ks-3.0 {
  pragma key="ua_test_key";
  CREATE TABLE t1(x);
  select name from sqlite_master;
} {t1}

db close
sqlite3 db test.db

do_test userauth_ks-3.1 {
  sqlite3_user_add db alice pw-4-alice 1
} {SQLITE_ERROR}

do_test userauth_ks-3.2 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_AUTH}

do_test userauth_ks-3.3 {
  sqlite3_user_change db alice pw-4-alice 1
} {SQLITE_AUTH}

do_test userauth_ks-3.4 {
  sqlite3_user_delete db alice
} {SQLITE_AUTH}
#############################################################################

#############################################################################
# When doing bootstrap with a key provided before the database is created, the 
# key will be used in keystore.
#
reset_db
do_test userauth_ks-4.1 {
  execsql {pragma key="ua_test_key";}
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}
db close

do_test userauth_ks-4.2 {
  file exists $KS_FILE
} {1}

sqlite3 db test.db -key "ua_test_key"
do_test userauth_ks-4.3 {
  set v [catch { execsql {
    SELECT name FROM sqlite_master ORDER BY name;
  }} msg]
  lappend v $msg
} {1 {user not authenticated}}

do_test userauth_ks-4.4 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}

db close
#############################################################################

#############################################################################
# When doing bootstrap without key provided, a randomly generated key will be 
# used.
#
reset_db
do_test userauth_ks-5.1 {
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}
db close

do_test userauth_ks-5.2 {
  file exists $KS_FILE
} {1}

# Found no good way to check if database is encrypted by a random key. 
# By default, databases in SQLite are encrypted with the key "xyzzy". So will 
# check we do not use this predefined key.
#
sqlite3 db test.db -key "xyzzy"
do_test userauth_ks-5.3 {
  set v [catch { execsql {
    SELECT name FROM sqlite_master ORDER BY name;
  }} msg]
  lappend v $msg
} {1 {access permission denied}}
db close
#############################################################################

#############################################################################
# We could do bootstrap to an existing and encrypted database, as long as the 
# encryption key was provided before bootstrap. The provided key will be 
# added into keystore.
#
reset_db
do_test userauth_ks-6.1 {
  execsql { 
    pragma key="ua_test_key";
    CREATE TABLE t1(x);
    select name from sqlite_master;
  }
} {t1}
db close

do_test userauth_ks-6.2 {
  sqlite3 db test.db -key {ua_test_key}
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}

do_test userauth_ks-6.3 {
  file exists $KS_FILE
} {1}

sqlite3 db2 test.db -key {ua_test_key}
do_test userauth_ks-6.4 {
  set v [catch { db2 eval {
    SELECT name FROM sqlite_master ORDER BY name;
  }} msg]
  lappend v $msg
} {1 {user not authenticated}}
db2 close
#############################################################################

#############################################################################
# It fails to do bootstrap to an existing and encrypted database with a wrong 
# encryption key provided.
#
reset_db
do_test userauth_ks-7.1 {
  execsql { 
    pragma key="ua_test_key";
    CREATE TABLE t1(x);
    select name from sqlite_master;
  }
} {t1}
db close

do_test userauth_ks-7.2 {
  sqlite3 db test.db -key {wrong_key}
  sqlite3_user_add db alice pw-4-alice 1
} {SQLITE_AUTH}
#############################################################################

#############################################################################
# User add/change/delete API will fail without a prior successfully user login 
# on an authentication-required database.
#
reset_db
do_test userauth_ks-8.1 {
  sqlite3_user_add db alice pw-4-alice 1
  sqlite3_user_add db bob pw-4-bob 0
  execsql $SQL_USER_TABLE
} {alice 1 bob 0}

db close
sqlite3 db test.db

do_test userauth_ks-8.2 {
  sqlite3_user_add db cindy pw-4-cindy 0
} {SQLITE_ERROR}

do_test userauth_ks-8.3 {
  sqlite3_user_change db bob pw-4-bob1 0
} {SQLITE_AUTH}

do_test userauth_ks-8.4 {
  sqlite3_user_delete db bob
} {SQLITE_AUTH}

db close
sqlite3 db test.db

# Now check the user add/change/delete API works fine with a prior 
# successfully user login.
do_test userauth_ks-8.5 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}

do_test userauth_ks-8.6 {
  sqlite3_user_add db cindy pw-4-cindy 0
  db eval $SQL_USER_TABLE
} {alice 1 bob 0 cindy 0}

do_test userauth_ks-8.7 {
  sqlite3_user_change db bob pw-4-bob1 0
} {SQLITE_OK}

do_test userauth_ks-8.8 {
  sqlite3_user_delete db bob
  db eval $SQL_USER_TABLE
} {alice 1 cindy 0}
db close
#############################################################################

#############################################################################
# Test for the keystore lock file.
#
reset_db

# Create an authenticated database.
do_test userauth_ks-9.1 {
  sqlite3_user_add db alice pw-4-alice 1
  sqlite3_user_add db bob pw-4-bob 0
  execsql $SQL_USER_TABLE
} {alice 1 bob 0}

db close
sqlite3 db test.db

do_test userauth_ks-9.2 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}

db close
sqlite3 db test.db

# Create the keystore lock file so login API will block.
do_test userauth_ks-9.3 {
  set fh [open $LCK_FILE w]
  close $fh
  file exists $LCK_FILE
} {1}

do_test userauth_ks-9.4 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_ERROR}

db close
sqlite3 db test.db

# Remove the keystore lock file so login API will work.
do_test userauth_ks-9.5 {
  forcedelete $LCK_FILE
  file exists $LCK_FILE
} {0}

do_test userauth_ks-9.6 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}

# Create the keystore lock file so user add/change/delete API will block.
do_test userauth_ks-9.7 {
  set fh [open $LCK_FILE w]
  close $fh
  file exists $LCK_FILE
} {1}

do_test userauth_ks-9.8 {
  sqlite3_user_add db cindy pw-4-cindy 0
} {SQLITE_ERROR}

do_test userauth_ks-9.9 {
  sqlite3_user_change db bob pw-4-bob1 0
} {SQLITE_ERROR}

do_test userauth_ks-9.10 {
  sqlite3_user_delete db bob
} {SQLITE_ERROR}

forcedelete $LCK_FILE
#############################################################################

#############################################################################
# Test for the keystore backup file. 
#
reset_db
do_test userauth_ks-10.1 {
  sqlite3_user_add db alice pw-4-alice 1
  sqlite3_user_add db bob pw-4-bob 0
  execsql $SQL_USER_TABLE
} {alice 1 bob 0}

do_test userauth_ks-10.2 {
  file exists $BAK_FILE
} {1}

db close
sqlite3 db test.db

do_test userauth_ks-10.3 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}

db close
sqlite3 db test.db

# Corrupt the keystore file. See login will still succeed as backup exists.
do_test userauth_ks-10.4 {
  set fh [open $KS_FILE a]
  puts $fh "a"
  close $fh
} {}

do_test userauth_ks-10.5 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}

db close
sqlite3 db test.db

# Corrupt the keystore file. See login will fail without the backup file.
do_test userauth_ks-10.6 {
  forcedelete $BAK_FILE
  file exists $BAK_FILE
} {0}

do_test userauth_ks-10.7 {
  set fh [open $KS_FILE a]
  puts $fh "a"
  close $fh
} {}

do_test userauth_ks-10.8 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_AUTH}

# User login will fail if key-store file and its backup were missing.
reset_db
do_test userauth_ks-10.9 {
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}

db close

do_test userauth_ks-10.10 {
  forcedelete $KS_FILE
  file exists $KS_FILE
} {0}

do_test userauth_ks-10.11 {
  forcedelete $BAK_FILE
  file exists $BAK_FILE
} {0}

sqlite3 db test.db
do_test userauth_ks-10.12 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_AUTH}

# When user add/edit/delete succeeds, keystore file and backup file should
# be the same
reset_db
do_test userauth_ks-10.13 {
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}

do_test userauth_ks-10.14 {
  file exists $BAK_FILE
} {1}

do_test userauth_ks-10.15 {
  sqlite3_user_add db bob pw-4-bob 0
  execsql $SQL_USER_TABLE
} {alice 1 bob 0}

do_test userauth_ks-10.16 {
  compare_file $KS_FILE $BAK_FILE
} {0}

do_test userauth_ks-10.17 {
  sqlite3_user_change db bob new-pw-4-bob 0
} {SQLITE_OK}

do_test userauth_ks-10.18 {
  compare_file $KS_FILE $BAK_FILE
} {0}

do_test userauth_ks-10.19 {
  sqlite3_user_delete db bob
  execsql $SQL_USER_TABLE
} {alice 1}

do_test userauth_ks-10.20 {
  compare_file $KS_FILE $BAK_FILE
} {0}

# Remove the keystore file. See login will still succeed as backup exists.
reset_db
do_test userauth_ks-10.21 {
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}

do_test userauth_ks-10.22 {
  file exists $BAK_FILE
} {1}

do_test userauth_ks-10.23 {
  file exists $KS_FILE
} {1}

db close
sqlite3 db test.db

do_test userauth_ks-10.24 {
  forcedelete $KS_FILE
  file exists $KS_FILE
} {0}

do_test userauth_ks-10.25 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}
#############################################################################

#############################################################################
# Test the behavior of authentication by providing a wrong pre-defined key.
#
reset_db
do_test userauth_ks-11.1 {
  execsql { pragma key="ua_test_key"; }
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}
db close

do_test userauth_ks-11.2 {
  file exists $KS_FILE
} {1}

sqlite3 db test.db -key {wrong_key}
do_test userauth_ks-11.3 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_PERM}
#############################################################################

#############################################################################
# Test the behavior of edit/delete/login a non-existing user name and the 
# behavior of login with a wrong password.
#
reset_db
do_test userauth_ks-12.1 {
  sqlite3_user_add db alice pw-4-alice 1
  execsql $SQL_USER_TABLE
} {alice 1}
db close

do_test userauth_ks-12.2 {
  file exists $KS_FILE
} {1}

sqlite3 db test.db
do_test userauth_ks-12.3 {
  sqlite3_user_authenticate db non_exist_user his_password
} {SQLITE_AUTH}

do_test userauth_ks-12.4 {
  sqlite3_user_authenticate db alice pw-4-alice
  execsql $SQL_USER_TABLE
} {alice 1}

do_test userauth_ks-12.5 {
  sqlite3_user_change db non_exist_user his_password 0
} {SQLITE_OK}

do_test userauth_ks-12.6 {
  sqlite3_user_delete db non_exist_user
} {SQLITE_OK}

db close
sqlite3 db test.db

do_test userauth_ks-12.7 {
  sqlite3_user_authenticate db alice wrong_password
} {/SQLITE_AUTH|SQLITE_PERM/}
#############################################################################

#############################################################################
# Test the behavior of calling user add/change/delete API in an outer 
# transaction.
#
reset_db
do_test userauth_ks-13.1 {
  sqlite3_user_add db alice pw-4-alice 1
  sqlite3_user_add db bob pw-4-bob 0
  execsql $SQL_USER_TABLE
} {alice 1 bob 0}

do_test userauth_ks-13.2 {
  file exists $KS_FILE
} {1}

execsql { begin }
do_test userauth_ks-13.3 {
  sqlite3_user_authenticate db alice pw-4-alice
} {SQLITE_OK}

do_test userauth_ks-13.4 {
  sqlite3_user_add db cindy pw-4-cindy 0
} {SQLITE_ERROR}

do_test userauth_ks-13.5 {
  sqlite3_user_change db bob pw-4-bob-updated 0
} {SQLITE_ERROR}

do_test userauth_ks-13.6 {
  sqlite3_user_delete db bob
} {SQLITE_ERROR}
#############################################################################

finish_test

