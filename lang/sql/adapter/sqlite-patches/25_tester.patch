--- test/tester.tcl
+++ test/tester.tcl
@@ -138,7 +138,7 @@
     # NOTE: Return the default number of retries for [file] operations.  A
     #       value of zero or less here means "disabled".
     #
-    return [expr {$::tcl_platform(platform) eq "windows" ? 50 : 0}]
+    return [expr {$::tcl_platform(platform) eq "windows" ? 10 : 0}]
   }
   return $::G(file-retries)
 }
@@ -500,6 +500,9 @@
   forcedelete test.db-journal
   forcedelete test.db-wal
   sqlite3 db ./test.db
+  if {[ array names ::env BDB_BLOB_SETTING ] != "" } {
+    db eval "pragma large_record_opt=$::env(BDB_BLOB_SETTING)"
+  }
   set ::DB [sqlite3_connection_pointer db]
   if {[info exists ::SETUP_SQL]} {
     db eval $::SETUP_SQL
@@ -534,6 +537,11 @@
   }
 }
 
+# Pull in the list of test cases that are excluded and ignored when running
+# with Berkeley DB.
+#
+source $testdir/../../../../test/sql/bdb_excl.test
+
 # Record the fact that a sequence of tests were omitted.
 #
 proc omit_test {name reason {append 1}} {
@@ -581,12 +589,20 @@
 # Invoke the do_test procedure to run a single test
 #
 proc do_test {name cmd expected} {
-  global argv cmdlinearg
+  global argv cmdlinearg IGNORE_CASES EXCLUDE_CASES
 
   fix_testname name
 
   sqlite3_memdebug_settitle $name
 
+  foreach pattern $EXCLUDE_CASES {
+    if {[string match $pattern $name]} {
+      puts "$name... Skipping"
+      flush stdout
+      return
+    }
+  }
+
 #  if {[llength $argv]==0} {
 #    set go 1
 #  } else {
@@ -650,11 +666,19 @@
         set ok [expr {[string compare $result $expected]==0}]
       }
       if {!$ok} {
-        # if {![info exists ::testprefix] || $::testprefix eq ""} {
-        #   error "no test prefix"
-        # }
-        puts "\nExpected: \[$expected\]\n     Got: \[$result\]"
-        fail_test $name
+        set ignore 0
+        foreach pattern $IGNORE_CASES {
+            if {[string match $pattern $name]} {
+                set ignore 1
+                break
+            }
+        }
+        if {$ignore} {
+            puts " Ignored"
+        } else {
+            puts "\nExpected: \[$expected\]\n     Got: \[$result\]"
+            fail_test $name
+        }
       } else {
         puts " Ok"
       }
@@ -883,7 +907,7 @@
   sqlite3_reset_auto_extension
 
   sqlite3_soft_heap_limit 0
-  set nTest [incr_ntest]
+  set nTest [set_test_counter count]
   set nErr [set_test_counter errors]
 
   set nKnown 0
@@ -1224,12 +1248,6 @@
   return $ret
 }
 
-# Returns non-zero if the capabilities are present; zero otherwise.
-#
-proc capable {expr} {
-  set e [fix_ifcapable_expr $expr]; return [expr ($e)]
-}
-
 # Evaluate a boolean expression of capabilities.  If true, execute the
 # code.  Omit the code if false.
 #
@@ -1340,25 +1358,6 @@
   lappend r $msg
 }
 
-proc run_ioerr_prep {} {
-  set ::sqlite_io_error_pending 0
-  catch {db close}
-  catch {db2 close}
-  catch {forcedelete test.db}
-  catch {forcedelete test.db-journal}
-  catch {forcedelete test2.db}
-  catch {forcedelete test2.db-journal}
-  set ::DB [sqlite3 db test.db; sqlite3_connection_pointer db]
-  sqlite3_extended_result_codes $::DB $::ioerropts(-erc)
-  if {[info exists ::ioerropts(-tclprep)]} {
-    eval $::ioerropts(-tclprep)
-  }
-  if {[info exists ::ioerropts(-sqlprep)]} {
-    execsql $::ioerropts(-sqlprep)
-  }
-  expr 0
-}
-
 # Usage: do_ioerr_test <test number> <options...>
 #
 # This proc is used to implement test cases that check that IO errors
@@ -1392,25 +1392,9 @@
   # a couple of obscure IO errors that do not return them.
   set ::ioerropts(-erc) 0
 
-  # Create a single TCL script from the TCL and SQL specified
-  # as the body of the test.
-  set ::ioerrorbody {}
-  if {[info exists ::ioerropts(-tclbody)]} {
-    append ::ioerrorbody "$::ioerropts(-tclbody)\n"
-  }
-  if {[info exists ::ioerropts(-sqlbody)]} {
-    append ::ioerrorbody "db eval {$::ioerropts(-sqlbody)}"
-  }
-
-  save_prng_state
-  if {$::ioerropts(-cksum)} {
-    run_ioerr_prep
-    eval $::ioerrorbody
-    set ::goodcksum [cksum]
-  }
-
   set ::go 1
   #reset_prng_state
+  save_prng_state
   for {set n $::ioerropts(-start)} {$::go} {incr n} {
     set ::TN $n
     incr ::ioerropts(-count) -1
@@ -1427,12 +1410,27 @@
     # Delete the files test.db and test2.db, then execute the TCL and
     # SQL (in that order) to prepare for the test case.
     do_test $testname.$n.1 {
-      run_ioerr_prep
+      set ::sqlite_io_error_pending 0
+      catch {db close}
+      catch {db2 close}
+      catch {forcedelete test.db}
+      catch {forcedelete test.db-journal}
+      catch {forcedelete test2.db}
+      catch {forcedelete test2.db-journal}
+      set ::DB [sqlite3 db test.db; sqlite3_connection_pointer db]
+      sqlite3_extended_result_codes $::DB $::ioerropts(-erc)
+      if {[info exists ::ioerropts(-tclprep)]} {
+        eval $::ioerropts(-tclprep)
+      }
+      if {[info exists ::ioerropts(-sqlprep)]} {
+        execsql $::ioerropts(-sqlprep)
+      }
+      expr 0
     } {0}
 
     # Read the 'checksum' of the database.
     if {$::ioerropts(-cksum)} {
-      set ::checksum [cksum]
+      set checksum [cksum]
     }
 
     # Set the Nth IO error to fail.
@@ -1440,10 +1438,20 @@
       set ::sqlite_io_error_persist $::ioerropts(-persist)
       set ::sqlite_io_error_pending $n
     }] $n
+  
+    # Create a single TCL script from the TCL and SQL specified
+    # as the body of the test.
+    set ::ioerrorbody {}
+    if {[info exists ::ioerropts(-tclbody)]} {
+      append ::ioerrorbody "$::ioerropts(-tclbody)\n"
+    }
+    if {[info exists ::ioerropts(-sqlbody)]} {
+      append ::ioerrorbody "db eval {$::ioerropts(-sqlbody)}"
+    }
 
-    # Execute the TCL script created for the body of this test. If
-    # at least N IO operations performed by SQLite as a result of
-    # the script, the Nth will fail.
+    # Execute the TCL Script created in the above block. If
+    # there are at least N IO operations performed by SQLite as
+    # a result of the script, the Nth will fail.
     do_test $testname.$n.3 {
       set ::sqlite_io_error_hit 0
       set ::sqlite_io_error_hardhit 0
@@ -1547,15 +1555,8 @@
         catch {db close}
         catch {db2 close}
         set ::DB [sqlite3 db test.db; sqlite3_connection_pointer db]
-        set nowcksum [cksum]
-        set res [expr {$nowcksum==$::checksum || $nowcksum==$::goodcksum}]
-        if {$res==0} {
-          puts "now=$nowcksum"
-          puts "the=$::checksum"
-          puts "fwd=$::goodcksum"
-        }
-        set res
-      } 1
+        cksum
+      } $checksum
     }
 
     set ::sqlite_io_error_hardhit 0
@@ -1747,6 +1748,7 @@
     $db eval { SELECT * FROM sqlite_master }
     do_test $testname [list $db eval "PRAGMA main.journal_mode"] {wal}
   }
+  catch { forcedelete test.db-journal/__db.register }
 }
 
 proc permutation {} {
@@ -1884,6 +1886,7 @@
     set f [string range $f2 3 end]
     forcecopy $f2 $f
   }
+  forcedelete test.db-journal/__db.register
 }
 proc db_restore_and_reopen {{dbfile test.db}} {
   catch { db close }
--- Makefile.in
+++ Makefile.in
@@ -445,7 +445,6 @@
   $(TOP)/ext/fts3/fts3.c \
   $(TOP)/ext/fts3/fts3_aux.c \
   $(TOP)/ext/fts3/fts3_expr.c \
-  $(TOP)/ext/fts3/fts3_term.c \
   $(TOP)/ext/fts3/fts3_tokenizer.c \
   $(TOP)/ext/fts3/fts3_write.c \
   $(TOP)/ext/async/sqlite3async.c
