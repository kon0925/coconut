//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BerkeleyDB.Internal {

using global::System;
using global::System.Runtime.InteropServices;

internal class DB_STREAM : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DB_STREAM(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DB_STREAM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DB_STREAM() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libdb_csharpPINVOKE.delete_DB_STREAM(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  internal int close(uint flags) {
		int ret = libdb_csharpPINVOKE.DB_STREAM_close(swigCPtr, flags);
		if (ret == 0)
			/* Close is a db handle destructor.  Reflect that in the wrapper class. */
			swigCPtr = new HandleRef(null, IntPtr.Zero);
		else
			DatabaseException.ThrowException(ret);
		return ret;
}

  internal int read(DatabaseEntry data, Int64 offset, uint size, uint flags) {
    try {
		int ret;
		ret = libdb_csharpPINVOKE.DB_STREAM_read(swigCPtr, DBT.getCPtr(DatabaseEntry.getDBT(data)), offset, size, flags);
		DatabaseException.ThrowException(ret);
		return ret;
} finally {
      GC.KeepAlive(data);
    }
  }

  internal int size(ref Int64 size, uint flags) {
		int ret;
		ret = libdb_csharpPINVOKE.DB_STREAM_size(swigCPtr, ref size, flags);
		DatabaseException.ThrowException(ret);
		return ret;
}

  internal int write(DatabaseEntry data, Int64 offset, uint flags) {
    try {
		int ret;
		ret = libdb_csharpPINVOKE.DB_STREAM_write(swigCPtr, DBT.getCPtr(DatabaseEntry.getDBT(data)), offset, flags);
		DatabaseException.ThrowException(ret);
		return ret;
} finally {
      GC.KeepAlive(data);
    }
  }

  internal DB_STREAM() : this(libdb_csharpPINVOKE.new_DB_STREAM(), true) {
  }

}

}
