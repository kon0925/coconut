/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class TEnvStatConfig implements org.apache.thrift.TBase<TEnvStatConfig, TEnvStatConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TEnvStatConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEnvStatConfig");

  private static final org.apache.thrift.protocol.TField CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("cache", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CACHE_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheFile", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MUTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("mutex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEnvStatConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEnvStatConfigTupleSchemeFactory());
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption cache; // optional
  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption cacheFile; // optional
  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption lock; // optional
  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption log; // optional
  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption mutex; // optional
  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption transaction; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TEnvStatOption
     */
    CACHE((short)1, "cache"),
    /**
     * 
     * @see TEnvStatOption
     */
    CACHE_FILE((short)2, "cacheFile"),
    /**
     * 
     * @see TEnvStatOption
     */
    LOCK((short)3, "lock"),
    /**
     * 
     * @see TEnvStatOption
     */
    LOG((short)4, "log"),
    /**
     * 
     * @see TEnvStatOption
     */
    MUTEX((short)5, "mutex"),
    /**
     * 
     * @see TEnvStatOption
     */
    TRANSACTION((short)6, "transaction");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CACHE
          return CACHE;
        case 2: // CACHE_FILE
          return CACHE_FILE;
        case 3: // LOCK
          return LOCK;
        case 4: // LOG
          return LOG;
        case 5: // MUTEX
          return MUTEX;
        case 6: // TRANSACTION
          return TRANSACTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CACHE,_Fields.CACHE_FILE,_Fields.LOCK,_Fields.LOG,_Fields.MUTEX,_Fields.TRANSACTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CACHE, new org.apache.thrift.meta_data.FieldMetaData("cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEnvStatOption.class)));
    tmpMap.put(_Fields.CACHE_FILE, new org.apache.thrift.meta_data.FieldMetaData("cacheFile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEnvStatOption.class)));
    tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEnvStatOption.class)));
    tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEnvStatOption.class)));
    tmpMap.put(_Fields.MUTEX, new org.apache.thrift.meta_data.FieldMetaData("mutex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEnvStatOption.class)));
    tmpMap.put(_Fields.TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("transaction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEnvStatOption.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEnvStatConfig.class, metaDataMap);
  }

  public TEnvStatConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEnvStatConfig(TEnvStatConfig other) {
    if (other.isSetCache()) {
      this.cache = other.cache;
    }
    if (other.isSetCacheFile()) {
      this.cacheFile = other.cacheFile;
    }
    if (other.isSetLock()) {
      this.lock = other.lock;
    }
    if (other.isSetLog()) {
      this.log = other.log;
    }
    if (other.isSetMutex()) {
      this.mutex = other.mutex;
    }
    if (other.isSetTransaction()) {
      this.transaction = other.transaction;
    }
  }

  public TEnvStatConfig deepCopy() {
    return new TEnvStatConfig(this);
  }

  @Override
  public void clear() {
    this.cache = null;
    this.cacheFile = null;
    this.lock = null;
    this.log = null;
    this.mutex = null;
    this.transaction = null;
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption getCache() {
    return this.cache;
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatConfig setCache(TEnvStatOption cache) {
    this.cache = cache;
    return this;
  }

  public void unsetCache() {
    this.cache = null;
  }

  /** Returns true if field cache is set (has been assigned a value) and false otherwise */
  public boolean isSetCache() {
    return this.cache != null;
  }

  public void setCacheIsSet(boolean value) {
    if (!value) {
      this.cache = null;
    }
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption getCacheFile() {
    return this.cacheFile;
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatConfig setCacheFile(TEnvStatOption cacheFile) {
    this.cacheFile = cacheFile;
    return this;
  }

  public void unsetCacheFile() {
    this.cacheFile = null;
  }

  /** Returns true if field cacheFile is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheFile() {
    return this.cacheFile != null;
  }

  public void setCacheFileIsSet(boolean value) {
    if (!value) {
      this.cacheFile = null;
    }
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption getLock() {
    return this.lock;
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatConfig setLock(TEnvStatOption lock) {
    this.lock = lock;
    return this;
  }

  public void unsetLock() {
    this.lock = null;
  }

  /** Returns true if field lock is set (has been assigned a value) and false otherwise */
  public boolean isSetLock() {
    return this.lock != null;
  }

  public void setLockIsSet(boolean value) {
    if (!value) {
      this.lock = null;
    }
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption getLog() {
    return this.log;
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatConfig setLog(TEnvStatOption log) {
    this.log = log;
    return this;
  }

  public void unsetLog() {
    this.log = null;
  }

  /** Returns true if field log is set (has been assigned a value) and false otherwise */
  public boolean isSetLog() {
    return this.log != null;
  }

  public void setLogIsSet(boolean value) {
    if (!value) {
      this.log = null;
    }
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption getMutex() {
    return this.mutex;
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatConfig setMutex(TEnvStatOption mutex) {
    this.mutex = mutex;
    return this;
  }

  public void unsetMutex() {
    this.mutex = null;
  }

  /** Returns true if field mutex is set (has been assigned a value) and false otherwise */
  public boolean isSetMutex() {
    return this.mutex != null;
  }

  public void setMutexIsSet(boolean value) {
    if (!value) {
      this.mutex = null;
    }
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatOption getTransaction() {
    return this.transaction;
  }

  /**
   * 
   * @see TEnvStatOption
   */
  public TEnvStatConfig setTransaction(TEnvStatOption transaction) {
    this.transaction = transaction;
    return this;
  }

  public void unsetTransaction() {
    this.transaction = null;
  }

  /** Returns true if field transaction is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction() {
    return this.transaction != null;
  }

  public void setTransactionIsSet(boolean value) {
    if (!value) {
      this.transaction = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CACHE:
      if (value == null) {
        unsetCache();
      } else {
        setCache((TEnvStatOption)value);
      }
      break;

    case CACHE_FILE:
      if (value == null) {
        unsetCacheFile();
      } else {
        setCacheFile((TEnvStatOption)value);
      }
      break;

    case LOCK:
      if (value == null) {
        unsetLock();
      } else {
        setLock((TEnvStatOption)value);
      }
      break;

    case LOG:
      if (value == null) {
        unsetLog();
      } else {
        setLog((TEnvStatOption)value);
      }
      break;

    case MUTEX:
      if (value == null) {
        unsetMutex();
      } else {
        setMutex((TEnvStatOption)value);
      }
      break;

    case TRANSACTION:
      if (value == null) {
        unsetTransaction();
      } else {
        setTransaction((TEnvStatOption)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CACHE:
      return getCache();

    case CACHE_FILE:
      return getCacheFile();

    case LOCK:
      return getLock();

    case LOG:
      return getLog();

    case MUTEX:
      return getMutex();

    case TRANSACTION:
      return getTransaction();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CACHE:
      return isSetCache();
    case CACHE_FILE:
      return isSetCacheFile();
    case LOCK:
      return isSetLock();
    case LOG:
      return isSetLog();
    case MUTEX:
      return isSetMutex();
    case TRANSACTION:
      return isSetTransaction();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEnvStatConfig)
      return this.equals((TEnvStatConfig)that);
    return false;
  }

  public boolean equals(TEnvStatConfig that) {
    if (that == null)
      return false;

    boolean this_present_cache = true && this.isSetCache();
    boolean that_present_cache = true && that.isSetCache();
    if (this_present_cache || that_present_cache) {
      if (!(this_present_cache && that_present_cache))
        return false;
      if (!this.cache.equals(that.cache))
        return false;
    }

    boolean this_present_cacheFile = true && this.isSetCacheFile();
    boolean that_present_cacheFile = true && that.isSetCacheFile();
    if (this_present_cacheFile || that_present_cacheFile) {
      if (!(this_present_cacheFile && that_present_cacheFile))
        return false;
      if (!this.cacheFile.equals(that.cacheFile))
        return false;
    }

    boolean this_present_lock = true && this.isSetLock();
    boolean that_present_lock = true && that.isSetLock();
    if (this_present_lock || that_present_lock) {
      if (!(this_present_lock && that_present_lock))
        return false;
      if (!this.lock.equals(that.lock))
        return false;
    }

    boolean this_present_log = true && this.isSetLog();
    boolean that_present_log = true && that.isSetLog();
    if (this_present_log || that_present_log) {
      if (!(this_present_log && that_present_log))
        return false;
      if (!this.log.equals(that.log))
        return false;
    }

    boolean this_present_mutex = true && this.isSetMutex();
    boolean that_present_mutex = true && that.isSetMutex();
    if (this_present_mutex || that_present_mutex) {
      if (!(this_present_mutex && that_present_mutex))
        return false;
      if (!this.mutex.equals(that.mutex))
        return false;
    }

    boolean this_present_transaction = true && this.isSetTransaction();
    boolean that_present_transaction = true && that.isSetTransaction();
    if (this_present_transaction || that_present_transaction) {
      if (!(this_present_transaction && that_present_transaction))
        return false;
      if (!this.transaction.equals(that.transaction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cache = true && (isSetCache());
    list.add(present_cache);
    if (present_cache)
      list.add(cache.getValue());

    boolean present_cacheFile = true && (isSetCacheFile());
    list.add(present_cacheFile);
    if (present_cacheFile)
      list.add(cacheFile.getValue());

    boolean present_lock = true && (isSetLock());
    list.add(present_lock);
    if (present_lock)
      list.add(lock.getValue());

    boolean present_log = true && (isSetLog());
    list.add(present_log);
    if (present_log)
      list.add(log.getValue());

    boolean present_mutex = true && (isSetMutex());
    list.add(present_mutex);
    if (present_mutex)
      list.add(mutex.getValue());

    boolean present_transaction = true && (isSetTransaction());
    list.add(present_transaction);
    if (present_transaction)
      list.add(transaction.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TEnvStatConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCache()).compareTo(other.isSetCache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache, other.cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheFile()).compareTo(other.isSetCacheFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheFile, other.cacheFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMutex()).compareTo(other.isSetMutex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutex, other.mutex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransaction()).compareTo(other.isSetTransaction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction, other.transaction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEnvStatConfig(");
    boolean first = true;

    if (isSetCache()) {
      sb.append("cache:");
      if (this.cache == null) {
        sb.append("null");
      } else {
        sb.append(this.cache);
      }
      first = false;
    }
    if (isSetCacheFile()) {
      if (!first) sb.append(", ");
      sb.append("cacheFile:");
      if (this.cacheFile == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheFile);
      }
      first = false;
    }
    if (isSetLock()) {
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
    }
    if (isSetLog()) {
      if (!first) sb.append(", ");
      sb.append("log:");
      if (this.log == null) {
        sb.append("null");
      } else {
        sb.append(this.log);
      }
      first = false;
    }
    if (isSetMutex()) {
      if (!first) sb.append(", ");
      sb.append("mutex:");
      if (this.mutex == null) {
        sb.append("null");
      } else {
        sb.append(this.mutex);
      }
      first = false;
    }
    if (isSetTransaction()) {
      if (!first) sb.append(", ");
      sb.append("transaction:");
      if (this.transaction == null) {
        sb.append("null");
      } else {
        sb.append(this.transaction);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEnvStatConfigStandardSchemeFactory implements SchemeFactory {
    public TEnvStatConfigStandardScheme getScheme() {
      return new TEnvStatConfigStandardScheme();
    }
  }

  private static class TEnvStatConfigStandardScheme extends StandardScheme<TEnvStatConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEnvStatConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cache = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
              struct.setCacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CACHE_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cacheFile = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
              struct.setCacheFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lock = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
              struct.setLockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.log = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
              struct.setLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MUTEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mutex = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
              struct.setMutexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANSACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transaction = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
              struct.setTransactionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEnvStatConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cache != null) {
        if (struct.isSetCache()) {
          oprot.writeFieldBegin(CACHE_FIELD_DESC);
          oprot.writeI32(struct.cache.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.cacheFile != null) {
        if (struct.isSetCacheFile()) {
          oprot.writeFieldBegin(CACHE_FILE_FIELD_DESC);
          oprot.writeI32(struct.cacheFile.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.lock != null) {
        if (struct.isSetLock()) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          oprot.writeI32(struct.lock.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.log != null) {
        if (struct.isSetLog()) {
          oprot.writeFieldBegin(LOG_FIELD_DESC);
          oprot.writeI32(struct.log.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.mutex != null) {
        if (struct.isSetMutex()) {
          oprot.writeFieldBegin(MUTEX_FIELD_DESC);
          oprot.writeI32(struct.mutex.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.transaction != null) {
        if (struct.isSetTransaction()) {
          oprot.writeFieldBegin(TRANSACTION_FIELD_DESC);
          oprot.writeI32(struct.transaction.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEnvStatConfigTupleSchemeFactory implements SchemeFactory {
    public TEnvStatConfigTupleScheme getScheme() {
      return new TEnvStatConfigTupleScheme();
    }
  }

  private static class TEnvStatConfigTupleScheme extends TupleScheme<TEnvStatConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEnvStatConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCache()) {
        optionals.set(0);
      }
      if (struct.isSetCacheFile()) {
        optionals.set(1);
      }
      if (struct.isSetLock()) {
        optionals.set(2);
      }
      if (struct.isSetLog()) {
        optionals.set(3);
      }
      if (struct.isSetMutex()) {
        optionals.set(4);
      }
      if (struct.isSetTransaction()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCache()) {
        oprot.writeI32(struct.cache.getValue());
      }
      if (struct.isSetCacheFile()) {
        oprot.writeI32(struct.cacheFile.getValue());
      }
      if (struct.isSetLock()) {
        oprot.writeI32(struct.lock.getValue());
      }
      if (struct.isSetLog()) {
        oprot.writeI32(struct.log.getValue());
      }
      if (struct.isSetMutex()) {
        oprot.writeI32(struct.mutex.getValue());
      }
      if (struct.isSetTransaction()) {
        oprot.writeI32(struct.transaction.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEnvStatConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.cache = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
        struct.setCacheIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cacheFile = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
        struct.setCacheFileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lock = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
        struct.setLockIsSet(true);
      }
      if (incoming.get(3)) {
        struct.log = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
        struct.setLogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mutex = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
        struct.setMutexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.transaction = com.sleepycat.thrift.TEnvStatOption.findByValue(iprot.readI32());
        struct.setTransactionIsSet(true);
      }
    }
  }

}

