/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class TQueueStat implements org.apache.thrift.TBase<TQueueStat, TQueueStat._Fields>, java.io.Serializable, Cloneable, Comparable<TQueueStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueueStat");

  private static final org.apache.thrift.protocol.TField CUR_RECNO_FIELD_DESC = new org.apache.thrift.protocol.TField("curRecno", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXTENT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("extentSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FIRST_RECNO_FIELD_DESC = new org.apache.thrift.protocol.TField("firstRecno", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MAGIC_FIELD_DESC = new org.apache.thrift.protocol.TField("magic", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField META_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("metaFlags", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("numData", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("numKeys", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("pages", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PAGES_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesFree", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField RE_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("reLen", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RE_PAD_FIELD_DESC = new org.apache.thrift.protocol.TField("rePad", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueueStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueueStatTupleSchemeFactory());
  }

  public int curRecno; // required
  public int extentSize; // required
  public int firstRecno; // required
  public int magic; // required
  public int metaFlags; // required
  public int numData; // required
  public int numKeys; // required
  public int pages; // required
  public int pagesFree; // required
  public int pageSize; // required
  public int reLen; // required
  public int rePad; // required
  public int version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUR_RECNO((short)1, "curRecno"),
    EXTENT_SIZE((short)2, "extentSize"),
    FIRST_RECNO((short)3, "firstRecno"),
    MAGIC((short)4, "magic"),
    META_FLAGS((short)5, "metaFlags"),
    NUM_DATA((short)6, "numData"),
    NUM_KEYS((short)7, "numKeys"),
    PAGES((short)8, "pages"),
    PAGES_FREE((short)9, "pagesFree"),
    PAGE_SIZE((short)10, "pageSize"),
    RE_LEN((short)11, "reLen"),
    RE_PAD((short)12, "rePad"),
    VERSION((short)13, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUR_RECNO
          return CUR_RECNO;
        case 2: // EXTENT_SIZE
          return EXTENT_SIZE;
        case 3: // FIRST_RECNO
          return FIRST_RECNO;
        case 4: // MAGIC
          return MAGIC;
        case 5: // META_FLAGS
          return META_FLAGS;
        case 6: // NUM_DATA
          return NUM_DATA;
        case 7: // NUM_KEYS
          return NUM_KEYS;
        case 8: // PAGES
          return PAGES;
        case 9: // PAGES_FREE
          return PAGES_FREE;
        case 10: // PAGE_SIZE
          return PAGE_SIZE;
        case 11: // RE_LEN
          return RE_LEN;
        case 12: // RE_PAD
          return RE_PAD;
        case 13: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRECNO_ISSET_ID = 0;
  private static final int __EXTENTSIZE_ISSET_ID = 1;
  private static final int __FIRSTRECNO_ISSET_ID = 2;
  private static final int __MAGIC_ISSET_ID = 3;
  private static final int __METAFLAGS_ISSET_ID = 4;
  private static final int __NUMDATA_ISSET_ID = 5;
  private static final int __NUMKEYS_ISSET_ID = 6;
  private static final int __PAGES_ISSET_ID = 7;
  private static final int __PAGESFREE_ISSET_ID = 8;
  private static final int __PAGESIZE_ISSET_ID = 9;
  private static final int __RELEN_ISSET_ID = 10;
  private static final int __REPAD_ISSET_ID = 11;
  private static final int __VERSION_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUR_RECNO, new org.apache.thrift.meta_data.FieldMetaData("curRecno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("extentSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST_RECNO, new org.apache.thrift.meta_data.FieldMetaData("firstRecno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAGIC, new org.apache.thrift.meta_data.FieldMetaData("magic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.META_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("metaFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_DATA, new org.apache.thrift.meta_data.FieldMetaData("numData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_KEYS, new org.apache.thrift.meta_data.FieldMetaData("numKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGES, new org.apache.thrift.meta_data.FieldMetaData("pages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGES_FREE, new org.apache.thrift.meta_data.FieldMetaData("pagesFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_LEN, new org.apache.thrift.meta_data.FieldMetaData("reLen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_PAD, new org.apache.thrift.meta_data.FieldMetaData("rePad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueueStat.class, metaDataMap);
  }

  public TQueueStat() {
  }

  public TQueueStat(
    int curRecno,
    int extentSize,
    int firstRecno,
    int magic,
    int metaFlags,
    int numData,
    int numKeys,
    int pages,
    int pagesFree,
    int pageSize,
    int reLen,
    int rePad,
    int version)
  {
    this();
    this.curRecno = curRecno;
    setCurRecnoIsSet(true);
    this.extentSize = extentSize;
    setExtentSizeIsSet(true);
    this.firstRecno = firstRecno;
    setFirstRecnoIsSet(true);
    this.magic = magic;
    setMagicIsSet(true);
    this.metaFlags = metaFlags;
    setMetaFlagsIsSet(true);
    this.numData = numData;
    setNumDataIsSet(true);
    this.numKeys = numKeys;
    setNumKeysIsSet(true);
    this.pages = pages;
    setPagesIsSet(true);
    this.pagesFree = pagesFree;
    setPagesFreeIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.reLen = reLen;
    setReLenIsSet(true);
    this.rePad = rePad;
    setRePadIsSet(true);
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueueStat(TQueueStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.curRecno = other.curRecno;
    this.extentSize = other.extentSize;
    this.firstRecno = other.firstRecno;
    this.magic = other.magic;
    this.metaFlags = other.metaFlags;
    this.numData = other.numData;
    this.numKeys = other.numKeys;
    this.pages = other.pages;
    this.pagesFree = other.pagesFree;
    this.pageSize = other.pageSize;
    this.reLen = other.reLen;
    this.rePad = other.rePad;
    this.version = other.version;
  }

  public TQueueStat deepCopy() {
    return new TQueueStat(this);
  }

  @Override
  public void clear() {
    setCurRecnoIsSet(false);
    this.curRecno = 0;
    setExtentSizeIsSet(false);
    this.extentSize = 0;
    setFirstRecnoIsSet(false);
    this.firstRecno = 0;
    setMagicIsSet(false);
    this.magic = 0;
    setMetaFlagsIsSet(false);
    this.metaFlags = 0;
    setNumDataIsSet(false);
    this.numData = 0;
    setNumKeysIsSet(false);
    this.numKeys = 0;
    setPagesIsSet(false);
    this.pages = 0;
    setPagesFreeIsSet(false);
    this.pagesFree = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setReLenIsSet(false);
    this.reLen = 0;
    setRePadIsSet(false);
    this.rePad = 0;
    setVersionIsSet(false);
    this.version = 0;
  }

  public int getCurRecno() {
    return this.curRecno;
  }

  public TQueueStat setCurRecno(int curRecno) {
    this.curRecno = curRecno;
    setCurRecnoIsSet(true);
    return this;
  }

  public void unsetCurRecno() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRECNO_ISSET_ID);
  }

  /** Returns true if field curRecno is set (has been assigned a value) and false otherwise */
  public boolean isSetCurRecno() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRECNO_ISSET_ID);
  }

  public void setCurRecnoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRECNO_ISSET_ID, value);
  }

  public int getExtentSize() {
    return this.extentSize;
  }

  public TQueueStat setExtentSize(int extentSize) {
    this.extentSize = extentSize;
    setExtentSizeIsSet(true);
    return this;
  }

  public void unsetExtentSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENTSIZE_ISSET_ID);
  }

  /** Returns true if field extentSize is set (has been assigned a value) and false otherwise */
  public boolean isSetExtentSize() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENTSIZE_ISSET_ID);
  }

  public void setExtentSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENTSIZE_ISSET_ID, value);
  }

  public int getFirstRecno() {
    return this.firstRecno;
  }

  public TQueueStat setFirstRecno(int firstRecno) {
    this.firstRecno = firstRecno;
    setFirstRecnoIsSet(true);
    return this;
  }

  public void unsetFirstRecno() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTRECNO_ISSET_ID);
  }

  /** Returns true if field firstRecno is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstRecno() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTRECNO_ISSET_ID);
  }

  public void setFirstRecnoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTRECNO_ISSET_ID, value);
  }

  public int getMagic() {
    return this.magic;
  }

  public TQueueStat setMagic(int magic) {
    this.magic = magic;
    setMagicIsSet(true);
    return this;
  }

  public void unsetMagic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAGIC_ISSET_ID);
  }

  /** Returns true if field magic is set (has been assigned a value) and false otherwise */
  public boolean isSetMagic() {
    return EncodingUtils.testBit(__isset_bitfield, __MAGIC_ISSET_ID);
  }

  public void setMagicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAGIC_ISSET_ID, value);
  }

  public int getMetaFlags() {
    return this.metaFlags;
  }

  public TQueueStat setMetaFlags(int metaFlags) {
    this.metaFlags = metaFlags;
    setMetaFlagsIsSet(true);
    return this;
  }

  public void unsetMetaFlags() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METAFLAGS_ISSET_ID);
  }

  /** Returns true if field metaFlags is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaFlags() {
    return EncodingUtils.testBit(__isset_bitfield, __METAFLAGS_ISSET_ID);
  }

  public void setMetaFlagsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METAFLAGS_ISSET_ID, value);
  }

  public int getNumData() {
    return this.numData;
  }

  public TQueueStat setNumData(int numData) {
    this.numData = numData;
    setNumDataIsSet(true);
    return this;
  }

  public void unsetNumData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMDATA_ISSET_ID);
  }

  /** Returns true if field numData is set (has been assigned a value) and false otherwise */
  public boolean isSetNumData() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMDATA_ISSET_ID);
  }

  public void setNumDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMDATA_ISSET_ID, value);
  }

  public int getNumKeys() {
    return this.numKeys;
  }

  public TQueueStat setNumKeys(int numKeys) {
    this.numKeys = numKeys;
    setNumKeysIsSet(true);
    return this;
  }

  public void unsetNumKeys() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMKEYS_ISSET_ID);
  }

  /** Returns true if field numKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetNumKeys() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMKEYS_ISSET_ID);
  }

  public void setNumKeysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMKEYS_ISSET_ID, value);
  }

  public int getPages() {
    return this.pages;
  }

  public TQueueStat setPages(int pages) {
    this.pages = pages;
    setPagesIsSet(true);
    return this;
  }

  public void unsetPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGES_ISSET_ID);
  }

  /** Returns true if field pages is set (has been assigned a value) and false otherwise */
  public boolean isSetPages() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGES_ISSET_ID);
  }

  public void setPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGES_ISSET_ID, value);
  }

  public int getPagesFree() {
    return this.pagesFree;
  }

  public TQueueStat setPagesFree(int pagesFree) {
    this.pagesFree = pagesFree;
    setPagesFreeIsSet(true);
    return this;
  }

  public void unsetPagesFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESFREE_ISSET_ID);
  }

  /** Returns true if field pagesFree is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesFree() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESFREE_ISSET_ID);
  }

  public void setPagesFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESFREE_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public TQueueStat setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getReLen() {
    return this.reLen;
  }

  public TQueueStat setReLen(int reLen) {
    this.reLen = reLen;
    setReLenIsSet(true);
    return this;
  }

  public void unsetReLen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELEN_ISSET_ID);
  }

  /** Returns true if field reLen is set (has been assigned a value) and false otherwise */
  public boolean isSetReLen() {
    return EncodingUtils.testBit(__isset_bitfield, __RELEN_ISSET_ID);
  }

  public void setReLenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELEN_ISSET_ID, value);
  }

  public int getRePad() {
    return this.rePad;
  }

  public TQueueStat setRePad(int rePad) {
    this.rePad = rePad;
    setRePadIsSet(true);
    return this;
  }

  public void unsetRePad() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAD_ISSET_ID);
  }

  /** Returns true if field rePad is set (has been assigned a value) and false otherwise */
  public boolean isSetRePad() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAD_ISSET_ID);
  }

  public void setRePadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAD_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public TQueueStat setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUR_RECNO:
      if (value == null) {
        unsetCurRecno();
      } else {
        setCurRecno((Integer)value);
      }
      break;

    case EXTENT_SIZE:
      if (value == null) {
        unsetExtentSize();
      } else {
        setExtentSize((Integer)value);
      }
      break;

    case FIRST_RECNO:
      if (value == null) {
        unsetFirstRecno();
      } else {
        setFirstRecno((Integer)value);
      }
      break;

    case MAGIC:
      if (value == null) {
        unsetMagic();
      } else {
        setMagic((Integer)value);
      }
      break;

    case META_FLAGS:
      if (value == null) {
        unsetMetaFlags();
      } else {
        setMetaFlags((Integer)value);
      }
      break;

    case NUM_DATA:
      if (value == null) {
        unsetNumData();
      } else {
        setNumData((Integer)value);
      }
      break;

    case NUM_KEYS:
      if (value == null) {
        unsetNumKeys();
      } else {
        setNumKeys((Integer)value);
      }
      break;

    case PAGES:
      if (value == null) {
        unsetPages();
      } else {
        setPages((Integer)value);
      }
      break;

    case PAGES_FREE:
      if (value == null) {
        unsetPagesFree();
      } else {
        setPagesFree((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case RE_LEN:
      if (value == null) {
        unsetReLen();
      } else {
        setReLen((Integer)value);
      }
      break;

    case RE_PAD:
      if (value == null) {
        unsetRePad();
      } else {
        setRePad((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUR_RECNO:
      return Integer.valueOf(getCurRecno());

    case EXTENT_SIZE:
      return Integer.valueOf(getExtentSize());

    case FIRST_RECNO:
      return Integer.valueOf(getFirstRecno());

    case MAGIC:
      return Integer.valueOf(getMagic());

    case META_FLAGS:
      return Integer.valueOf(getMetaFlags());

    case NUM_DATA:
      return Integer.valueOf(getNumData());

    case NUM_KEYS:
      return Integer.valueOf(getNumKeys());

    case PAGES:
      return Integer.valueOf(getPages());

    case PAGES_FREE:
      return Integer.valueOf(getPagesFree());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case RE_LEN:
      return Integer.valueOf(getReLen());

    case RE_PAD:
      return Integer.valueOf(getRePad());

    case VERSION:
      return Integer.valueOf(getVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUR_RECNO:
      return isSetCurRecno();
    case EXTENT_SIZE:
      return isSetExtentSize();
    case FIRST_RECNO:
      return isSetFirstRecno();
    case MAGIC:
      return isSetMagic();
    case META_FLAGS:
      return isSetMetaFlags();
    case NUM_DATA:
      return isSetNumData();
    case NUM_KEYS:
      return isSetNumKeys();
    case PAGES:
      return isSetPages();
    case PAGES_FREE:
      return isSetPagesFree();
    case PAGE_SIZE:
      return isSetPageSize();
    case RE_LEN:
      return isSetReLen();
    case RE_PAD:
      return isSetRePad();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueueStat)
      return this.equals((TQueueStat)that);
    return false;
  }

  public boolean equals(TQueueStat that) {
    if (that == null)
      return false;

    boolean this_present_curRecno = true;
    boolean that_present_curRecno = true;
    if (this_present_curRecno || that_present_curRecno) {
      if (!(this_present_curRecno && that_present_curRecno))
        return false;
      if (this.curRecno != that.curRecno)
        return false;
    }

    boolean this_present_extentSize = true;
    boolean that_present_extentSize = true;
    if (this_present_extentSize || that_present_extentSize) {
      if (!(this_present_extentSize && that_present_extentSize))
        return false;
      if (this.extentSize != that.extentSize)
        return false;
    }

    boolean this_present_firstRecno = true;
    boolean that_present_firstRecno = true;
    if (this_present_firstRecno || that_present_firstRecno) {
      if (!(this_present_firstRecno && that_present_firstRecno))
        return false;
      if (this.firstRecno != that.firstRecno)
        return false;
    }

    boolean this_present_magic = true;
    boolean that_present_magic = true;
    if (this_present_magic || that_present_magic) {
      if (!(this_present_magic && that_present_magic))
        return false;
      if (this.magic != that.magic)
        return false;
    }

    boolean this_present_metaFlags = true;
    boolean that_present_metaFlags = true;
    if (this_present_metaFlags || that_present_metaFlags) {
      if (!(this_present_metaFlags && that_present_metaFlags))
        return false;
      if (this.metaFlags != that.metaFlags)
        return false;
    }

    boolean this_present_numData = true;
    boolean that_present_numData = true;
    if (this_present_numData || that_present_numData) {
      if (!(this_present_numData && that_present_numData))
        return false;
      if (this.numData != that.numData)
        return false;
    }

    boolean this_present_numKeys = true;
    boolean that_present_numKeys = true;
    if (this_present_numKeys || that_present_numKeys) {
      if (!(this_present_numKeys && that_present_numKeys))
        return false;
      if (this.numKeys != that.numKeys)
        return false;
    }

    boolean this_present_pages = true;
    boolean that_present_pages = true;
    if (this_present_pages || that_present_pages) {
      if (!(this_present_pages && that_present_pages))
        return false;
      if (this.pages != that.pages)
        return false;
    }

    boolean this_present_pagesFree = true;
    boolean that_present_pagesFree = true;
    if (this_present_pagesFree || that_present_pagesFree) {
      if (!(this_present_pagesFree && that_present_pagesFree))
        return false;
      if (this.pagesFree != that.pagesFree)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_reLen = true;
    boolean that_present_reLen = true;
    if (this_present_reLen || that_present_reLen) {
      if (!(this_present_reLen && that_present_reLen))
        return false;
      if (this.reLen != that.reLen)
        return false;
    }

    boolean this_present_rePad = true;
    boolean that_present_rePad = true;
    if (this_present_rePad || that_present_rePad) {
      if (!(this_present_rePad && that_present_rePad))
        return false;
      if (this.rePad != that.rePad)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_curRecno = true;
    list.add(present_curRecno);
    if (present_curRecno)
      list.add(curRecno);

    boolean present_extentSize = true;
    list.add(present_extentSize);
    if (present_extentSize)
      list.add(extentSize);

    boolean present_firstRecno = true;
    list.add(present_firstRecno);
    if (present_firstRecno)
      list.add(firstRecno);

    boolean present_magic = true;
    list.add(present_magic);
    if (present_magic)
      list.add(magic);

    boolean present_metaFlags = true;
    list.add(present_metaFlags);
    if (present_metaFlags)
      list.add(metaFlags);

    boolean present_numData = true;
    list.add(present_numData);
    if (present_numData)
      list.add(numData);

    boolean present_numKeys = true;
    list.add(present_numKeys);
    if (present_numKeys)
      list.add(numKeys);

    boolean present_pages = true;
    list.add(present_pages);
    if (present_pages)
      list.add(pages);

    boolean present_pagesFree = true;
    list.add(present_pagesFree);
    if (present_pagesFree)
      list.add(pagesFree);

    boolean present_pageSize = true;
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_reLen = true;
    list.add(present_reLen);
    if (present_reLen)
      list.add(reLen);

    boolean present_rePad = true;
    list.add(present_rePad);
    if (present_rePad)
      list.add(rePad);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    return list.hashCode();
  }

  @Override
  public int compareTo(TQueueStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurRecno()).compareTo(other.isSetCurRecno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurRecno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curRecno, other.curRecno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtentSize()).compareTo(other.isSetExtentSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtentSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extentSize, other.extentSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstRecno()).compareTo(other.isSetFirstRecno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstRecno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstRecno, other.firstRecno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMagic()).compareTo(other.isSetMagic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMagic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.magic, other.magic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetaFlags()).compareTo(other.isSetMetaFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaFlags, other.metaFlags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumData()).compareTo(other.isSetNumData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numData, other.numData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumKeys()).compareTo(other.isSetNumKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numKeys, other.numKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPages()).compareTo(other.isSetPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pages, other.pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPagesFree()).compareTo(other.isSetPagesFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesFree, other.pagesFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReLen()).compareTo(other.isSetReLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reLen, other.reLen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRePad()).compareTo(other.isSetRePad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRePad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rePad, other.rePad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueueStat(");
    boolean first = true;

    sb.append("curRecno:");
    sb.append(this.curRecno);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extentSize:");
    sb.append(this.extentSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstRecno:");
    sb.append(this.firstRecno);
    first = false;
    if (!first) sb.append(", ");
    sb.append("magic:");
    sb.append(this.magic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metaFlags:");
    sb.append(this.metaFlags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numData:");
    sb.append(this.numData);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numKeys:");
    sb.append(this.numKeys);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pages:");
    sb.append(this.pages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pagesFree:");
    sb.append(this.pagesFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reLen:");
    sb.append(this.reLen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rePad:");
    sb.append(this.rePad);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueueStatStandardSchemeFactory implements SchemeFactory {
    public TQueueStatStandardScheme getScheme() {
      return new TQueueStatStandardScheme();
    }
  }

  private static class TQueueStatStandardScheme extends StandardScheme<TQueueStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueueStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUR_RECNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curRecno = iprot.readI32();
              struct.setCurRecnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXTENT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extentSize = iprot.readI32();
              struct.setExtentSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIRST_RECNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.firstRecno = iprot.readI32();
              struct.setFirstRecnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAGIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.magic = iprot.readI32();
              struct.setMagicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // META_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.metaFlags = iprot.readI32();
              struct.setMetaFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numData = iprot.readI32();
              struct.setNumDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numKeys = iprot.readI32();
              struct.setNumKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pages = iprot.readI32();
              struct.setPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAGES_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagesFree = iprot.readI32();
              struct.setPagesFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RE_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reLen = iprot.readI32();
              struct.setReLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RE_PAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rePad = iprot.readI32();
              struct.setRePadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueueStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CUR_RECNO_FIELD_DESC);
      oprot.writeI32(struct.curRecno);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENT_SIZE_FIELD_DESC);
      oprot.writeI32(struct.extentSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_RECNO_FIELD_DESC);
      oprot.writeI32(struct.firstRecno);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAGIC_FIELD_DESC);
      oprot.writeI32(struct.magic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(META_FLAGS_FIELD_DESC);
      oprot.writeI32(struct.metaFlags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_DATA_FIELD_DESC);
      oprot.writeI32(struct.numData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_KEYS_FIELD_DESC);
      oprot.writeI32(struct.numKeys);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGES_FIELD_DESC);
      oprot.writeI32(struct.pages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGES_FREE_FIELD_DESC);
      oprot.writeI32(struct.pagesFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RE_LEN_FIELD_DESC);
      oprot.writeI32(struct.reLen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RE_PAD_FIELD_DESC);
      oprot.writeI32(struct.rePad);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueueStatTupleSchemeFactory implements SchemeFactory {
    public TQueueStatTupleScheme getScheme() {
      return new TQueueStatTupleScheme();
    }
  }

  private static class TQueueStatTupleScheme extends TupleScheme<TQueueStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueueStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurRecno()) {
        optionals.set(0);
      }
      if (struct.isSetExtentSize()) {
        optionals.set(1);
      }
      if (struct.isSetFirstRecno()) {
        optionals.set(2);
      }
      if (struct.isSetMagic()) {
        optionals.set(3);
      }
      if (struct.isSetMetaFlags()) {
        optionals.set(4);
      }
      if (struct.isSetNumData()) {
        optionals.set(5);
      }
      if (struct.isSetNumKeys()) {
        optionals.set(6);
      }
      if (struct.isSetPages()) {
        optionals.set(7);
      }
      if (struct.isSetPagesFree()) {
        optionals.set(8);
      }
      if (struct.isSetPageSize()) {
        optionals.set(9);
      }
      if (struct.isSetReLen()) {
        optionals.set(10);
      }
      if (struct.isSetRePad()) {
        optionals.set(11);
      }
      if (struct.isSetVersion()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCurRecno()) {
        oprot.writeI32(struct.curRecno);
      }
      if (struct.isSetExtentSize()) {
        oprot.writeI32(struct.extentSize);
      }
      if (struct.isSetFirstRecno()) {
        oprot.writeI32(struct.firstRecno);
      }
      if (struct.isSetMagic()) {
        oprot.writeI32(struct.magic);
      }
      if (struct.isSetMetaFlags()) {
        oprot.writeI32(struct.metaFlags);
      }
      if (struct.isSetNumData()) {
        oprot.writeI32(struct.numData);
      }
      if (struct.isSetNumKeys()) {
        oprot.writeI32(struct.numKeys);
      }
      if (struct.isSetPages()) {
        oprot.writeI32(struct.pages);
      }
      if (struct.isSetPagesFree()) {
        oprot.writeI32(struct.pagesFree);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetReLen()) {
        oprot.writeI32(struct.reLen);
      }
      if (struct.isSetRePad()) {
        oprot.writeI32(struct.rePad);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueueStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.curRecno = iprot.readI32();
        struct.setCurRecnoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.extentSize = iprot.readI32();
        struct.setExtentSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.firstRecno = iprot.readI32();
        struct.setFirstRecnoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.magic = iprot.readI32();
        struct.setMagicIsSet(true);
      }
      if (incoming.get(4)) {
        struct.metaFlags = iprot.readI32();
        struct.setMetaFlagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.numData = iprot.readI32();
        struct.setNumDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.numKeys = iprot.readI32();
        struct.setNumKeysIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pages = iprot.readI32();
        struct.setPagesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pagesFree = iprot.readI32();
        struct.setPagesFreeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reLen = iprot.readI32();
        struct.setReLenIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rePad = iprot.readI32();
        struct.setRePadIsSet(true);
      }
      if (incoming.get(12)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
    }
  }

}

