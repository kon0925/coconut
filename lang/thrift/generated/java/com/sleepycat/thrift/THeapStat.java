/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class THeapStat implements org.apache.thrift.TBase<THeapStat, THeapStat._Fields>, java.io.Serializable, Cloneable, Comparable<THeapStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THeapStat");

  private static final org.apache.thrift.protocol.TField HEAP_MAGIC_FIELD_DESC = new org.apache.thrift.protocol.TField("heapMagic", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEAP_META_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("heapMetaFlags", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HEAP_NUM_BLOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("heapNumBlobs", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HEAP_NUM_RECS_FIELD_DESC = new org.apache.thrift.protocol.TField("heapNumRecs", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HEAP_NUM_REGIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("heapNumRegions", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HEAP_PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("heapPageCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HEAP_PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("heapPageSize", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HEAP_REGION_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("heapRegionSize", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HEAP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("heapVersion", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THeapStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THeapStatTupleSchemeFactory());
  }

  public int heapMagic; // required
  public int heapMetaFlags; // required
  public int heapNumBlobs; // required
  public int heapNumRecs; // required
  public int heapNumRegions; // required
  public int heapPageCount; // required
  public int heapPageSize; // required
  public int heapRegionSize; // required
  public int heapVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAP_MAGIC((short)1, "heapMagic"),
    HEAP_META_FLAGS((short)2, "heapMetaFlags"),
    HEAP_NUM_BLOBS((short)3, "heapNumBlobs"),
    HEAP_NUM_RECS((short)4, "heapNumRecs"),
    HEAP_NUM_REGIONS((short)5, "heapNumRegions"),
    HEAP_PAGE_COUNT((short)6, "heapPageCount"),
    HEAP_PAGE_SIZE((short)7, "heapPageSize"),
    HEAP_REGION_SIZE((short)8, "heapRegionSize"),
    HEAP_VERSION((short)9, "heapVersion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAP_MAGIC
          return HEAP_MAGIC;
        case 2: // HEAP_META_FLAGS
          return HEAP_META_FLAGS;
        case 3: // HEAP_NUM_BLOBS
          return HEAP_NUM_BLOBS;
        case 4: // HEAP_NUM_RECS
          return HEAP_NUM_RECS;
        case 5: // HEAP_NUM_REGIONS
          return HEAP_NUM_REGIONS;
        case 6: // HEAP_PAGE_COUNT
          return HEAP_PAGE_COUNT;
        case 7: // HEAP_PAGE_SIZE
          return HEAP_PAGE_SIZE;
        case 8: // HEAP_REGION_SIZE
          return HEAP_REGION_SIZE;
        case 9: // HEAP_VERSION
          return HEAP_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEAPMAGIC_ISSET_ID = 0;
  private static final int __HEAPMETAFLAGS_ISSET_ID = 1;
  private static final int __HEAPNUMBLOBS_ISSET_ID = 2;
  private static final int __HEAPNUMRECS_ISSET_ID = 3;
  private static final int __HEAPNUMREGIONS_ISSET_ID = 4;
  private static final int __HEAPPAGECOUNT_ISSET_ID = 5;
  private static final int __HEAPPAGESIZE_ISSET_ID = 6;
  private static final int __HEAPREGIONSIZE_ISSET_ID = 7;
  private static final int __HEAPVERSION_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAP_MAGIC, new org.apache.thrift.meta_data.FieldMetaData("heapMagic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_META_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("heapMetaFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_NUM_BLOBS, new org.apache.thrift.meta_data.FieldMetaData("heapNumBlobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_NUM_RECS, new org.apache.thrift.meta_data.FieldMetaData("heapNumRecs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_NUM_REGIONS, new org.apache.thrift.meta_data.FieldMetaData("heapNumRegions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("heapPageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("heapPageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_REGION_SIZE, new org.apache.thrift.meta_data.FieldMetaData("heapRegionSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("heapVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THeapStat.class, metaDataMap);
  }

  public THeapStat() {
  }

  public THeapStat(
    int heapMagic,
    int heapMetaFlags,
    int heapNumBlobs,
    int heapNumRecs,
    int heapNumRegions,
    int heapPageCount,
    int heapPageSize,
    int heapRegionSize,
    int heapVersion)
  {
    this();
    this.heapMagic = heapMagic;
    setHeapMagicIsSet(true);
    this.heapMetaFlags = heapMetaFlags;
    setHeapMetaFlagsIsSet(true);
    this.heapNumBlobs = heapNumBlobs;
    setHeapNumBlobsIsSet(true);
    this.heapNumRecs = heapNumRecs;
    setHeapNumRecsIsSet(true);
    this.heapNumRegions = heapNumRegions;
    setHeapNumRegionsIsSet(true);
    this.heapPageCount = heapPageCount;
    setHeapPageCountIsSet(true);
    this.heapPageSize = heapPageSize;
    setHeapPageSizeIsSet(true);
    this.heapRegionSize = heapRegionSize;
    setHeapRegionSizeIsSet(true);
    this.heapVersion = heapVersion;
    setHeapVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THeapStat(THeapStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.heapMagic = other.heapMagic;
    this.heapMetaFlags = other.heapMetaFlags;
    this.heapNumBlobs = other.heapNumBlobs;
    this.heapNumRecs = other.heapNumRecs;
    this.heapNumRegions = other.heapNumRegions;
    this.heapPageCount = other.heapPageCount;
    this.heapPageSize = other.heapPageSize;
    this.heapRegionSize = other.heapRegionSize;
    this.heapVersion = other.heapVersion;
  }

  public THeapStat deepCopy() {
    return new THeapStat(this);
  }

  @Override
  public void clear() {
    setHeapMagicIsSet(false);
    this.heapMagic = 0;
    setHeapMetaFlagsIsSet(false);
    this.heapMetaFlags = 0;
    setHeapNumBlobsIsSet(false);
    this.heapNumBlobs = 0;
    setHeapNumRecsIsSet(false);
    this.heapNumRecs = 0;
    setHeapNumRegionsIsSet(false);
    this.heapNumRegions = 0;
    setHeapPageCountIsSet(false);
    this.heapPageCount = 0;
    setHeapPageSizeIsSet(false);
    this.heapPageSize = 0;
    setHeapRegionSizeIsSet(false);
    this.heapRegionSize = 0;
    setHeapVersionIsSet(false);
    this.heapVersion = 0;
  }

  public int getHeapMagic() {
    return this.heapMagic;
  }

  public THeapStat setHeapMagic(int heapMagic) {
    this.heapMagic = heapMagic;
    setHeapMagicIsSet(true);
    return this;
  }

  public void unsetHeapMagic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPMAGIC_ISSET_ID);
  }

  /** Returns true if field heapMagic is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapMagic() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPMAGIC_ISSET_ID);
  }

  public void setHeapMagicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPMAGIC_ISSET_ID, value);
  }

  public int getHeapMetaFlags() {
    return this.heapMetaFlags;
  }

  public THeapStat setHeapMetaFlags(int heapMetaFlags) {
    this.heapMetaFlags = heapMetaFlags;
    setHeapMetaFlagsIsSet(true);
    return this;
  }

  public void unsetHeapMetaFlags() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPMETAFLAGS_ISSET_ID);
  }

  /** Returns true if field heapMetaFlags is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapMetaFlags() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPMETAFLAGS_ISSET_ID);
  }

  public void setHeapMetaFlagsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPMETAFLAGS_ISSET_ID, value);
  }

  public int getHeapNumBlobs() {
    return this.heapNumBlobs;
  }

  public THeapStat setHeapNumBlobs(int heapNumBlobs) {
    this.heapNumBlobs = heapNumBlobs;
    setHeapNumBlobsIsSet(true);
    return this;
  }

  public void unsetHeapNumBlobs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPNUMBLOBS_ISSET_ID);
  }

  /** Returns true if field heapNumBlobs is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapNumBlobs() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPNUMBLOBS_ISSET_ID);
  }

  public void setHeapNumBlobsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPNUMBLOBS_ISSET_ID, value);
  }

  public int getHeapNumRecs() {
    return this.heapNumRecs;
  }

  public THeapStat setHeapNumRecs(int heapNumRecs) {
    this.heapNumRecs = heapNumRecs;
    setHeapNumRecsIsSet(true);
    return this;
  }

  public void unsetHeapNumRecs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPNUMRECS_ISSET_ID);
  }

  /** Returns true if field heapNumRecs is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapNumRecs() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPNUMRECS_ISSET_ID);
  }

  public void setHeapNumRecsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPNUMRECS_ISSET_ID, value);
  }

  public int getHeapNumRegions() {
    return this.heapNumRegions;
  }

  public THeapStat setHeapNumRegions(int heapNumRegions) {
    this.heapNumRegions = heapNumRegions;
    setHeapNumRegionsIsSet(true);
    return this;
  }

  public void unsetHeapNumRegions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPNUMREGIONS_ISSET_ID);
  }

  /** Returns true if field heapNumRegions is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapNumRegions() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPNUMREGIONS_ISSET_ID);
  }

  public void setHeapNumRegionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPNUMREGIONS_ISSET_ID, value);
  }

  public int getHeapPageCount() {
    return this.heapPageCount;
  }

  public THeapStat setHeapPageCount(int heapPageCount) {
    this.heapPageCount = heapPageCount;
    setHeapPageCountIsSet(true);
    return this;
  }

  public void unsetHeapPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPPAGECOUNT_ISSET_ID);
  }

  /** Returns true if field heapPageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPPAGECOUNT_ISSET_ID);
  }

  public void setHeapPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPPAGECOUNT_ISSET_ID, value);
  }

  public int getHeapPageSize() {
    return this.heapPageSize;
  }

  public THeapStat setHeapPageSize(int heapPageSize) {
    this.heapPageSize = heapPageSize;
    setHeapPageSizeIsSet(true);
    return this;
  }

  public void unsetHeapPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPPAGESIZE_ISSET_ID);
  }

  /** Returns true if field heapPageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPPAGESIZE_ISSET_ID);
  }

  public void setHeapPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPPAGESIZE_ISSET_ID, value);
  }

  public int getHeapRegionSize() {
    return this.heapRegionSize;
  }

  public THeapStat setHeapRegionSize(int heapRegionSize) {
    this.heapRegionSize = heapRegionSize;
    setHeapRegionSizeIsSet(true);
    return this;
  }

  public void unsetHeapRegionSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPREGIONSIZE_ISSET_ID);
  }

  /** Returns true if field heapRegionSize is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapRegionSize() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPREGIONSIZE_ISSET_ID);
  }

  public void setHeapRegionSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPREGIONSIZE_ISSET_ID, value);
  }

  public int getHeapVersion() {
    return this.heapVersion;
  }

  public THeapStat setHeapVersion(int heapVersion) {
    this.heapVersion = heapVersion;
    setHeapVersionIsSet(true);
    return this;
  }

  public void unsetHeapVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPVERSION_ISSET_ID);
  }

  /** Returns true if field heapVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPVERSION_ISSET_ID);
  }

  public void setHeapVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPVERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAP_MAGIC:
      if (value == null) {
        unsetHeapMagic();
      } else {
        setHeapMagic((Integer)value);
      }
      break;

    case HEAP_META_FLAGS:
      if (value == null) {
        unsetHeapMetaFlags();
      } else {
        setHeapMetaFlags((Integer)value);
      }
      break;

    case HEAP_NUM_BLOBS:
      if (value == null) {
        unsetHeapNumBlobs();
      } else {
        setHeapNumBlobs((Integer)value);
      }
      break;

    case HEAP_NUM_RECS:
      if (value == null) {
        unsetHeapNumRecs();
      } else {
        setHeapNumRecs((Integer)value);
      }
      break;

    case HEAP_NUM_REGIONS:
      if (value == null) {
        unsetHeapNumRegions();
      } else {
        setHeapNumRegions((Integer)value);
      }
      break;

    case HEAP_PAGE_COUNT:
      if (value == null) {
        unsetHeapPageCount();
      } else {
        setHeapPageCount((Integer)value);
      }
      break;

    case HEAP_PAGE_SIZE:
      if (value == null) {
        unsetHeapPageSize();
      } else {
        setHeapPageSize((Integer)value);
      }
      break;

    case HEAP_REGION_SIZE:
      if (value == null) {
        unsetHeapRegionSize();
      } else {
        setHeapRegionSize((Integer)value);
      }
      break;

    case HEAP_VERSION:
      if (value == null) {
        unsetHeapVersion();
      } else {
        setHeapVersion((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAP_MAGIC:
      return Integer.valueOf(getHeapMagic());

    case HEAP_META_FLAGS:
      return Integer.valueOf(getHeapMetaFlags());

    case HEAP_NUM_BLOBS:
      return Integer.valueOf(getHeapNumBlobs());

    case HEAP_NUM_RECS:
      return Integer.valueOf(getHeapNumRecs());

    case HEAP_NUM_REGIONS:
      return Integer.valueOf(getHeapNumRegions());

    case HEAP_PAGE_COUNT:
      return Integer.valueOf(getHeapPageCount());

    case HEAP_PAGE_SIZE:
      return Integer.valueOf(getHeapPageSize());

    case HEAP_REGION_SIZE:
      return Integer.valueOf(getHeapRegionSize());

    case HEAP_VERSION:
      return Integer.valueOf(getHeapVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAP_MAGIC:
      return isSetHeapMagic();
    case HEAP_META_FLAGS:
      return isSetHeapMetaFlags();
    case HEAP_NUM_BLOBS:
      return isSetHeapNumBlobs();
    case HEAP_NUM_RECS:
      return isSetHeapNumRecs();
    case HEAP_NUM_REGIONS:
      return isSetHeapNumRegions();
    case HEAP_PAGE_COUNT:
      return isSetHeapPageCount();
    case HEAP_PAGE_SIZE:
      return isSetHeapPageSize();
    case HEAP_REGION_SIZE:
      return isSetHeapRegionSize();
    case HEAP_VERSION:
      return isSetHeapVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THeapStat)
      return this.equals((THeapStat)that);
    return false;
  }

  public boolean equals(THeapStat that) {
    if (that == null)
      return false;

    boolean this_present_heapMagic = true;
    boolean that_present_heapMagic = true;
    if (this_present_heapMagic || that_present_heapMagic) {
      if (!(this_present_heapMagic && that_present_heapMagic))
        return false;
      if (this.heapMagic != that.heapMagic)
        return false;
    }

    boolean this_present_heapMetaFlags = true;
    boolean that_present_heapMetaFlags = true;
    if (this_present_heapMetaFlags || that_present_heapMetaFlags) {
      if (!(this_present_heapMetaFlags && that_present_heapMetaFlags))
        return false;
      if (this.heapMetaFlags != that.heapMetaFlags)
        return false;
    }

    boolean this_present_heapNumBlobs = true;
    boolean that_present_heapNumBlobs = true;
    if (this_present_heapNumBlobs || that_present_heapNumBlobs) {
      if (!(this_present_heapNumBlobs && that_present_heapNumBlobs))
        return false;
      if (this.heapNumBlobs != that.heapNumBlobs)
        return false;
    }

    boolean this_present_heapNumRecs = true;
    boolean that_present_heapNumRecs = true;
    if (this_present_heapNumRecs || that_present_heapNumRecs) {
      if (!(this_present_heapNumRecs && that_present_heapNumRecs))
        return false;
      if (this.heapNumRecs != that.heapNumRecs)
        return false;
    }

    boolean this_present_heapNumRegions = true;
    boolean that_present_heapNumRegions = true;
    if (this_present_heapNumRegions || that_present_heapNumRegions) {
      if (!(this_present_heapNumRegions && that_present_heapNumRegions))
        return false;
      if (this.heapNumRegions != that.heapNumRegions)
        return false;
    }

    boolean this_present_heapPageCount = true;
    boolean that_present_heapPageCount = true;
    if (this_present_heapPageCount || that_present_heapPageCount) {
      if (!(this_present_heapPageCount && that_present_heapPageCount))
        return false;
      if (this.heapPageCount != that.heapPageCount)
        return false;
    }

    boolean this_present_heapPageSize = true;
    boolean that_present_heapPageSize = true;
    if (this_present_heapPageSize || that_present_heapPageSize) {
      if (!(this_present_heapPageSize && that_present_heapPageSize))
        return false;
      if (this.heapPageSize != that.heapPageSize)
        return false;
    }

    boolean this_present_heapRegionSize = true;
    boolean that_present_heapRegionSize = true;
    if (this_present_heapRegionSize || that_present_heapRegionSize) {
      if (!(this_present_heapRegionSize && that_present_heapRegionSize))
        return false;
      if (this.heapRegionSize != that.heapRegionSize)
        return false;
    }

    boolean this_present_heapVersion = true;
    boolean that_present_heapVersion = true;
    if (this_present_heapVersion || that_present_heapVersion) {
      if (!(this_present_heapVersion && that_present_heapVersion))
        return false;
      if (this.heapVersion != that.heapVersion)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_heapMagic = true;
    list.add(present_heapMagic);
    if (present_heapMagic)
      list.add(heapMagic);

    boolean present_heapMetaFlags = true;
    list.add(present_heapMetaFlags);
    if (present_heapMetaFlags)
      list.add(heapMetaFlags);

    boolean present_heapNumBlobs = true;
    list.add(present_heapNumBlobs);
    if (present_heapNumBlobs)
      list.add(heapNumBlobs);

    boolean present_heapNumRecs = true;
    list.add(present_heapNumRecs);
    if (present_heapNumRecs)
      list.add(heapNumRecs);

    boolean present_heapNumRegions = true;
    list.add(present_heapNumRegions);
    if (present_heapNumRegions)
      list.add(heapNumRegions);

    boolean present_heapPageCount = true;
    list.add(present_heapPageCount);
    if (present_heapPageCount)
      list.add(heapPageCount);

    boolean present_heapPageSize = true;
    list.add(present_heapPageSize);
    if (present_heapPageSize)
      list.add(heapPageSize);

    boolean present_heapRegionSize = true;
    list.add(present_heapRegionSize);
    if (present_heapRegionSize)
      list.add(heapRegionSize);

    boolean present_heapVersion = true;
    list.add(present_heapVersion);
    if (present_heapVersion)
      list.add(heapVersion);

    return list.hashCode();
  }

  @Override
  public int compareTo(THeapStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeapMagic()).compareTo(other.isSetHeapMagic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapMagic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapMagic, other.heapMagic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapMetaFlags()).compareTo(other.isSetHeapMetaFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapMetaFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapMetaFlags, other.heapMetaFlags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapNumBlobs()).compareTo(other.isSetHeapNumBlobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapNumBlobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapNumBlobs, other.heapNumBlobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapNumRecs()).compareTo(other.isSetHeapNumRecs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapNumRecs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapNumRecs, other.heapNumRecs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapNumRegions()).compareTo(other.isSetHeapNumRegions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapNumRegions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapNumRegions, other.heapNumRegions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapPageCount()).compareTo(other.isSetHeapPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapPageCount, other.heapPageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapPageSize()).compareTo(other.isSetHeapPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapPageSize, other.heapPageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapRegionSize()).compareTo(other.isSetHeapRegionSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapRegionSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapRegionSize, other.heapRegionSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapVersion()).compareTo(other.isSetHeapVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapVersion, other.heapVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THeapStat(");
    boolean first = true;

    sb.append("heapMagic:");
    sb.append(this.heapMagic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapMetaFlags:");
    sb.append(this.heapMetaFlags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapNumBlobs:");
    sb.append(this.heapNumBlobs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapNumRecs:");
    sb.append(this.heapNumRecs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapNumRegions:");
    sb.append(this.heapNumRegions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapPageCount:");
    sb.append(this.heapPageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapPageSize:");
    sb.append(this.heapPageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapRegionSize:");
    sb.append(this.heapRegionSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapVersion:");
    sb.append(this.heapVersion);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THeapStatStandardSchemeFactory implements SchemeFactory {
    public THeapStatStandardScheme getScheme() {
      return new THeapStatStandardScheme();
    }
  }

  private static class THeapStatStandardScheme extends StandardScheme<THeapStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THeapStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAP_MAGIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapMagic = iprot.readI32();
              struct.setHeapMagicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEAP_META_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapMetaFlags = iprot.readI32();
              struct.setHeapMetaFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEAP_NUM_BLOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapNumBlobs = iprot.readI32();
              struct.setHeapNumBlobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEAP_NUM_RECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapNumRecs = iprot.readI32();
              struct.setHeapNumRecsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEAP_NUM_REGIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapNumRegions = iprot.readI32();
              struct.setHeapNumRegionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEAP_PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapPageCount = iprot.readI32();
              struct.setHeapPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEAP_PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapPageSize = iprot.readI32();
              struct.setHeapPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HEAP_REGION_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapRegionSize = iprot.readI32();
              struct.setHeapRegionSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HEAP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapVersion = iprot.readI32();
              struct.setHeapVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THeapStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HEAP_MAGIC_FIELD_DESC);
      oprot.writeI32(struct.heapMagic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_META_FLAGS_FIELD_DESC);
      oprot.writeI32(struct.heapMetaFlags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_NUM_BLOBS_FIELD_DESC);
      oprot.writeI32(struct.heapNumBlobs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_NUM_RECS_FIELD_DESC);
      oprot.writeI32(struct.heapNumRecs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_NUM_REGIONS_FIELD_DESC);
      oprot.writeI32(struct.heapNumRegions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_PAGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.heapPageCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.heapPageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_REGION_SIZE_FIELD_DESC);
      oprot.writeI32(struct.heapRegionSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_VERSION_FIELD_DESC);
      oprot.writeI32(struct.heapVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THeapStatTupleSchemeFactory implements SchemeFactory {
    public THeapStatTupleScheme getScheme() {
      return new THeapStatTupleScheme();
    }
  }

  private static class THeapStatTupleScheme extends TupleScheme<THeapStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THeapStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHeapMagic()) {
        optionals.set(0);
      }
      if (struct.isSetHeapMetaFlags()) {
        optionals.set(1);
      }
      if (struct.isSetHeapNumBlobs()) {
        optionals.set(2);
      }
      if (struct.isSetHeapNumRecs()) {
        optionals.set(3);
      }
      if (struct.isSetHeapNumRegions()) {
        optionals.set(4);
      }
      if (struct.isSetHeapPageCount()) {
        optionals.set(5);
      }
      if (struct.isSetHeapPageSize()) {
        optionals.set(6);
      }
      if (struct.isSetHeapRegionSize()) {
        optionals.set(7);
      }
      if (struct.isSetHeapVersion()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetHeapMagic()) {
        oprot.writeI32(struct.heapMagic);
      }
      if (struct.isSetHeapMetaFlags()) {
        oprot.writeI32(struct.heapMetaFlags);
      }
      if (struct.isSetHeapNumBlobs()) {
        oprot.writeI32(struct.heapNumBlobs);
      }
      if (struct.isSetHeapNumRecs()) {
        oprot.writeI32(struct.heapNumRecs);
      }
      if (struct.isSetHeapNumRegions()) {
        oprot.writeI32(struct.heapNumRegions);
      }
      if (struct.isSetHeapPageCount()) {
        oprot.writeI32(struct.heapPageCount);
      }
      if (struct.isSetHeapPageSize()) {
        oprot.writeI32(struct.heapPageSize);
      }
      if (struct.isSetHeapRegionSize()) {
        oprot.writeI32(struct.heapRegionSize);
      }
      if (struct.isSetHeapVersion()) {
        oprot.writeI32(struct.heapVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THeapStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.heapMagic = iprot.readI32();
        struct.setHeapMagicIsSet(true);
      }
      if (incoming.get(1)) {
        struct.heapMetaFlags = iprot.readI32();
        struct.setHeapMetaFlagsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.heapNumBlobs = iprot.readI32();
        struct.setHeapNumBlobsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.heapNumRecs = iprot.readI32();
        struct.setHeapNumRecsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.heapNumRegions = iprot.readI32();
        struct.setHeapNumRegionsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.heapPageCount = iprot.readI32();
        struct.setHeapPageCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.heapPageSize = iprot.readI32();
        struct.setHeapPageSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.heapRegionSize = iprot.readI32();
        struct.setHeapRegionSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.heapVersion = iprot.readI32();
        struct.setHeapVersionIsSet(true);
      }
    }
  }

}

