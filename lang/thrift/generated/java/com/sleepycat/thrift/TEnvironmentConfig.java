/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class TEnvironmentConfig implements org.apache.thrift.TBase<TEnvironmentConfig, TEnvironmentConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TEnvironmentConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEnvironmentConfig");

  private static final org.apache.thrift.protocol.TField ALLOW_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("allowCreate", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CACHE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CACHE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheSize", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ENCRYPTION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptionKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCK_DETECT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("lockDetectMode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MULTIVERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("multiversion", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField RUN_RECOVERY_FIELD_DESC = new org.apache.thrift.protocol.TField("runRecovery", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TXN_NO_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("txnNoWait", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField TXN_SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("txnSnapshot", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField DURABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("durability", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEnvironmentConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEnvironmentConfigTupleSchemeFactory());
  }

  public boolean allowCreate; // optional
  public int cacheCount; // optional
  public long cacheSize; // optional
  public String encryptionKey; // optional
  /**
   * 
   * @see TLockDetectMode
   */
  public TLockDetectMode lockDetectMode; // optional
  public boolean multiversion; // optional
  public boolean runRecovery; // optional
  public boolean txnNoWait; // optional
  public boolean txnSnapshot; // optional
  public TDurabilityPolicy durability; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALLOW_CREATE((short)1, "allowCreate"),
    CACHE_COUNT((short)2, "cacheCount"),
    CACHE_SIZE((short)3, "cacheSize"),
    ENCRYPTION_KEY((short)4, "encryptionKey"),
    /**
     * 
     * @see TLockDetectMode
     */
    LOCK_DETECT_MODE((short)5, "lockDetectMode"),
    MULTIVERSION((short)6, "multiversion"),
    RUN_RECOVERY((short)7, "runRecovery"),
    TXN_NO_WAIT((short)8, "txnNoWait"),
    TXN_SNAPSHOT((short)9, "txnSnapshot"),
    DURABILITY((short)10, "durability");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALLOW_CREATE
          return ALLOW_CREATE;
        case 2: // CACHE_COUNT
          return CACHE_COUNT;
        case 3: // CACHE_SIZE
          return CACHE_SIZE;
        case 4: // ENCRYPTION_KEY
          return ENCRYPTION_KEY;
        case 5: // LOCK_DETECT_MODE
          return LOCK_DETECT_MODE;
        case 6: // MULTIVERSION
          return MULTIVERSION;
        case 7: // RUN_RECOVERY
          return RUN_RECOVERY;
        case 8: // TXN_NO_WAIT
          return TXN_NO_WAIT;
        case 9: // TXN_SNAPSHOT
          return TXN_SNAPSHOT;
        case 10: // DURABILITY
          return DURABILITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALLOWCREATE_ISSET_ID = 0;
  private static final int __CACHECOUNT_ISSET_ID = 1;
  private static final int __CACHESIZE_ISSET_ID = 2;
  private static final int __MULTIVERSION_ISSET_ID = 3;
  private static final int __RUNRECOVERY_ISSET_ID = 4;
  private static final int __TXNNOWAIT_ISSET_ID = 5;
  private static final int __TXNSNAPSHOT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ALLOW_CREATE,_Fields.CACHE_COUNT,_Fields.CACHE_SIZE,_Fields.ENCRYPTION_KEY,_Fields.LOCK_DETECT_MODE,_Fields.MULTIVERSION,_Fields.RUN_RECOVERY,_Fields.TXN_NO_WAIT,_Fields.TXN_SNAPSHOT,_Fields.DURABILITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALLOW_CREATE, new org.apache.thrift.meta_data.FieldMetaData("allowCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CACHE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cacheCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CACHE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cacheSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENCRYPTION_KEY, new org.apache.thrift.meta_data.FieldMetaData("encryptionKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCK_DETECT_MODE, new org.apache.thrift.meta_data.FieldMetaData("lockDetectMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLockDetectMode.class)));
    tmpMap.put(_Fields.MULTIVERSION, new org.apache.thrift.meta_data.FieldMetaData("multiversion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUN_RECOVERY, new org.apache.thrift.meta_data.FieldMetaData("runRecovery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXN_NO_WAIT, new org.apache.thrift.meta_data.FieldMetaData("txnNoWait", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXN_SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("txnSnapshot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DURABILITY, new org.apache.thrift.meta_data.FieldMetaData("durability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "TDurabilityPolicy")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEnvironmentConfig.class, metaDataMap);
  }

  public TEnvironmentConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEnvironmentConfig(TEnvironmentConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.allowCreate = other.allowCreate;
    this.cacheCount = other.cacheCount;
    this.cacheSize = other.cacheSize;
    if (other.isSetEncryptionKey()) {
      this.encryptionKey = other.encryptionKey;
    }
    if (other.isSetLockDetectMode()) {
      this.lockDetectMode = other.lockDetectMode;
    }
    this.multiversion = other.multiversion;
    this.runRecovery = other.runRecovery;
    this.txnNoWait = other.txnNoWait;
    this.txnSnapshot = other.txnSnapshot;
    if (other.isSetDurability()) {
      this.durability = other.durability;
    }
  }

  public TEnvironmentConfig deepCopy() {
    return new TEnvironmentConfig(this);
  }

  @Override
  public void clear() {
    setAllowCreateIsSet(false);
    this.allowCreate = false;
    setCacheCountIsSet(false);
    this.cacheCount = 0;
    setCacheSizeIsSet(false);
    this.cacheSize = 0;
    this.encryptionKey = null;
    this.lockDetectMode = null;
    setMultiversionIsSet(false);
    this.multiversion = false;
    setRunRecoveryIsSet(false);
    this.runRecovery = false;
    setTxnNoWaitIsSet(false);
    this.txnNoWait = false;
    setTxnSnapshotIsSet(false);
    this.txnSnapshot = false;
    this.durability = null;
  }

  public boolean isAllowCreate() {
    return this.allowCreate;
  }

  public TEnvironmentConfig setAllowCreate(boolean allowCreate) {
    this.allowCreate = allowCreate;
    setAllowCreateIsSet(true);
    return this;
  }

  public void unsetAllowCreate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID);
  }

  /** Returns true if field allowCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowCreate() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID);
  }

  public void setAllowCreateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID, value);
  }

  public int getCacheCount() {
    return this.cacheCount;
  }

  public TEnvironmentConfig setCacheCount(int cacheCount) {
    this.cacheCount = cacheCount;
    setCacheCountIsSet(true);
    return this;
  }

  public void unsetCacheCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHECOUNT_ISSET_ID);
  }

  /** Returns true if field cacheCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHECOUNT_ISSET_ID);
  }

  public void setCacheCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHECOUNT_ISSET_ID, value);
  }

  public long getCacheSize() {
    return this.cacheSize;
  }

  public TEnvironmentConfig setCacheSize(long cacheSize) {
    this.cacheSize = cacheSize;
    setCacheSizeIsSet(true);
    return this;
  }

  public void unsetCacheSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHESIZE_ISSET_ID);
  }

  /** Returns true if field cacheSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHESIZE_ISSET_ID);
  }

  public void setCacheSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHESIZE_ISSET_ID, value);
  }

  public String getEncryptionKey() {
    return this.encryptionKey;
  }

  public TEnvironmentConfig setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  public void unsetEncryptionKey() {
    this.encryptionKey = null;
  }

  /** Returns true if field encryptionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetEncryptionKey() {
    return this.encryptionKey != null;
  }

  public void setEncryptionKeyIsSet(boolean value) {
    if (!value) {
      this.encryptionKey = null;
    }
  }

  /**
   * 
   * @see TLockDetectMode
   */
  public TLockDetectMode getLockDetectMode() {
    return this.lockDetectMode;
  }

  /**
   * 
   * @see TLockDetectMode
   */
  public TEnvironmentConfig setLockDetectMode(TLockDetectMode lockDetectMode) {
    this.lockDetectMode = lockDetectMode;
    return this;
  }

  public void unsetLockDetectMode() {
    this.lockDetectMode = null;
  }

  /** Returns true if field lockDetectMode is set (has been assigned a value) and false otherwise */
  public boolean isSetLockDetectMode() {
    return this.lockDetectMode != null;
  }

  public void setLockDetectModeIsSet(boolean value) {
    if (!value) {
      this.lockDetectMode = null;
    }
  }

  public boolean isMultiversion() {
    return this.multiversion;
  }

  public TEnvironmentConfig setMultiversion(boolean multiversion) {
    this.multiversion = multiversion;
    setMultiversionIsSet(true);
    return this;
  }

  public void unsetMultiversion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIVERSION_ISSET_ID);
  }

  /** Returns true if field multiversion is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiversion() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIVERSION_ISSET_ID);
  }

  public void setMultiversionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIVERSION_ISSET_ID, value);
  }

  public boolean isRunRecovery() {
    return this.runRecovery;
  }

  public TEnvironmentConfig setRunRecovery(boolean runRecovery) {
    this.runRecovery = runRecovery;
    setRunRecoveryIsSet(true);
    return this;
  }

  public void unsetRunRecovery() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNRECOVERY_ISSET_ID);
  }

  /** Returns true if field runRecovery is set (has been assigned a value) and false otherwise */
  public boolean isSetRunRecovery() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNRECOVERY_ISSET_ID);
  }

  public void setRunRecoveryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNRECOVERY_ISSET_ID, value);
  }

  public boolean isTxnNoWait() {
    return this.txnNoWait;
  }

  public TEnvironmentConfig setTxnNoWait(boolean txnNoWait) {
    this.txnNoWait = txnNoWait;
    setTxnNoWaitIsSet(true);
    return this;
  }

  public void unsetTxnNoWait() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXNNOWAIT_ISSET_ID);
  }

  /** Returns true if field txnNoWait is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnNoWait() {
    return EncodingUtils.testBit(__isset_bitfield, __TXNNOWAIT_ISSET_ID);
  }

  public void setTxnNoWaitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXNNOWAIT_ISSET_ID, value);
  }

  public boolean isTxnSnapshot() {
    return this.txnSnapshot;
  }

  public TEnvironmentConfig setTxnSnapshot(boolean txnSnapshot) {
    this.txnSnapshot = txnSnapshot;
    setTxnSnapshotIsSet(true);
    return this;
  }

  public void unsetTxnSnapshot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXNSNAPSHOT_ISSET_ID);
  }

  /** Returns true if field txnSnapshot is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnSnapshot() {
    return EncodingUtils.testBit(__isset_bitfield, __TXNSNAPSHOT_ISSET_ID);
  }

  public void setTxnSnapshotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXNSNAPSHOT_ISSET_ID, value);
  }

  public TDurabilityPolicy getDurability() {
    return this.durability;
  }

  public TEnvironmentConfig setDurability(TDurabilityPolicy durability) {
    this.durability = durability;
    return this;
  }

  public void unsetDurability() {
    this.durability = null;
  }

  /** Returns true if field durability is set (has been assigned a value) and false otherwise */
  public boolean isSetDurability() {
    return this.durability != null;
  }

  public void setDurabilityIsSet(boolean value) {
    if (!value) {
      this.durability = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALLOW_CREATE:
      if (value == null) {
        unsetAllowCreate();
      } else {
        setAllowCreate((Boolean)value);
      }
      break;

    case CACHE_COUNT:
      if (value == null) {
        unsetCacheCount();
      } else {
        setCacheCount((Integer)value);
      }
      break;

    case CACHE_SIZE:
      if (value == null) {
        unsetCacheSize();
      } else {
        setCacheSize((Long)value);
      }
      break;

    case ENCRYPTION_KEY:
      if (value == null) {
        unsetEncryptionKey();
      } else {
        setEncryptionKey((String)value);
      }
      break;

    case LOCK_DETECT_MODE:
      if (value == null) {
        unsetLockDetectMode();
      } else {
        setLockDetectMode((TLockDetectMode)value);
      }
      break;

    case MULTIVERSION:
      if (value == null) {
        unsetMultiversion();
      } else {
        setMultiversion((Boolean)value);
      }
      break;

    case RUN_RECOVERY:
      if (value == null) {
        unsetRunRecovery();
      } else {
        setRunRecovery((Boolean)value);
      }
      break;

    case TXN_NO_WAIT:
      if (value == null) {
        unsetTxnNoWait();
      } else {
        setTxnNoWait((Boolean)value);
      }
      break;

    case TXN_SNAPSHOT:
      if (value == null) {
        unsetTxnSnapshot();
      } else {
        setTxnSnapshot((Boolean)value);
      }
      break;

    case DURABILITY:
      if (value == null) {
        unsetDurability();
      } else {
        setDurability((TDurabilityPolicy)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALLOW_CREATE:
      return Boolean.valueOf(isAllowCreate());

    case CACHE_COUNT:
      return Integer.valueOf(getCacheCount());

    case CACHE_SIZE:
      return Long.valueOf(getCacheSize());

    case ENCRYPTION_KEY:
      return getEncryptionKey();

    case LOCK_DETECT_MODE:
      return getLockDetectMode();

    case MULTIVERSION:
      return Boolean.valueOf(isMultiversion());

    case RUN_RECOVERY:
      return Boolean.valueOf(isRunRecovery());

    case TXN_NO_WAIT:
      return Boolean.valueOf(isTxnNoWait());

    case TXN_SNAPSHOT:
      return Boolean.valueOf(isTxnSnapshot());

    case DURABILITY:
      return getDurability();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALLOW_CREATE:
      return isSetAllowCreate();
    case CACHE_COUNT:
      return isSetCacheCount();
    case CACHE_SIZE:
      return isSetCacheSize();
    case ENCRYPTION_KEY:
      return isSetEncryptionKey();
    case LOCK_DETECT_MODE:
      return isSetLockDetectMode();
    case MULTIVERSION:
      return isSetMultiversion();
    case RUN_RECOVERY:
      return isSetRunRecovery();
    case TXN_NO_WAIT:
      return isSetTxnNoWait();
    case TXN_SNAPSHOT:
      return isSetTxnSnapshot();
    case DURABILITY:
      return isSetDurability();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEnvironmentConfig)
      return this.equals((TEnvironmentConfig)that);
    return false;
  }

  public boolean equals(TEnvironmentConfig that) {
    if (that == null)
      return false;

    boolean this_present_allowCreate = true && this.isSetAllowCreate();
    boolean that_present_allowCreate = true && that.isSetAllowCreate();
    if (this_present_allowCreate || that_present_allowCreate) {
      if (!(this_present_allowCreate && that_present_allowCreate))
        return false;
      if (this.allowCreate != that.allowCreate)
        return false;
    }

    boolean this_present_cacheCount = true && this.isSetCacheCount();
    boolean that_present_cacheCount = true && that.isSetCacheCount();
    if (this_present_cacheCount || that_present_cacheCount) {
      if (!(this_present_cacheCount && that_present_cacheCount))
        return false;
      if (this.cacheCount != that.cacheCount)
        return false;
    }

    boolean this_present_cacheSize = true && this.isSetCacheSize();
    boolean that_present_cacheSize = true && that.isSetCacheSize();
    if (this_present_cacheSize || that_present_cacheSize) {
      if (!(this_present_cacheSize && that_present_cacheSize))
        return false;
      if (this.cacheSize != that.cacheSize)
        return false;
    }

    boolean this_present_encryptionKey = true && this.isSetEncryptionKey();
    boolean that_present_encryptionKey = true && that.isSetEncryptionKey();
    if (this_present_encryptionKey || that_present_encryptionKey) {
      if (!(this_present_encryptionKey && that_present_encryptionKey))
        return false;
      if (!this.encryptionKey.equals(that.encryptionKey))
        return false;
    }

    boolean this_present_lockDetectMode = true && this.isSetLockDetectMode();
    boolean that_present_lockDetectMode = true && that.isSetLockDetectMode();
    if (this_present_lockDetectMode || that_present_lockDetectMode) {
      if (!(this_present_lockDetectMode && that_present_lockDetectMode))
        return false;
      if (!this.lockDetectMode.equals(that.lockDetectMode))
        return false;
    }

    boolean this_present_multiversion = true && this.isSetMultiversion();
    boolean that_present_multiversion = true && that.isSetMultiversion();
    if (this_present_multiversion || that_present_multiversion) {
      if (!(this_present_multiversion && that_present_multiversion))
        return false;
      if (this.multiversion != that.multiversion)
        return false;
    }

    boolean this_present_runRecovery = true && this.isSetRunRecovery();
    boolean that_present_runRecovery = true && that.isSetRunRecovery();
    if (this_present_runRecovery || that_present_runRecovery) {
      if (!(this_present_runRecovery && that_present_runRecovery))
        return false;
      if (this.runRecovery != that.runRecovery)
        return false;
    }

    boolean this_present_txnNoWait = true && this.isSetTxnNoWait();
    boolean that_present_txnNoWait = true && that.isSetTxnNoWait();
    if (this_present_txnNoWait || that_present_txnNoWait) {
      if (!(this_present_txnNoWait && that_present_txnNoWait))
        return false;
      if (this.txnNoWait != that.txnNoWait)
        return false;
    }

    boolean this_present_txnSnapshot = true && this.isSetTxnSnapshot();
    boolean that_present_txnSnapshot = true && that.isSetTxnSnapshot();
    if (this_present_txnSnapshot || that_present_txnSnapshot) {
      if (!(this_present_txnSnapshot && that_present_txnSnapshot))
        return false;
      if (this.txnSnapshot != that.txnSnapshot)
        return false;
    }

    boolean this_present_durability = true && this.isSetDurability();
    boolean that_present_durability = true && that.isSetDurability();
    if (this_present_durability || that_present_durability) {
      if (!(this_present_durability && that_present_durability))
        return false;
      if (!this.durability.equals(that.durability))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_allowCreate = true && (isSetAllowCreate());
    list.add(present_allowCreate);
    if (present_allowCreate)
      list.add(allowCreate);

    boolean present_cacheCount = true && (isSetCacheCount());
    list.add(present_cacheCount);
    if (present_cacheCount)
      list.add(cacheCount);

    boolean present_cacheSize = true && (isSetCacheSize());
    list.add(present_cacheSize);
    if (present_cacheSize)
      list.add(cacheSize);

    boolean present_encryptionKey = true && (isSetEncryptionKey());
    list.add(present_encryptionKey);
    if (present_encryptionKey)
      list.add(encryptionKey);

    boolean present_lockDetectMode = true && (isSetLockDetectMode());
    list.add(present_lockDetectMode);
    if (present_lockDetectMode)
      list.add(lockDetectMode.getValue());

    boolean present_multiversion = true && (isSetMultiversion());
    list.add(present_multiversion);
    if (present_multiversion)
      list.add(multiversion);

    boolean present_runRecovery = true && (isSetRunRecovery());
    list.add(present_runRecovery);
    if (present_runRecovery)
      list.add(runRecovery);

    boolean present_txnNoWait = true && (isSetTxnNoWait());
    list.add(present_txnNoWait);
    if (present_txnNoWait)
      list.add(txnNoWait);

    boolean present_txnSnapshot = true && (isSetTxnSnapshot());
    list.add(present_txnSnapshot);
    if (present_txnSnapshot)
      list.add(txnSnapshot);

    boolean present_durability = true && (isSetDurability());
    list.add(present_durability);
    if (present_durability)
      list.add(durability.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TEnvironmentConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAllowCreate()).compareTo(other.isSetAllowCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowCreate, other.allowCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheCount()).compareTo(other.isSetCacheCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheCount, other.cacheCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheSize()).compareTo(other.isSetCacheSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheSize, other.cacheSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncryptionKey()).compareTo(other.isSetEncryptionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncryptionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptionKey, other.encryptionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockDetectMode()).compareTo(other.isSetLockDetectMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockDetectMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockDetectMode, other.lockDetectMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiversion()).compareTo(other.isSetMultiversion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiversion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiversion, other.multiversion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunRecovery()).compareTo(other.isSetRunRecovery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunRecovery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runRecovery, other.runRecovery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxnNoWait()).compareTo(other.isSetTxnNoWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnNoWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnNoWait, other.txnNoWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxnSnapshot()).compareTo(other.isSetTxnSnapshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnSnapshot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnSnapshot, other.txnSnapshot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(other.isSetDurability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, other.durability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEnvironmentConfig(");
    boolean first = true;

    if (isSetAllowCreate()) {
      sb.append("allowCreate:");
      sb.append(this.allowCreate);
      first = false;
    }
    if (isSetCacheCount()) {
      if (!first) sb.append(", ");
      sb.append("cacheCount:");
      sb.append(this.cacheCount);
      first = false;
    }
    if (isSetCacheSize()) {
      if (!first) sb.append(", ");
      sb.append("cacheSize:");
      sb.append(this.cacheSize);
      first = false;
    }
    if (isSetEncryptionKey()) {
      if (!first) sb.append(", ");
      sb.append("encryptionKey:");
      if (this.encryptionKey == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptionKey);
      }
      first = false;
    }
    if (isSetLockDetectMode()) {
      if (!first) sb.append(", ");
      sb.append("lockDetectMode:");
      if (this.lockDetectMode == null) {
        sb.append("null");
      } else {
        sb.append(this.lockDetectMode);
      }
      first = false;
    }
    if (isSetMultiversion()) {
      if (!first) sb.append(", ");
      sb.append("multiversion:");
      sb.append(this.multiversion);
      first = false;
    }
    if (isSetRunRecovery()) {
      if (!first) sb.append(", ");
      sb.append("runRecovery:");
      sb.append(this.runRecovery);
      first = false;
    }
    if (isSetTxnNoWait()) {
      if (!first) sb.append(", ");
      sb.append("txnNoWait:");
      sb.append(this.txnNoWait);
      first = false;
    }
    if (isSetTxnSnapshot()) {
      if (!first) sb.append(", ");
      sb.append("txnSnapshot:");
      sb.append(this.txnSnapshot);
      first = false;
    }
    if (isSetDurability()) {
      if (!first) sb.append(", ");
      sb.append("durability:");
      if (this.durability == null) {
        sb.append("null");
      } else {
        sb.append(this.durability);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEnvironmentConfigStandardSchemeFactory implements SchemeFactory {
    public TEnvironmentConfigStandardScheme getScheme() {
      return new TEnvironmentConfigStandardScheme();
    }
  }

  private static class TEnvironmentConfigStandardScheme extends StandardScheme<TEnvironmentConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEnvironmentConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALLOW_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowCreate = iprot.readBool();
              struct.setAllowCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CACHE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cacheCount = iprot.readI32();
              struct.setCacheCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CACHE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheSize = iprot.readI64();
              struct.setCacheSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENCRYPTION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encryptionKey = iprot.readString();
              struct.setEncryptionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCK_DETECT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lockDetectMode = com.sleepycat.thrift.TLockDetectMode.findByValue(iprot.readI32());
              struct.setLockDetectModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MULTIVERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.multiversion = iprot.readBool();
              struct.setMultiversionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RUN_RECOVERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.runRecovery = iprot.readBool();
              struct.setRunRecoveryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TXN_NO_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.txnNoWait = iprot.readBool();
              struct.setTxnNoWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TXN_SNAPSHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.txnSnapshot = iprot.readBool();
              struct.setTxnSnapshotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DURABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.durability = com.sleepycat.thrift.TDurabilityPolicy.findByValue(iprot.readI32());
              struct.setDurabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEnvironmentConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAllowCreate()) {
        oprot.writeFieldBegin(ALLOW_CREATE_FIELD_DESC);
        oprot.writeBool(struct.allowCreate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCacheCount()) {
        oprot.writeFieldBegin(CACHE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.cacheCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCacheSize()) {
        oprot.writeFieldBegin(CACHE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.cacheSize);
        oprot.writeFieldEnd();
      }
      if (struct.encryptionKey != null) {
        if (struct.isSetEncryptionKey()) {
          oprot.writeFieldBegin(ENCRYPTION_KEY_FIELD_DESC);
          oprot.writeString(struct.encryptionKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lockDetectMode != null) {
        if (struct.isSetLockDetectMode()) {
          oprot.writeFieldBegin(LOCK_DETECT_MODE_FIELD_DESC);
          oprot.writeI32(struct.lockDetectMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMultiversion()) {
        oprot.writeFieldBegin(MULTIVERSION_FIELD_DESC);
        oprot.writeBool(struct.multiversion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRunRecovery()) {
        oprot.writeFieldBegin(RUN_RECOVERY_FIELD_DESC);
        oprot.writeBool(struct.runRecovery);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTxnNoWait()) {
        oprot.writeFieldBegin(TXN_NO_WAIT_FIELD_DESC);
        oprot.writeBool(struct.txnNoWait);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTxnSnapshot()) {
        oprot.writeFieldBegin(TXN_SNAPSHOT_FIELD_DESC);
        oprot.writeBool(struct.txnSnapshot);
        oprot.writeFieldEnd();
      }
      if (struct.durability != null) {
        if (struct.isSetDurability()) {
          oprot.writeFieldBegin(DURABILITY_FIELD_DESC);
          oprot.writeI32(struct.durability.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEnvironmentConfigTupleSchemeFactory implements SchemeFactory {
    public TEnvironmentConfigTupleScheme getScheme() {
      return new TEnvironmentConfigTupleScheme();
    }
  }

  private static class TEnvironmentConfigTupleScheme extends TupleScheme<TEnvironmentConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEnvironmentConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAllowCreate()) {
        optionals.set(0);
      }
      if (struct.isSetCacheCount()) {
        optionals.set(1);
      }
      if (struct.isSetCacheSize()) {
        optionals.set(2);
      }
      if (struct.isSetEncryptionKey()) {
        optionals.set(3);
      }
      if (struct.isSetLockDetectMode()) {
        optionals.set(4);
      }
      if (struct.isSetMultiversion()) {
        optionals.set(5);
      }
      if (struct.isSetRunRecovery()) {
        optionals.set(6);
      }
      if (struct.isSetTxnNoWait()) {
        optionals.set(7);
      }
      if (struct.isSetTxnSnapshot()) {
        optionals.set(8);
      }
      if (struct.isSetDurability()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetAllowCreate()) {
        oprot.writeBool(struct.allowCreate);
      }
      if (struct.isSetCacheCount()) {
        oprot.writeI32(struct.cacheCount);
      }
      if (struct.isSetCacheSize()) {
        oprot.writeI64(struct.cacheSize);
      }
      if (struct.isSetEncryptionKey()) {
        oprot.writeString(struct.encryptionKey);
      }
      if (struct.isSetLockDetectMode()) {
        oprot.writeI32(struct.lockDetectMode.getValue());
      }
      if (struct.isSetMultiversion()) {
        oprot.writeBool(struct.multiversion);
      }
      if (struct.isSetRunRecovery()) {
        oprot.writeBool(struct.runRecovery);
      }
      if (struct.isSetTxnNoWait()) {
        oprot.writeBool(struct.txnNoWait);
      }
      if (struct.isSetTxnSnapshot()) {
        oprot.writeBool(struct.txnSnapshot);
      }
      if (struct.isSetDurability()) {
        oprot.writeI32(struct.durability.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEnvironmentConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.allowCreate = iprot.readBool();
        struct.setAllowCreateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cacheCount = iprot.readI32();
        struct.setCacheCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cacheSize = iprot.readI64();
        struct.setCacheSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.encryptionKey = iprot.readString();
        struct.setEncryptionKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lockDetectMode = com.sleepycat.thrift.TLockDetectMode.findByValue(iprot.readI32());
        struct.setLockDetectModeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.multiversion = iprot.readBool();
        struct.setMultiversionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.runRecovery = iprot.readBool();
        struct.setRunRecoveryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.txnNoWait = iprot.readBool();
        struct.setTxnNoWaitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.txnSnapshot = iprot.readBool();
        struct.setTxnSnapshotIsSet(true);
      }
      if (incoming.get(9)) {
        struct.durability = com.sleepycat.thrift.TDurabilityPolicy.findByValue(iprot.readI32());
        struct.setDurabilityIsSet(true);
      }
    }
  }

}

