/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class THashStat implements org.apache.thrift.TBase<THashStat, THashStat._Fields>, java.io.Serializable, Cloneable, Comparable<THashStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THashStat");

  private static final org.apache.thrift.protocol.TField BFREE_FIELD_DESC = new org.apache.thrift.protocol.TField("BFree", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BIG_BFREE_FIELD_DESC = new org.apache.thrift.protocol.TField("bigBFree", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BIG_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("bigPages", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BUCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("buckets", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DUP_FIELD_DESC = new org.apache.thrift.protocol.TField("dup", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DUP_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("dupFree", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FFACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("ffactor", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("free", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MAGIC_FIELD_DESC = new org.apache.thrift.protocol.TField("magic", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField META_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("metaFlags", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NUM_BLOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("numBlobs", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField NUM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("numData", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NUM_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("numKeys", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField OVERFLOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("overflows", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField OVFL_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("ovflFree", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THashStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THashStatTupleSchemeFactory());
  }

  public long BFree; // required
  public long bigBFree; // required
  public int bigPages; // required
  public int buckets; // required
  public int dup; // required
  public long dupFree; // required
  public int ffactor; // required
  public int free; // required
  public int magic; // required
  public int metaFlags; // required
  public int numBlobs; // required
  public int numData; // required
  public int numKeys; // required
  public int overflows; // required
  public long ovflFree; // required
  public int pageCount; // required
  public int pageSize; // required
  public int version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BFREE((short)1, "BFree"),
    BIG_BFREE((short)2, "bigBFree"),
    BIG_PAGES((short)3, "bigPages"),
    BUCKETS((short)4, "buckets"),
    DUP((short)5, "dup"),
    DUP_FREE((short)6, "dupFree"),
    FFACTOR((short)7, "ffactor"),
    FREE((short)8, "free"),
    MAGIC((short)9, "magic"),
    META_FLAGS((short)10, "metaFlags"),
    NUM_BLOBS((short)11, "numBlobs"),
    NUM_DATA((short)12, "numData"),
    NUM_KEYS((short)13, "numKeys"),
    OVERFLOWS((short)14, "overflows"),
    OVFL_FREE((short)15, "ovflFree"),
    PAGE_COUNT((short)16, "pageCount"),
    PAGE_SIZE((short)17, "pageSize"),
    VERSION((short)18, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BFREE
          return BFREE;
        case 2: // BIG_BFREE
          return BIG_BFREE;
        case 3: // BIG_PAGES
          return BIG_PAGES;
        case 4: // BUCKETS
          return BUCKETS;
        case 5: // DUP
          return DUP;
        case 6: // DUP_FREE
          return DUP_FREE;
        case 7: // FFACTOR
          return FFACTOR;
        case 8: // FREE
          return FREE;
        case 9: // MAGIC
          return MAGIC;
        case 10: // META_FLAGS
          return META_FLAGS;
        case 11: // NUM_BLOBS
          return NUM_BLOBS;
        case 12: // NUM_DATA
          return NUM_DATA;
        case 13: // NUM_KEYS
          return NUM_KEYS;
        case 14: // OVERFLOWS
          return OVERFLOWS;
        case 15: // OVFL_FREE
          return OVFL_FREE;
        case 16: // PAGE_COUNT
          return PAGE_COUNT;
        case 17: // PAGE_SIZE
          return PAGE_SIZE;
        case 18: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BFREE_ISSET_ID = 0;
  private static final int __BIGBFREE_ISSET_ID = 1;
  private static final int __BIGPAGES_ISSET_ID = 2;
  private static final int __BUCKETS_ISSET_ID = 3;
  private static final int __DUP_ISSET_ID = 4;
  private static final int __DUPFREE_ISSET_ID = 5;
  private static final int __FFACTOR_ISSET_ID = 6;
  private static final int __FREE_ISSET_ID = 7;
  private static final int __MAGIC_ISSET_ID = 8;
  private static final int __METAFLAGS_ISSET_ID = 9;
  private static final int __NUMBLOBS_ISSET_ID = 10;
  private static final int __NUMDATA_ISSET_ID = 11;
  private static final int __NUMKEYS_ISSET_ID = 12;
  private static final int __OVERFLOWS_ISSET_ID = 13;
  private static final int __OVFLFREE_ISSET_ID = 14;
  private static final int __PAGECOUNT_ISSET_ID = 15;
  private static final int __PAGESIZE_ISSET_ID = 16;
  private static final int __VERSION_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BFREE, new org.apache.thrift.meta_data.FieldMetaData("BFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_BFREE, new org.apache.thrift.meta_data.FieldMetaData("bigBFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_PAGES, new org.apache.thrift.meta_data.FieldMetaData("bigPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUCKETS, new org.apache.thrift.meta_data.FieldMetaData("buckets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUP, new org.apache.thrift.meta_data.FieldMetaData("dup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUP_FREE, new org.apache.thrift.meta_data.FieldMetaData("dupFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FFACTOR, new org.apache.thrift.meta_data.FieldMetaData("ffactor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREE, new org.apache.thrift.meta_data.FieldMetaData("free", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAGIC, new org.apache.thrift.meta_data.FieldMetaData("magic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.META_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("metaFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_BLOBS, new org.apache.thrift.meta_data.FieldMetaData("numBlobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_DATA, new org.apache.thrift.meta_data.FieldMetaData("numData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_KEYS, new org.apache.thrift.meta_data.FieldMetaData("numKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERFLOWS, new org.apache.thrift.meta_data.FieldMetaData("overflows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVFL_FREE, new org.apache.thrift.meta_data.FieldMetaData("ovflFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THashStat.class, metaDataMap);
  }

  public THashStat() {
  }

  public THashStat(
    long BFree,
    long bigBFree,
    int bigPages,
    int buckets,
    int dup,
    long dupFree,
    int ffactor,
    int free,
    int magic,
    int metaFlags,
    int numBlobs,
    int numData,
    int numKeys,
    int overflows,
    long ovflFree,
    int pageCount,
    int pageSize,
    int version)
  {
    this();
    this.BFree = BFree;
    setBFreeIsSet(true);
    this.bigBFree = bigBFree;
    setBigBFreeIsSet(true);
    this.bigPages = bigPages;
    setBigPagesIsSet(true);
    this.buckets = buckets;
    setBucketsIsSet(true);
    this.dup = dup;
    setDupIsSet(true);
    this.dupFree = dupFree;
    setDupFreeIsSet(true);
    this.ffactor = ffactor;
    setFfactorIsSet(true);
    this.free = free;
    setFreeIsSet(true);
    this.magic = magic;
    setMagicIsSet(true);
    this.metaFlags = metaFlags;
    setMetaFlagsIsSet(true);
    this.numBlobs = numBlobs;
    setNumBlobsIsSet(true);
    this.numData = numData;
    setNumDataIsSet(true);
    this.numKeys = numKeys;
    setNumKeysIsSet(true);
    this.overflows = overflows;
    setOverflowsIsSet(true);
    this.ovflFree = ovflFree;
    setOvflFreeIsSet(true);
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THashStat(THashStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.BFree = other.BFree;
    this.bigBFree = other.bigBFree;
    this.bigPages = other.bigPages;
    this.buckets = other.buckets;
    this.dup = other.dup;
    this.dupFree = other.dupFree;
    this.ffactor = other.ffactor;
    this.free = other.free;
    this.magic = other.magic;
    this.metaFlags = other.metaFlags;
    this.numBlobs = other.numBlobs;
    this.numData = other.numData;
    this.numKeys = other.numKeys;
    this.overflows = other.overflows;
    this.ovflFree = other.ovflFree;
    this.pageCount = other.pageCount;
    this.pageSize = other.pageSize;
    this.version = other.version;
  }

  public THashStat deepCopy() {
    return new THashStat(this);
  }

  @Override
  public void clear() {
    setBFreeIsSet(false);
    this.BFree = 0;
    setBigBFreeIsSet(false);
    this.bigBFree = 0;
    setBigPagesIsSet(false);
    this.bigPages = 0;
    setBucketsIsSet(false);
    this.buckets = 0;
    setDupIsSet(false);
    this.dup = 0;
    setDupFreeIsSet(false);
    this.dupFree = 0;
    setFfactorIsSet(false);
    this.ffactor = 0;
    setFreeIsSet(false);
    this.free = 0;
    setMagicIsSet(false);
    this.magic = 0;
    setMetaFlagsIsSet(false);
    this.metaFlags = 0;
    setNumBlobsIsSet(false);
    this.numBlobs = 0;
    setNumDataIsSet(false);
    this.numData = 0;
    setNumKeysIsSet(false);
    this.numKeys = 0;
    setOverflowsIsSet(false);
    this.overflows = 0;
    setOvflFreeIsSet(false);
    this.ovflFree = 0;
    setPageCountIsSet(false);
    this.pageCount = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setVersionIsSet(false);
    this.version = 0;
  }

  public long getBFree() {
    return this.BFree;
  }

  public THashStat setBFree(long BFree) {
    this.BFree = BFree;
    setBFreeIsSet(true);
    return this;
  }

  public void unsetBFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFREE_ISSET_ID);
  }

  /** Returns true if field BFree is set (has been assigned a value) and false otherwise */
  public boolean isSetBFree() {
    return EncodingUtils.testBit(__isset_bitfield, __BFREE_ISSET_ID);
  }

  public void setBFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFREE_ISSET_ID, value);
  }

  public long getBigBFree() {
    return this.bigBFree;
  }

  public THashStat setBigBFree(long bigBFree) {
    this.bigBFree = bigBFree;
    setBigBFreeIsSet(true);
    return this;
  }

  public void unsetBigBFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIGBFREE_ISSET_ID);
  }

  /** Returns true if field bigBFree is set (has been assigned a value) and false otherwise */
  public boolean isSetBigBFree() {
    return EncodingUtils.testBit(__isset_bitfield, __BIGBFREE_ISSET_ID);
  }

  public void setBigBFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIGBFREE_ISSET_ID, value);
  }

  public int getBigPages() {
    return this.bigPages;
  }

  public THashStat setBigPages(int bigPages) {
    this.bigPages = bigPages;
    setBigPagesIsSet(true);
    return this;
  }

  public void unsetBigPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIGPAGES_ISSET_ID);
  }

  /** Returns true if field bigPages is set (has been assigned a value) and false otherwise */
  public boolean isSetBigPages() {
    return EncodingUtils.testBit(__isset_bitfield, __BIGPAGES_ISSET_ID);
  }

  public void setBigPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIGPAGES_ISSET_ID, value);
  }

  public int getBuckets() {
    return this.buckets;
  }

  public THashStat setBuckets(int buckets) {
    this.buckets = buckets;
    setBucketsIsSet(true);
    return this;
  }

  public void unsetBuckets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUCKETS_ISSET_ID);
  }

  /** Returns true if field buckets is set (has been assigned a value) and false otherwise */
  public boolean isSetBuckets() {
    return EncodingUtils.testBit(__isset_bitfield, __BUCKETS_ISSET_ID);
  }

  public void setBucketsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUCKETS_ISSET_ID, value);
  }

  public int getDup() {
    return this.dup;
  }

  public THashStat setDup(int dup) {
    this.dup = dup;
    setDupIsSet(true);
    return this;
  }

  public void unsetDup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUP_ISSET_ID);
  }

  /** Returns true if field dup is set (has been assigned a value) and false otherwise */
  public boolean isSetDup() {
    return EncodingUtils.testBit(__isset_bitfield, __DUP_ISSET_ID);
  }

  public void setDupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUP_ISSET_ID, value);
  }

  public long getDupFree() {
    return this.dupFree;
  }

  public THashStat setDupFree(long dupFree) {
    this.dupFree = dupFree;
    setDupFreeIsSet(true);
    return this;
  }

  public void unsetDupFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUPFREE_ISSET_ID);
  }

  /** Returns true if field dupFree is set (has been assigned a value) and false otherwise */
  public boolean isSetDupFree() {
    return EncodingUtils.testBit(__isset_bitfield, __DUPFREE_ISSET_ID);
  }

  public void setDupFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUPFREE_ISSET_ID, value);
  }

  public int getFfactor() {
    return this.ffactor;
  }

  public THashStat setFfactor(int ffactor) {
    this.ffactor = ffactor;
    setFfactorIsSet(true);
    return this;
  }

  public void unsetFfactor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFACTOR_ISSET_ID);
  }

  /** Returns true if field ffactor is set (has been assigned a value) and false otherwise */
  public boolean isSetFfactor() {
    return EncodingUtils.testBit(__isset_bitfield, __FFACTOR_ISSET_ID);
  }

  public void setFfactorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFACTOR_ISSET_ID, value);
  }

  public int getFree() {
    return this.free;
  }

  public THashStat setFree(int free) {
    this.free = free;
    setFreeIsSet(true);
    return this;
  }

  public void unsetFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  /** Returns true if field free is set (has been assigned a value) and false otherwise */
  public boolean isSetFree() {
    return EncodingUtils.testBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  public void setFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREE_ISSET_ID, value);
  }

  public int getMagic() {
    return this.magic;
  }

  public THashStat setMagic(int magic) {
    this.magic = magic;
    setMagicIsSet(true);
    return this;
  }

  public void unsetMagic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAGIC_ISSET_ID);
  }

  /** Returns true if field magic is set (has been assigned a value) and false otherwise */
  public boolean isSetMagic() {
    return EncodingUtils.testBit(__isset_bitfield, __MAGIC_ISSET_ID);
  }

  public void setMagicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAGIC_ISSET_ID, value);
  }

  public int getMetaFlags() {
    return this.metaFlags;
  }

  public THashStat setMetaFlags(int metaFlags) {
    this.metaFlags = metaFlags;
    setMetaFlagsIsSet(true);
    return this;
  }

  public void unsetMetaFlags() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METAFLAGS_ISSET_ID);
  }

  /** Returns true if field metaFlags is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaFlags() {
    return EncodingUtils.testBit(__isset_bitfield, __METAFLAGS_ISSET_ID);
  }

  public void setMetaFlagsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METAFLAGS_ISSET_ID, value);
  }

  public int getNumBlobs() {
    return this.numBlobs;
  }

  public THashStat setNumBlobs(int numBlobs) {
    this.numBlobs = numBlobs;
    setNumBlobsIsSet(true);
    return this;
  }

  public void unsetNumBlobs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBLOBS_ISSET_ID);
  }

  /** Returns true if field numBlobs is set (has been assigned a value) and false otherwise */
  public boolean isSetNumBlobs() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBLOBS_ISSET_ID);
  }

  public void setNumBlobsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBLOBS_ISSET_ID, value);
  }

  public int getNumData() {
    return this.numData;
  }

  public THashStat setNumData(int numData) {
    this.numData = numData;
    setNumDataIsSet(true);
    return this;
  }

  public void unsetNumData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMDATA_ISSET_ID);
  }

  /** Returns true if field numData is set (has been assigned a value) and false otherwise */
  public boolean isSetNumData() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMDATA_ISSET_ID);
  }

  public void setNumDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMDATA_ISSET_ID, value);
  }

  public int getNumKeys() {
    return this.numKeys;
  }

  public THashStat setNumKeys(int numKeys) {
    this.numKeys = numKeys;
    setNumKeysIsSet(true);
    return this;
  }

  public void unsetNumKeys() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMKEYS_ISSET_ID);
  }

  /** Returns true if field numKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetNumKeys() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMKEYS_ISSET_ID);
  }

  public void setNumKeysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMKEYS_ISSET_ID, value);
  }

  public int getOverflows() {
    return this.overflows;
  }

  public THashStat setOverflows(int overflows) {
    this.overflows = overflows;
    setOverflowsIsSet(true);
    return this;
  }

  public void unsetOverflows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERFLOWS_ISSET_ID);
  }

  /** Returns true if field overflows is set (has been assigned a value) and false otherwise */
  public boolean isSetOverflows() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERFLOWS_ISSET_ID);
  }

  public void setOverflowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERFLOWS_ISSET_ID, value);
  }

  public long getOvflFree() {
    return this.ovflFree;
  }

  public THashStat setOvflFree(long ovflFree) {
    this.ovflFree = ovflFree;
    setOvflFreeIsSet(true);
    return this;
  }

  public void unsetOvflFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVFLFREE_ISSET_ID);
  }

  /** Returns true if field ovflFree is set (has been assigned a value) and false otherwise */
  public boolean isSetOvflFree() {
    return EncodingUtils.testBit(__isset_bitfield, __OVFLFREE_ISSET_ID);
  }

  public void setOvflFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVFLFREE_ISSET_ID, value);
  }

  public int getPageCount() {
    return this.pageCount;
  }

  public THashStat setPageCount(int pageCount) {
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    return this;
  }

  public void unsetPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  public void setPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public THashStat setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public THashStat setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BFREE:
      if (value == null) {
        unsetBFree();
      } else {
        setBFree((Long)value);
      }
      break;

    case BIG_BFREE:
      if (value == null) {
        unsetBigBFree();
      } else {
        setBigBFree((Long)value);
      }
      break;

    case BIG_PAGES:
      if (value == null) {
        unsetBigPages();
      } else {
        setBigPages((Integer)value);
      }
      break;

    case BUCKETS:
      if (value == null) {
        unsetBuckets();
      } else {
        setBuckets((Integer)value);
      }
      break;

    case DUP:
      if (value == null) {
        unsetDup();
      } else {
        setDup((Integer)value);
      }
      break;

    case DUP_FREE:
      if (value == null) {
        unsetDupFree();
      } else {
        setDupFree((Long)value);
      }
      break;

    case FFACTOR:
      if (value == null) {
        unsetFfactor();
      } else {
        setFfactor((Integer)value);
      }
      break;

    case FREE:
      if (value == null) {
        unsetFree();
      } else {
        setFree((Integer)value);
      }
      break;

    case MAGIC:
      if (value == null) {
        unsetMagic();
      } else {
        setMagic((Integer)value);
      }
      break;

    case META_FLAGS:
      if (value == null) {
        unsetMetaFlags();
      } else {
        setMetaFlags((Integer)value);
      }
      break;

    case NUM_BLOBS:
      if (value == null) {
        unsetNumBlobs();
      } else {
        setNumBlobs((Integer)value);
      }
      break;

    case NUM_DATA:
      if (value == null) {
        unsetNumData();
      } else {
        setNumData((Integer)value);
      }
      break;

    case NUM_KEYS:
      if (value == null) {
        unsetNumKeys();
      } else {
        setNumKeys((Integer)value);
      }
      break;

    case OVERFLOWS:
      if (value == null) {
        unsetOverflows();
      } else {
        setOverflows((Integer)value);
      }
      break;

    case OVFL_FREE:
      if (value == null) {
        unsetOvflFree();
      } else {
        setOvflFree((Long)value);
      }
      break;

    case PAGE_COUNT:
      if (value == null) {
        unsetPageCount();
      } else {
        setPageCount((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BFREE:
      return Long.valueOf(getBFree());

    case BIG_BFREE:
      return Long.valueOf(getBigBFree());

    case BIG_PAGES:
      return Integer.valueOf(getBigPages());

    case BUCKETS:
      return Integer.valueOf(getBuckets());

    case DUP:
      return Integer.valueOf(getDup());

    case DUP_FREE:
      return Long.valueOf(getDupFree());

    case FFACTOR:
      return Integer.valueOf(getFfactor());

    case FREE:
      return Integer.valueOf(getFree());

    case MAGIC:
      return Integer.valueOf(getMagic());

    case META_FLAGS:
      return Integer.valueOf(getMetaFlags());

    case NUM_BLOBS:
      return Integer.valueOf(getNumBlobs());

    case NUM_DATA:
      return Integer.valueOf(getNumData());

    case NUM_KEYS:
      return Integer.valueOf(getNumKeys());

    case OVERFLOWS:
      return Integer.valueOf(getOverflows());

    case OVFL_FREE:
      return Long.valueOf(getOvflFree());

    case PAGE_COUNT:
      return Integer.valueOf(getPageCount());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case VERSION:
      return Integer.valueOf(getVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BFREE:
      return isSetBFree();
    case BIG_BFREE:
      return isSetBigBFree();
    case BIG_PAGES:
      return isSetBigPages();
    case BUCKETS:
      return isSetBuckets();
    case DUP:
      return isSetDup();
    case DUP_FREE:
      return isSetDupFree();
    case FFACTOR:
      return isSetFfactor();
    case FREE:
      return isSetFree();
    case MAGIC:
      return isSetMagic();
    case META_FLAGS:
      return isSetMetaFlags();
    case NUM_BLOBS:
      return isSetNumBlobs();
    case NUM_DATA:
      return isSetNumData();
    case NUM_KEYS:
      return isSetNumKeys();
    case OVERFLOWS:
      return isSetOverflows();
    case OVFL_FREE:
      return isSetOvflFree();
    case PAGE_COUNT:
      return isSetPageCount();
    case PAGE_SIZE:
      return isSetPageSize();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THashStat)
      return this.equals((THashStat)that);
    return false;
  }

  public boolean equals(THashStat that) {
    if (that == null)
      return false;

    boolean this_present_BFree = true;
    boolean that_present_BFree = true;
    if (this_present_BFree || that_present_BFree) {
      if (!(this_present_BFree && that_present_BFree))
        return false;
      if (this.BFree != that.BFree)
        return false;
    }

    boolean this_present_bigBFree = true;
    boolean that_present_bigBFree = true;
    if (this_present_bigBFree || that_present_bigBFree) {
      if (!(this_present_bigBFree && that_present_bigBFree))
        return false;
      if (this.bigBFree != that.bigBFree)
        return false;
    }

    boolean this_present_bigPages = true;
    boolean that_present_bigPages = true;
    if (this_present_bigPages || that_present_bigPages) {
      if (!(this_present_bigPages && that_present_bigPages))
        return false;
      if (this.bigPages != that.bigPages)
        return false;
    }

    boolean this_present_buckets = true;
    boolean that_present_buckets = true;
    if (this_present_buckets || that_present_buckets) {
      if (!(this_present_buckets && that_present_buckets))
        return false;
      if (this.buckets != that.buckets)
        return false;
    }

    boolean this_present_dup = true;
    boolean that_present_dup = true;
    if (this_present_dup || that_present_dup) {
      if (!(this_present_dup && that_present_dup))
        return false;
      if (this.dup != that.dup)
        return false;
    }

    boolean this_present_dupFree = true;
    boolean that_present_dupFree = true;
    if (this_present_dupFree || that_present_dupFree) {
      if (!(this_present_dupFree && that_present_dupFree))
        return false;
      if (this.dupFree != that.dupFree)
        return false;
    }

    boolean this_present_ffactor = true;
    boolean that_present_ffactor = true;
    if (this_present_ffactor || that_present_ffactor) {
      if (!(this_present_ffactor && that_present_ffactor))
        return false;
      if (this.ffactor != that.ffactor)
        return false;
    }

    boolean this_present_free = true;
    boolean that_present_free = true;
    if (this_present_free || that_present_free) {
      if (!(this_present_free && that_present_free))
        return false;
      if (this.free != that.free)
        return false;
    }

    boolean this_present_magic = true;
    boolean that_present_magic = true;
    if (this_present_magic || that_present_magic) {
      if (!(this_present_magic && that_present_magic))
        return false;
      if (this.magic != that.magic)
        return false;
    }

    boolean this_present_metaFlags = true;
    boolean that_present_metaFlags = true;
    if (this_present_metaFlags || that_present_metaFlags) {
      if (!(this_present_metaFlags && that_present_metaFlags))
        return false;
      if (this.metaFlags != that.metaFlags)
        return false;
    }

    boolean this_present_numBlobs = true;
    boolean that_present_numBlobs = true;
    if (this_present_numBlobs || that_present_numBlobs) {
      if (!(this_present_numBlobs && that_present_numBlobs))
        return false;
      if (this.numBlobs != that.numBlobs)
        return false;
    }

    boolean this_present_numData = true;
    boolean that_present_numData = true;
    if (this_present_numData || that_present_numData) {
      if (!(this_present_numData && that_present_numData))
        return false;
      if (this.numData != that.numData)
        return false;
    }

    boolean this_present_numKeys = true;
    boolean that_present_numKeys = true;
    if (this_present_numKeys || that_present_numKeys) {
      if (!(this_present_numKeys && that_present_numKeys))
        return false;
      if (this.numKeys != that.numKeys)
        return false;
    }

    boolean this_present_overflows = true;
    boolean that_present_overflows = true;
    if (this_present_overflows || that_present_overflows) {
      if (!(this_present_overflows && that_present_overflows))
        return false;
      if (this.overflows != that.overflows)
        return false;
    }

    boolean this_present_ovflFree = true;
    boolean that_present_ovflFree = true;
    if (this_present_ovflFree || that_present_ovflFree) {
      if (!(this_present_ovflFree && that_present_ovflFree))
        return false;
      if (this.ovflFree != that.ovflFree)
        return false;
    }

    boolean this_present_pageCount = true;
    boolean that_present_pageCount = true;
    if (this_present_pageCount || that_present_pageCount) {
      if (!(this_present_pageCount && that_present_pageCount))
        return false;
      if (this.pageCount != that.pageCount)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_BFree = true;
    list.add(present_BFree);
    if (present_BFree)
      list.add(BFree);

    boolean present_bigBFree = true;
    list.add(present_bigBFree);
    if (present_bigBFree)
      list.add(bigBFree);

    boolean present_bigPages = true;
    list.add(present_bigPages);
    if (present_bigPages)
      list.add(bigPages);

    boolean present_buckets = true;
    list.add(present_buckets);
    if (present_buckets)
      list.add(buckets);

    boolean present_dup = true;
    list.add(present_dup);
    if (present_dup)
      list.add(dup);

    boolean present_dupFree = true;
    list.add(present_dupFree);
    if (present_dupFree)
      list.add(dupFree);

    boolean present_ffactor = true;
    list.add(present_ffactor);
    if (present_ffactor)
      list.add(ffactor);

    boolean present_free = true;
    list.add(present_free);
    if (present_free)
      list.add(free);

    boolean present_magic = true;
    list.add(present_magic);
    if (present_magic)
      list.add(magic);

    boolean present_metaFlags = true;
    list.add(present_metaFlags);
    if (present_metaFlags)
      list.add(metaFlags);

    boolean present_numBlobs = true;
    list.add(present_numBlobs);
    if (present_numBlobs)
      list.add(numBlobs);

    boolean present_numData = true;
    list.add(present_numData);
    if (present_numData)
      list.add(numData);

    boolean present_numKeys = true;
    list.add(present_numKeys);
    if (present_numKeys)
      list.add(numKeys);

    boolean present_overflows = true;
    list.add(present_overflows);
    if (present_overflows)
      list.add(overflows);

    boolean present_ovflFree = true;
    list.add(present_ovflFree);
    if (present_ovflFree)
      list.add(ovflFree);

    boolean present_pageCount = true;
    list.add(present_pageCount);
    if (present_pageCount)
      list.add(pageCount);

    boolean present_pageSize = true;
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    return list.hashCode();
  }

  @Override
  public int compareTo(THashStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBFree()).compareTo(other.isSetBFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BFree, other.BFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigBFree()).compareTo(other.isSetBigBFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigBFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigBFree, other.bigBFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigPages()).compareTo(other.isSetBigPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigPages, other.bigPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuckets()).compareTo(other.isSetBuckets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuckets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buckets, other.buckets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDup()).compareTo(other.isSetDup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dup, other.dup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDupFree()).compareTo(other.isSetDupFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDupFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dupFree, other.dupFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFfactor()).compareTo(other.isSetFfactor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFfactor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ffactor, other.ffactor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFree()).compareTo(other.isSetFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free, other.free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMagic()).compareTo(other.isSetMagic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMagic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.magic, other.magic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetaFlags()).compareTo(other.isSetMetaFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaFlags, other.metaFlags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumBlobs()).compareTo(other.isSetNumBlobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumBlobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numBlobs, other.numBlobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumData()).compareTo(other.isSetNumData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numData, other.numData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumKeys()).compareTo(other.isSetNumKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numKeys, other.numKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverflows()).compareTo(other.isSetOverflows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverflows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overflows, other.overflows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOvflFree()).compareTo(other.isSetOvflFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOvflFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ovflFree, other.ovflFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(other.isSetPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, other.pageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THashStat(");
    boolean first = true;

    sb.append("BFree:");
    sb.append(this.BFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bigBFree:");
    sb.append(this.bigBFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bigPages:");
    sb.append(this.bigPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("buckets:");
    sb.append(this.buckets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dup:");
    sb.append(this.dup);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dupFree:");
    sb.append(this.dupFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ffactor:");
    sb.append(this.ffactor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("free:");
    sb.append(this.free);
    first = false;
    if (!first) sb.append(", ");
    sb.append("magic:");
    sb.append(this.magic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metaFlags:");
    sb.append(this.metaFlags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numBlobs:");
    sb.append(this.numBlobs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numData:");
    sb.append(this.numData);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numKeys:");
    sb.append(this.numKeys);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overflows:");
    sb.append(this.overflows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ovflFree:");
    sb.append(this.ovflFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageCount:");
    sb.append(this.pageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THashStatStandardSchemeFactory implements SchemeFactory {
    public THashStatStandardScheme getScheme() {
      return new THashStatStandardScheme();
    }
  }

  private static class THashStatStandardScheme extends StandardScheme<THashStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THashStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BFREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.BFree = iprot.readI64();
              struct.setBFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BIG_BFREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bigBFree = iprot.readI64();
              struct.setBigBFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIG_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bigPages = iprot.readI32();
              struct.setBigPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUCKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buckets = iprot.readI32();
              struct.setBucketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dup = iprot.readI32();
              struct.setDupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DUP_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dupFree = iprot.readI64();
              struct.setDupFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FFACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ffactor = iprot.readI32();
              struct.setFfactorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.free = iprot.readI32();
              struct.setFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAGIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.magic = iprot.readI32();
              struct.setMagicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // META_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.metaFlags = iprot.readI32();
              struct.setMetaFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NUM_BLOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numBlobs = iprot.readI32();
              struct.setNumBlobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NUM_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numData = iprot.readI32();
              struct.setNumDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NUM_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numKeys = iprot.readI32();
              struct.setNumKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OVERFLOWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overflows = iprot.readI32();
              struct.setOverflowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OVFL_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ovflFree = iprot.readI64();
              struct.setOvflFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageCount = iprot.readI32();
              struct.setPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THashStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BFREE_FIELD_DESC);
      oprot.writeI64(struct.BFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIG_BFREE_FIELD_DESC);
      oprot.writeI64(struct.bigBFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIG_PAGES_FIELD_DESC);
      oprot.writeI32(struct.bigPages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUCKETS_FIELD_DESC);
      oprot.writeI32(struct.buckets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUP_FIELD_DESC);
      oprot.writeI32(struct.dup);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUP_FREE_FIELD_DESC);
      oprot.writeI64(struct.dupFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FFACTOR_FIELD_DESC);
      oprot.writeI32(struct.ffactor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_FIELD_DESC);
      oprot.writeI32(struct.free);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAGIC_FIELD_DESC);
      oprot.writeI32(struct.magic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(META_FLAGS_FIELD_DESC);
      oprot.writeI32(struct.metaFlags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_BLOBS_FIELD_DESC);
      oprot.writeI32(struct.numBlobs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_DATA_FIELD_DESC);
      oprot.writeI32(struct.numData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_KEYS_FIELD_DESC);
      oprot.writeI32(struct.numKeys);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERFLOWS_FIELD_DESC);
      oprot.writeI32(struct.overflows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVFL_FREE_FIELD_DESC);
      oprot.writeI64(struct.ovflFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.pageCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THashStatTupleSchemeFactory implements SchemeFactory {
    public THashStatTupleScheme getScheme() {
      return new THashStatTupleScheme();
    }
  }

  private static class THashStatTupleScheme extends TupleScheme<THashStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THashStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBFree()) {
        optionals.set(0);
      }
      if (struct.isSetBigBFree()) {
        optionals.set(1);
      }
      if (struct.isSetBigPages()) {
        optionals.set(2);
      }
      if (struct.isSetBuckets()) {
        optionals.set(3);
      }
      if (struct.isSetDup()) {
        optionals.set(4);
      }
      if (struct.isSetDupFree()) {
        optionals.set(5);
      }
      if (struct.isSetFfactor()) {
        optionals.set(6);
      }
      if (struct.isSetFree()) {
        optionals.set(7);
      }
      if (struct.isSetMagic()) {
        optionals.set(8);
      }
      if (struct.isSetMetaFlags()) {
        optionals.set(9);
      }
      if (struct.isSetNumBlobs()) {
        optionals.set(10);
      }
      if (struct.isSetNumData()) {
        optionals.set(11);
      }
      if (struct.isSetNumKeys()) {
        optionals.set(12);
      }
      if (struct.isSetOverflows()) {
        optionals.set(13);
      }
      if (struct.isSetOvflFree()) {
        optionals.set(14);
      }
      if (struct.isSetPageCount()) {
        optionals.set(15);
      }
      if (struct.isSetPageSize()) {
        optionals.set(16);
      }
      if (struct.isSetVersion()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetBFree()) {
        oprot.writeI64(struct.BFree);
      }
      if (struct.isSetBigBFree()) {
        oprot.writeI64(struct.bigBFree);
      }
      if (struct.isSetBigPages()) {
        oprot.writeI32(struct.bigPages);
      }
      if (struct.isSetBuckets()) {
        oprot.writeI32(struct.buckets);
      }
      if (struct.isSetDup()) {
        oprot.writeI32(struct.dup);
      }
      if (struct.isSetDupFree()) {
        oprot.writeI64(struct.dupFree);
      }
      if (struct.isSetFfactor()) {
        oprot.writeI32(struct.ffactor);
      }
      if (struct.isSetFree()) {
        oprot.writeI32(struct.free);
      }
      if (struct.isSetMagic()) {
        oprot.writeI32(struct.magic);
      }
      if (struct.isSetMetaFlags()) {
        oprot.writeI32(struct.metaFlags);
      }
      if (struct.isSetNumBlobs()) {
        oprot.writeI32(struct.numBlobs);
      }
      if (struct.isSetNumData()) {
        oprot.writeI32(struct.numData);
      }
      if (struct.isSetNumKeys()) {
        oprot.writeI32(struct.numKeys);
      }
      if (struct.isSetOverflows()) {
        oprot.writeI32(struct.overflows);
      }
      if (struct.isSetOvflFree()) {
        oprot.writeI64(struct.ovflFree);
      }
      if (struct.isSetPageCount()) {
        oprot.writeI32(struct.pageCount);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THashStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.BFree = iprot.readI64();
        struct.setBFreeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bigBFree = iprot.readI64();
        struct.setBigBFreeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bigPages = iprot.readI32();
        struct.setBigPagesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.buckets = iprot.readI32();
        struct.setBucketsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dup = iprot.readI32();
        struct.setDupIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dupFree = iprot.readI64();
        struct.setDupFreeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ffactor = iprot.readI32();
        struct.setFfactorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.free = iprot.readI32();
        struct.setFreeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.magic = iprot.readI32();
        struct.setMagicIsSet(true);
      }
      if (incoming.get(9)) {
        struct.metaFlags = iprot.readI32();
        struct.setMetaFlagsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.numBlobs = iprot.readI32();
        struct.setNumBlobsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.numData = iprot.readI32();
        struct.setNumDataIsSet(true);
      }
      if (incoming.get(12)) {
        struct.numKeys = iprot.readI32();
        struct.setNumKeysIsSet(true);
      }
      if (incoming.get(13)) {
        struct.overflows = iprot.readI32();
        struct.setOverflowsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ovflFree = iprot.readI64();
        struct.setOvflFreeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pageCount = iprot.readI32();
        struct.setPageCountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
    }
  }

}

