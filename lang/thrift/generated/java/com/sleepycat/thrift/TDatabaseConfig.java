/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class TDatabaseConfig implements org.apache.thrift.TBase<TDatabaseConfig, TDatabaseConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TDatabaseConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDatabaseConfig");

  private static final org.apache.thrift.protocol.TField ALLOW_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("allowCreate", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BLOB_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("blobThreshold", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BTREE_MIN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("btreeMinKey", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BTREE_RECORD_NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("btreeRecordNumbers", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checksum", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField EXCLUSIVE_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exclusiveCreate", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField HASH_FILL_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("hashFillFactor", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HASH_NUM_ELEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hashNumElements", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HEAP_REGION_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("heapRegionSize", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField HEAPSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("heapsize", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MULTIVERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("multiversion", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField NO_WAIT_DB_EXCLUSIVE_LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("noWaitDbExclusiveLock", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField QUEUE_EXTENT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("queueExtentSize", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField QUEUE_IN_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("queueInOrder", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField READ_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("readOnly", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField READ_UNCOMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("readUncommitted", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField RECORD_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("recordLength", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField RECORD_PAD_FIELD_DESC = new org.apache.thrift.protocol.TField("recordPad", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField RENUMBERING_FIELD_DESC = new org.apache.thrift.protocol.TField("renumbering", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField REVERSE_SPLIT_OFF_FIELD_DESC = new org.apache.thrift.protocol.TField("reverseSplitOff", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField SORTED_DUPLICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sortedDuplicates", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField TRANSACTION_NOT_DURABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionNotDurable", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField UNSORTED_DUPLICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("unsortedDuplicates", org.apache.thrift.protocol.TType.BOOL, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDatabaseConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDatabaseConfigTupleSchemeFactory());
  }

  public boolean allowCreate; // optional
  public int blobThreshold; // optional
  public int btreeMinKey; // optional
  public boolean btreeRecordNumbers; // optional
  public boolean checksum; // optional
  public boolean exclusiveCreate; // optional
  public int hashFillFactor; // optional
  public int hashNumElements; // optional
  public int heapRegionSize; // optional
  public long heapsize; // optional
  public boolean multiversion; // optional
  public boolean noWaitDbExclusiveLock; // optional
  public int pageSize; // optional
  /**
   * 
   * @see TCachePriority
   */
  public TCachePriority priority; // optional
  public int queueExtentSize; // optional
  public boolean queueInOrder; // optional
  public boolean readOnly; // optional
  public boolean readUncommitted; // optional
  public int recordLength; // optional
  public int recordPad; // optional
  public boolean renumbering; // optional
  public boolean reverseSplitOff; // optional
  public boolean sortedDuplicates; // optional
  public boolean transactionNotDurable; // optional
  /**
   * 
   * @see TDatabaseType
   */
  public TDatabaseType type; // optional
  public boolean unsortedDuplicates; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALLOW_CREATE((short)1, "allowCreate"),
    BLOB_THRESHOLD((short)2, "blobThreshold"),
    BTREE_MIN_KEY((short)3, "btreeMinKey"),
    BTREE_RECORD_NUMBERS((short)4, "btreeRecordNumbers"),
    CHECKSUM((short)5, "checksum"),
    EXCLUSIVE_CREATE((short)6, "exclusiveCreate"),
    HASH_FILL_FACTOR((short)7, "hashFillFactor"),
    HASH_NUM_ELEMENTS((short)8, "hashNumElements"),
    HEAP_REGION_SIZE((short)9, "heapRegionSize"),
    HEAPSIZE((short)10, "heapsize"),
    MULTIVERSION((short)11, "multiversion"),
    NO_WAIT_DB_EXCLUSIVE_LOCK((short)12, "noWaitDbExclusiveLock"),
    PAGE_SIZE((short)13, "pageSize"),
    /**
     * 
     * @see TCachePriority
     */
    PRIORITY((short)14, "priority"),
    QUEUE_EXTENT_SIZE((short)15, "queueExtentSize"),
    QUEUE_IN_ORDER((short)16, "queueInOrder"),
    READ_ONLY((short)17, "readOnly"),
    READ_UNCOMMITTED((short)18, "readUncommitted"),
    RECORD_LENGTH((short)19, "recordLength"),
    RECORD_PAD((short)20, "recordPad"),
    RENUMBERING((short)21, "renumbering"),
    REVERSE_SPLIT_OFF((short)22, "reverseSplitOff"),
    SORTED_DUPLICATES((short)23, "sortedDuplicates"),
    TRANSACTION_NOT_DURABLE((short)24, "transactionNotDurable"),
    /**
     * 
     * @see TDatabaseType
     */
    TYPE((short)25, "type"),
    UNSORTED_DUPLICATES((short)26, "unsortedDuplicates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALLOW_CREATE
          return ALLOW_CREATE;
        case 2: // BLOB_THRESHOLD
          return BLOB_THRESHOLD;
        case 3: // BTREE_MIN_KEY
          return BTREE_MIN_KEY;
        case 4: // BTREE_RECORD_NUMBERS
          return BTREE_RECORD_NUMBERS;
        case 5: // CHECKSUM
          return CHECKSUM;
        case 6: // EXCLUSIVE_CREATE
          return EXCLUSIVE_CREATE;
        case 7: // HASH_FILL_FACTOR
          return HASH_FILL_FACTOR;
        case 8: // HASH_NUM_ELEMENTS
          return HASH_NUM_ELEMENTS;
        case 9: // HEAP_REGION_SIZE
          return HEAP_REGION_SIZE;
        case 10: // HEAPSIZE
          return HEAPSIZE;
        case 11: // MULTIVERSION
          return MULTIVERSION;
        case 12: // NO_WAIT_DB_EXCLUSIVE_LOCK
          return NO_WAIT_DB_EXCLUSIVE_LOCK;
        case 13: // PAGE_SIZE
          return PAGE_SIZE;
        case 14: // PRIORITY
          return PRIORITY;
        case 15: // QUEUE_EXTENT_SIZE
          return QUEUE_EXTENT_SIZE;
        case 16: // QUEUE_IN_ORDER
          return QUEUE_IN_ORDER;
        case 17: // READ_ONLY
          return READ_ONLY;
        case 18: // READ_UNCOMMITTED
          return READ_UNCOMMITTED;
        case 19: // RECORD_LENGTH
          return RECORD_LENGTH;
        case 20: // RECORD_PAD
          return RECORD_PAD;
        case 21: // RENUMBERING
          return RENUMBERING;
        case 22: // REVERSE_SPLIT_OFF
          return REVERSE_SPLIT_OFF;
        case 23: // SORTED_DUPLICATES
          return SORTED_DUPLICATES;
        case 24: // TRANSACTION_NOT_DURABLE
          return TRANSACTION_NOT_DURABLE;
        case 25: // TYPE
          return TYPE;
        case 26: // UNSORTED_DUPLICATES
          return UNSORTED_DUPLICATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALLOWCREATE_ISSET_ID = 0;
  private static final int __BLOBTHRESHOLD_ISSET_ID = 1;
  private static final int __BTREEMINKEY_ISSET_ID = 2;
  private static final int __BTREERECORDNUMBERS_ISSET_ID = 3;
  private static final int __CHECKSUM_ISSET_ID = 4;
  private static final int __EXCLUSIVECREATE_ISSET_ID = 5;
  private static final int __HASHFILLFACTOR_ISSET_ID = 6;
  private static final int __HASHNUMELEMENTS_ISSET_ID = 7;
  private static final int __HEAPREGIONSIZE_ISSET_ID = 8;
  private static final int __HEAPSIZE_ISSET_ID = 9;
  private static final int __MULTIVERSION_ISSET_ID = 10;
  private static final int __NOWAITDBEXCLUSIVELOCK_ISSET_ID = 11;
  private static final int __PAGESIZE_ISSET_ID = 12;
  private static final int __QUEUEEXTENTSIZE_ISSET_ID = 13;
  private static final int __QUEUEINORDER_ISSET_ID = 14;
  private static final int __READONLY_ISSET_ID = 15;
  private static final int __READUNCOMMITTED_ISSET_ID = 16;
  private static final int __RECORDLENGTH_ISSET_ID = 17;
  private static final int __RECORDPAD_ISSET_ID = 18;
  private static final int __RENUMBERING_ISSET_ID = 19;
  private static final int __REVERSESPLITOFF_ISSET_ID = 20;
  private static final int __SORTEDDUPLICATES_ISSET_ID = 21;
  private static final int __TRANSACTIONNOTDURABLE_ISSET_ID = 22;
  private static final int __UNSORTEDDUPLICATES_ISSET_ID = 23;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ALLOW_CREATE,_Fields.BLOB_THRESHOLD,_Fields.BTREE_MIN_KEY,_Fields.BTREE_RECORD_NUMBERS,_Fields.CHECKSUM,_Fields.EXCLUSIVE_CREATE,_Fields.HASH_FILL_FACTOR,_Fields.HASH_NUM_ELEMENTS,_Fields.HEAP_REGION_SIZE,_Fields.HEAPSIZE,_Fields.MULTIVERSION,_Fields.NO_WAIT_DB_EXCLUSIVE_LOCK,_Fields.PAGE_SIZE,_Fields.PRIORITY,_Fields.QUEUE_EXTENT_SIZE,_Fields.QUEUE_IN_ORDER,_Fields.READ_ONLY,_Fields.READ_UNCOMMITTED,_Fields.RECORD_LENGTH,_Fields.RECORD_PAD,_Fields.RENUMBERING,_Fields.REVERSE_SPLIT_OFF,_Fields.SORTED_DUPLICATES,_Fields.TRANSACTION_NOT_DURABLE,_Fields.TYPE,_Fields.UNSORTED_DUPLICATES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALLOW_CREATE, new org.apache.thrift.meta_data.FieldMetaData("allowCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOB_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("blobThreshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BTREE_MIN_KEY, new org.apache.thrift.meta_data.FieldMetaData("btreeMinKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BTREE_RECORD_NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("btreeRecordNumbers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("checksum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXCLUSIVE_CREATE, new org.apache.thrift.meta_data.FieldMetaData("exclusiveCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HASH_FILL_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("hashFillFactor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HASH_NUM_ELEMENTS, new org.apache.thrift.meta_data.FieldMetaData("hashNumElements", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAP_REGION_SIZE, new org.apache.thrift.meta_data.FieldMetaData("heapRegionSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAPSIZE, new org.apache.thrift.meta_data.FieldMetaData("heapsize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTIVERSION, new org.apache.thrift.meta_data.FieldMetaData("multiversion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NO_WAIT_DB_EXCLUSIVE_LOCK, new org.apache.thrift.meta_data.FieldMetaData("noWaitDbExclusiveLock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCachePriority.class)));
    tmpMap.put(_Fields.QUEUE_EXTENT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("queueExtentSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_IN_ORDER, new org.apache.thrift.meta_data.FieldMetaData("queueInOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.READ_ONLY, new org.apache.thrift.meta_data.FieldMetaData("readOnly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.READ_UNCOMMITTED, new org.apache.thrift.meta_data.FieldMetaData("readUncommitted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RECORD_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("recordLength", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORD_PAD, new org.apache.thrift.meta_data.FieldMetaData("recordPad", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RENUMBERING, new org.apache.thrift.meta_data.FieldMetaData("renumbering", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REVERSE_SPLIT_OFF, new org.apache.thrift.meta_data.FieldMetaData("reverseSplitOff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SORTED_DUPLICATES, new org.apache.thrift.meta_data.FieldMetaData("sortedDuplicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRANSACTION_NOT_DURABLE, new org.apache.thrift.meta_data.FieldMetaData("transactionNotDurable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDatabaseType.class)));
    tmpMap.put(_Fields.UNSORTED_DUPLICATES, new org.apache.thrift.meta_data.FieldMetaData("unsortedDuplicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDatabaseConfig.class, metaDataMap);
  }

  public TDatabaseConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDatabaseConfig(TDatabaseConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.allowCreate = other.allowCreate;
    this.blobThreshold = other.blobThreshold;
    this.btreeMinKey = other.btreeMinKey;
    this.btreeRecordNumbers = other.btreeRecordNumbers;
    this.checksum = other.checksum;
    this.exclusiveCreate = other.exclusiveCreate;
    this.hashFillFactor = other.hashFillFactor;
    this.hashNumElements = other.hashNumElements;
    this.heapRegionSize = other.heapRegionSize;
    this.heapsize = other.heapsize;
    this.multiversion = other.multiversion;
    this.noWaitDbExclusiveLock = other.noWaitDbExclusiveLock;
    this.pageSize = other.pageSize;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    this.queueExtentSize = other.queueExtentSize;
    this.queueInOrder = other.queueInOrder;
    this.readOnly = other.readOnly;
    this.readUncommitted = other.readUncommitted;
    this.recordLength = other.recordLength;
    this.recordPad = other.recordPad;
    this.renumbering = other.renumbering;
    this.reverseSplitOff = other.reverseSplitOff;
    this.sortedDuplicates = other.sortedDuplicates;
    this.transactionNotDurable = other.transactionNotDurable;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.unsortedDuplicates = other.unsortedDuplicates;
  }

  public TDatabaseConfig deepCopy() {
    return new TDatabaseConfig(this);
  }

  @Override
  public void clear() {
    setAllowCreateIsSet(false);
    this.allowCreate = false;
    setBlobThresholdIsSet(false);
    this.blobThreshold = 0;
    setBtreeMinKeyIsSet(false);
    this.btreeMinKey = 0;
    setBtreeRecordNumbersIsSet(false);
    this.btreeRecordNumbers = false;
    setChecksumIsSet(false);
    this.checksum = false;
    setExclusiveCreateIsSet(false);
    this.exclusiveCreate = false;
    setHashFillFactorIsSet(false);
    this.hashFillFactor = 0;
    setHashNumElementsIsSet(false);
    this.hashNumElements = 0;
    setHeapRegionSizeIsSet(false);
    this.heapRegionSize = 0;
    setHeapsizeIsSet(false);
    this.heapsize = 0;
    setMultiversionIsSet(false);
    this.multiversion = false;
    setNoWaitDbExclusiveLockIsSet(false);
    this.noWaitDbExclusiveLock = false;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    this.priority = null;
    setQueueExtentSizeIsSet(false);
    this.queueExtentSize = 0;
    setQueueInOrderIsSet(false);
    this.queueInOrder = false;
    setReadOnlyIsSet(false);
    this.readOnly = false;
    setReadUncommittedIsSet(false);
    this.readUncommitted = false;
    setRecordLengthIsSet(false);
    this.recordLength = 0;
    setRecordPadIsSet(false);
    this.recordPad = 0;
    setRenumberingIsSet(false);
    this.renumbering = false;
    setReverseSplitOffIsSet(false);
    this.reverseSplitOff = false;
    setSortedDuplicatesIsSet(false);
    this.sortedDuplicates = false;
    setTransactionNotDurableIsSet(false);
    this.transactionNotDurable = false;
    this.type = null;
    setUnsortedDuplicatesIsSet(false);
    this.unsortedDuplicates = false;
  }

  public boolean isAllowCreate() {
    return this.allowCreate;
  }

  public TDatabaseConfig setAllowCreate(boolean allowCreate) {
    this.allowCreate = allowCreate;
    setAllowCreateIsSet(true);
    return this;
  }

  public void unsetAllowCreate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID);
  }

  /** Returns true if field allowCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowCreate() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID);
  }

  public void setAllowCreateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID, value);
  }

  public int getBlobThreshold() {
    return this.blobThreshold;
  }

  public TDatabaseConfig setBlobThreshold(int blobThreshold) {
    this.blobThreshold = blobThreshold;
    setBlobThresholdIsSet(true);
    return this;
  }

  public void unsetBlobThreshold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOBTHRESHOLD_ISSET_ID);
  }

  /** Returns true if field blobThreshold is set (has been assigned a value) and false otherwise */
  public boolean isSetBlobThreshold() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOBTHRESHOLD_ISSET_ID);
  }

  public void setBlobThresholdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOBTHRESHOLD_ISSET_ID, value);
  }

  public int getBtreeMinKey() {
    return this.btreeMinKey;
  }

  public TDatabaseConfig setBtreeMinKey(int btreeMinKey) {
    this.btreeMinKey = btreeMinKey;
    setBtreeMinKeyIsSet(true);
    return this;
  }

  public void unsetBtreeMinKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BTREEMINKEY_ISSET_ID);
  }

  /** Returns true if field btreeMinKey is set (has been assigned a value) and false otherwise */
  public boolean isSetBtreeMinKey() {
    return EncodingUtils.testBit(__isset_bitfield, __BTREEMINKEY_ISSET_ID);
  }

  public void setBtreeMinKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BTREEMINKEY_ISSET_ID, value);
  }

  public boolean isBtreeRecordNumbers() {
    return this.btreeRecordNumbers;
  }

  public TDatabaseConfig setBtreeRecordNumbers(boolean btreeRecordNumbers) {
    this.btreeRecordNumbers = btreeRecordNumbers;
    setBtreeRecordNumbersIsSet(true);
    return this;
  }

  public void unsetBtreeRecordNumbers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BTREERECORDNUMBERS_ISSET_ID);
  }

  /** Returns true if field btreeRecordNumbers is set (has been assigned a value) and false otherwise */
  public boolean isSetBtreeRecordNumbers() {
    return EncodingUtils.testBit(__isset_bitfield, __BTREERECORDNUMBERS_ISSET_ID);
  }

  public void setBtreeRecordNumbersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BTREERECORDNUMBERS_ISSET_ID, value);
  }

  public boolean isChecksum() {
    return this.checksum;
  }

  public TDatabaseConfig setChecksum(boolean checksum) {
    this.checksum = checksum;
    setChecksumIsSet(true);
    return this;
  }

  public void unsetChecksum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKSUM_ISSET_ID);
  }

  /** Returns true if field checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetChecksum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKSUM_ISSET_ID);
  }

  public void setChecksumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKSUM_ISSET_ID, value);
  }

  public boolean isExclusiveCreate() {
    return this.exclusiveCreate;
  }

  public TDatabaseConfig setExclusiveCreate(boolean exclusiveCreate) {
    this.exclusiveCreate = exclusiveCreate;
    setExclusiveCreateIsSet(true);
    return this;
  }

  public void unsetExclusiveCreate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCLUSIVECREATE_ISSET_ID);
  }

  /** Returns true if field exclusiveCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetExclusiveCreate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCLUSIVECREATE_ISSET_ID);
  }

  public void setExclusiveCreateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCLUSIVECREATE_ISSET_ID, value);
  }

  public int getHashFillFactor() {
    return this.hashFillFactor;
  }

  public TDatabaseConfig setHashFillFactor(int hashFillFactor) {
    this.hashFillFactor = hashFillFactor;
    setHashFillFactorIsSet(true);
    return this;
  }

  public void unsetHashFillFactor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASHFILLFACTOR_ISSET_ID);
  }

  /** Returns true if field hashFillFactor is set (has been assigned a value) and false otherwise */
  public boolean isSetHashFillFactor() {
    return EncodingUtils.testBit(__isset_bitfield, __HASHFILLFACTOR_ISSET_ID);
  }

  public void setHashFillFactorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASHFILLFACTOR_ISSET_ID, value);
  }

  public int getHashNumElements() {
    return this.hashNumElements;
  }

  public TDatabaseConfig setHashNumElements(int hashNumElements) {
    this.hashNumElements = hashNumElements;
    setHashNumElementsIsSet(true);
    return this;
  }

  public void unsetHashNumElements() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASHNUMELEMENTS_ISSET_ID);
  }

  /** Returns true if field hashNumElements is set (has been assigned a value) and false otherwise */
  public boolean isSetHashNumElements() {
    return EncodingUtils.testBit(__isset_bitfield, __HASHNUMELEMENTS_ISSET_ID);
  }

  public void setHashNumElementsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASHNUMELEMENTS_ISSET_ID, value);
  }

  public int getHeapRegionSize() {
    return this.heapRegionSize;
  }

  public TDatabaseConfig setHeapRegionSize(int heapRegionSize) {
    this.heapRegionSize = heapRegionSize;
    setHeapRegionSizeIsSet(true);
    return this;
  }

  public void unsetHeapRegionSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPREGIONSIZE_ISSET_ID);
  }

  /** Returns true if field heapRegionSize is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapRegionSize() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPREGIONSIZE_ISSET_ID);
  }

  public void setHeapRegionSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPREGIONSIZE_ISSET_ID, value);
  }

  public long getHeapsize() {
    return this.heapsize;
  }

  public TDatabaseConfig setHeapsize(long heapsize) {
    this.heapsize = heapsize;
    setHeapsizeIsSet(true);
    return this;
  }

  public void unsetHeapsize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEAPSIZE_ISSET_ID);
  }

  /** Returns true if field heapsize is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapsize() {
    return EncodingUtils.testBit(__isset_bitfield, __HEAPSIZE_ISSET_ID);
  }

  public void setHeapsizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEAPSIZE_ISSET_ID, value);
  }

  public boolean isMultiversion() {
    return this.multiversion;
  }

  public TDatabaseConfig setMultiversion(boolean multiversion) {
    this.multiversion = multiversion;
    setMultiversionIsSet(true);
    return this;
  }

  public void unsetMultiversion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIVERSION_ISSET_ID);
  }

  /** Returns true if field multiversion is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiversion() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIVERSION_ISSET_ID);
  }

  public void setMultiversionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIVERSION_ISSET_ID, value);
  }

  public boolean isNoWaitDbExclusiveLock() {
    return this.noWaitDbExclusiveLock;
  }

  public TDatabaseConfig setNoWaitDbExclusiveLock(boolean noWaitDbExclusiveLock) {
    this.noWaitDbExclusiveLock = noWaitDbExclusiveLock;
    setNoWaitDbExclusiveLockIsSet(true);
    return this;
  }

  public void unsetNoWaitDbExclusiveLock() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOWAITDBEXCLUSIVELOCK_ISSET_ID);
  }

  /** Returns true if field noWaitDbExclusiveLock is set (has been assigned a value) and false otherwise */
  public boolean isSetNoWaitDbExclusiveLock() {
    return EncodingUtils.testBit(__isset_bitfield, __NOWAITDBEXCLUSIVELOCK_ISSET_ID);
  }

  public void setNoWaitDbExclusiveLockIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOWAITDBEXCLUSIVELOCK_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public TDatabaseConfig setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see TCachePriority
   */
  public TCachePriority getPriority() {
    return this.priority;
  }

  /**
   * 
   * @see TCachePriority
   */
  public TDatabaseConfig setPriority(TCachePriority priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public int getQueueExtentSize() {
    return this.queueExtentSize;
  }

  public TDatabaseConfig setQueueExtentSize(int queueExtentSize) {
    this.queueExtentSize = queueExtentSize;
    setQueueExtentSizeIsSet(true);
    return this;
  }

  public void unsetQueueExtentSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUEEXTENTSIZE_ISSET_ID);
  }

  /** Returns true if field queueExtentSize is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueExtentSize() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUEEXTENTSIZE_ISSET_ID);
  }

  public void setQueueExtentSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUEEXTENTSIZE_ISSET_ID, value);
  }

  public boolean isQueueInOrder() {
    return this.queueInOrder;
  }

  public TDatabaseConfig setQueueInOrder(boolean queueInOrder) {
    this.queueInOrder = queueInOrder;
    setQueueInOrderIsSet(true);
    return this;
  }

  public void unsetQueueInOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUEINORDER_ISSET_ID);
  }

  /** Returns true if field queueInOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueInOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUEINORDER_ISSET_ID);
  }

  public void setQueueInOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUEINORDER_ISSET_ID, value);
  }

  public boolean isReadOnly() {
    return this.readOnly;
  }

  public TDatabaseConfig setReadOnly(boolean readOnly) {
    this.readOnly = readOnly;
    setReadOnlyIsSet(true);
    return this;
  }

  public void unsetReadOnly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READONLY_ISSET_ID);
  }

  /** Returns true if field readOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetReadOnly() {
    return EncodingUtils.testBit(__isset_bitfield, __READONLY_ISSET_ID);
  }

  public void setReadOnlyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READONLY_ISSET_ID, value);
  }

  public boolean isReadUncommitted() {
    return this.readUncommitted;
  }

  public TDatabaseConfig setReadUncommitted(boolean readUncommitted) {
    this.readUncommitted = readUncommitted;
    setReadUncommittedIsSet(true);
    return this;
  }

  public void unsetReadUncommitted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READUNCOMMITTED_ISSET_ID);
  }

  /** Returns true if field readUncommitted is set (has been assigned a value) and false otherwise */
  public boolean isSetReadUncommitted() {
    return EncodingUtils.testBit(__isset_bitfield, __READUNCOMMITTED_ISSET_ID);
  }

  public void setReadUncommittedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READUNCOMMITTED_ISSET_ID, value);
  }

  public int getRecordLength() {
    return this.recordLength;
  }

  public TDatabaseConfig setRecordLength(int recordLength) {
    this.recordLength = recordLength;
    setRecordLengthIsSet(true);
    return this;
  }

  public void unsetRecordLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDLENGTH_ISSET_ID);
  }

  /** Returns true if field recordLength is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordLength() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDLENGTH_ISSET_ID);
  }

  public void setRecordLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDLENGTH_ISSET_ID, value);
  }

  public int getRecordPad() {
    return this.recordPad;
  }

  public TDatabaseConfig setRecordPad(int recordPad) {
    this.recordPad = recordPad;
    setRecordPadIsSet(true);
    return this;
  }

  public void unsetRecordPad() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDPAD_ISSET_ID);
  }

  /** Returns true if field recordPad is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordPad() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDPAD_ISSET_ID);
  }

  public void setRecordPadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDPAD_ISSET_ID, value);
  }

  public boolean isRenumbering() {
    return this.renumbering;
  }

  public TDatabaseConfig setRenumbering(boolean renumbering) {
    this.renumbering = renumbering;
    setRenumberingIsSet(true);
    return this;
  }

  public void unsetRenumbering() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENUMBERING_ISSET_ID);
  }

  /** Returns true if field renumbering is set (has been assigned a value) and false otherwise */
  public boolean isSetRenumbering() {
    return EncodingUtils.testBit(__isset_bitfield, __RENUMBERING_ISSET_ID);
  }

  public void setRenumberingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENUMBERING_ISSET_ID, value);
  }

  public boolean isReverseSplitOff() {
    return this.reverseSplitOff;
  }

  public TDatabaseConfig setReverseSplitOff(boolean reverseSplitOff) {
    this.reverseSplitOff = reverseSplitOff;
    setReverseSplitOffIsSet(true);
    return this;
  }

  public void unsetReverseSplitOff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVERSESPLITOFF_ISSET_ID);
  }

  /** Returns true if field reverseSplitOff is set (has been assigned a value) and false otherwise */
  public boolean isSetReverseSplitOff() {
    return EncodingUtils.testBit(__isset_bitfield, __REVERSESPLITOFF_ISSET_ID);
  }

  public void setReverseSplitOffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVERSESPLITOFF_ISSET_ID, value);
  }

  public boolean isSortedDuplicates() {
    return this.sortedDuplicates;
  }

  public TDatabaseConfig setSortedDuplicates(boolean sortedDuplicates) {
    this.sortedDuplicates = sortedDuplicates;
    setSortedDuplicatesIsSet(true);
    return this;
  }

  public void unsetSortedDuplicates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTEDDUPLICATES_ISSET_ID);
  }

  /** Returns true if field sortedDuplicates is set (has been assigned a value) and false otherwise */
  public boolean isSetSortedDuplicates() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTEDDUPLICATES_ISSET_ID);
  }

  public void setSortedDuplicatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTEDDUPLICATES_ISSET_ID, value);
  }

  public boolean isTransactionNotDurable() {
    return this.transactionNotDurable;
  }

  public TDatabaseConfig setTransactionNotDurable(boolean transactionNotDurable) {
    this.transactionNotDurable = transactionNotDurable;
    setTransactionNotDurableIsSet(true);
    return this;
  }

  public void unsetTransactionNotDurable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSACTIONNOTDURABLE_ISSET_ID);
  }

  /** Returns true if field transactionNotDurable is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionNotDurable() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSACTIONNOTDURABLE_ISSET_ID);
  }

  public void setTransactionNotDurableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSACTIONNOTDURABLE_ISSET_ID, value);
  }

  /**
   * 
   * @see TDatabaseType
   */
  public TDatabaseType getType() {
    return this.type;
  }

  /**
   * 
   * @see TDatabaseType
   */
  public TDatabaseConfig setType(TDatabaseType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public boolean isUnsortedDuplicates() {
    return this.unsortedDuplicates;
  }

  public TDatabaseConfig setUnsortedDuplicates(boolean unsortedDuplicates) {
    this.unsortedDuplicates = unsortedDuplicates;
    setUnsortedDuplicatesIsSet(true);
    return this;
  }

  public void unsetUnsortedDuplicates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNSORTEDDUPLICATES_ISSET_ID);
  }

  /** Returns true if field unsortedDuplicates is set (has been assigned a value) and false otherwise */
  public boolean isSetUnsortedDuplicates() {
    return EncodingUtils.testBit(__isset_bitfield, __UNSORTEDDUPLICATES_ISSET_ID);
  }

  public void setUnsortedDuplicatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNSORTEDDUPLICATES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALLOW_CREATE:
      if (value == null) {
        unsetAllowCreate();
      } else {
        setAllowCreate((Boolean)value);
      }
      break;

    case BLOB_THRESHOLD:
      if (value == null) {
        unsetBlobThreshold();
      } else {
        setBlobThreshold((Integer)value);
      }
      break;

    case BTREE_MIN_KEY:
      if (value == null) {
        unsetBtreeMinKey();
      } else {
        setBtreeMinKey((Integer)value);
      }
      break;

    case BTREE_RECORD_NUMBERS:
      if (value == null) {
        unsetBtreeRecordNumbers();
      } else {
        setBtreeRecordNumbers((Boolean)value);
      }
      break;

    case CHECKSUM:
      if (value == null) {
        unsetChecksum();
      } else {
        setChecksum((Boolean)value);
      }
      break;

    case EXCLUSIVE_CREATE:
      if (value == null) {
        unsetExclusiveCreate();
      } else {
        setExclusiveCreate((Boolean)value);
      }
      break;

    case HASH_FILL_FACTOR:
      if (value == null) {
        unsetHashFillFactor();
      } else {
        setHashFillFactor((Integer)value);
      }
      break;

    case HASH_NUM_ELEMENTS:
      if (value == null) {
        unsetHashNumElements();
      } else {
        setHashNumElements((Integer)value);
      }
      break;

    case HEAP_REGION_SIZE:
      if (value == null) {
        unsetHeapRegionSize();
      } else {
        setHeapRegionSize((Integer)value);
      }
      break;

    case HEAPSIZE:
      if (value == null) {
        unsetHeapsize();
      } else {
        setHeapsize((Long)value);
      }
      break;

    case MULTIVERSION:
      if (value == null) {
        unsetMultiversion();
      } else {
        setMultiversion((Boolean)value);
      }
      break;

    case NO_WAIT_DB_EXCLUSIVE_LOCK:
      if (value == null) {
        unsetNoWaitDbExclusiveLock();
      } else {
        setNoWaitDbExclusiveLock((Boolean)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((TCachePriority)value);
      }
      break;

    case QUEUE_EXTENT_SIZE:
      if (value == null) {
        unsetQueueExtentSize();
      } else {
        setQueueExtentSize((Integer)value);
      }
      break;

    case QUEUE_IN_ORDER:
      if (value == null) {
        unsetQueueInOrder();
      } else {
        setQueueInOrder((Boolean)value);
      }
      break;

    case READ_ONLY:
      if (value == null) {
        unsetReadOnly();
      } else {
        setReadOnly((Boolean)value);
      }
      break;

    case READ_UNCOMMITTED:
      if (value == null) {
        unsetReadUncommitted();
      } else {
        setReadUncommitted((Boolean)value);
      }
      break;

    case RECORD_LENGTH:
      if (value == null) {
        unsetRecordLength();
      } else {
        setRecordLength((Integer)value);
      }
      break;

    case RECORD_PAD:
      if (value == null) {
        unsetRecordPad();
      } else {
        setRecordPad((Integer)value);
      }
      break;

    case RENUMBERING:
      if (value == null) {
        unsetRenumbering();
      } else {
        setRenumbering((Boolean)value);
      }
      break;

    case REVERSE_SPLIT_OFF:
      if (value == null) {
        unsetReverseSplitOff();
      } else {
        setReverseSplitOff((Boolean)value);
      }
      break;

    case SORTED_DUPLICATES:
      if (value == null) {
        unsetSortedDuplicates();
      } else {
        setSortedDuplicates((Boolean)value);
      }
      break;

    case TRANSACTION_NOT_DURABLE:
      if (value == null) {
        unsetTransactionNotDurable();
      } else {
        setTransactionNotDurable((Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TDatabaseType)value);
      }
      break;

    case UNSORTED_DUPLICATES:
      if (value == null) {
        unsetUnsortedDuplicates();
      } else {
        setUnsortedDuplicates((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALLOW_CREATE:
      return Boolean.valueOf(isAllowCreate());

    case BLOB_THRESHOLD:
      return Integer.valueOf(getBlobThreshold());

    case BTREE_MIN_KEY:
      return Integer.valueOf(getBtreeMinKey());

    case BTREE_RECORD_NUMBERS:
      return Boolean.valueOf(isBtreeRecordNumbers());

    case CHECKSUM:
      return Boolean.valueOf(isChecksum());

    case EXCLUSIVE_CREATE:
      return Boolean.valueOf(isExclusiveCreate());

    case HASH_FILL_FACTOR:
      return Integer.valueOf(getHashFillFactor());

    case HASH_NUM_ELEMENTS:
      return Integer.valueOf(getHashNumElements());

    case HEAP_REGION_SIZE:
      return Integer.valueOf(getHeapRegionSize());

    case HEAPSIZE:
      return Long.valueOf(getHeapsize());

    case MULTIVERSION:
      return Boolean.valueOf(isMultiversion());

    case NO_WAIT_DB_EXCLUSIVE_LOCK:
      return Boolean.valueOf(isNoWaitDbExclusiveLock());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case PRIORITY:
      return getPriority();

    case QUEUE_EXTENT_SIZE:
      return Integer.valueOf(getQueueExtentSize());

    case QUEUE_IN_ORDER:
      return Boolean.valueOf(isQueueInOrder());

    case READ_ONLY:
      return Boolean.valueOf(isReadOnly());

    case READ_UNCOMMITTED:
      return Boolean.valueOf(isReadUncommitted());

    case RECORD_LENGTH:
      return Integer.valueOf(getRecordLength());

    case RECORD_PAD:
      return Integer.valueOf(getRecordPad());

    case RENUMBERING:
      return Boolean.valueOf(isRenumbering());

    case REVERSE_SPLIT_OFF:
      return Boolean.valueOf(isReverseSplitOff());

    case SORTED_DUPLICATES:
      return Boolean.valueOf(isSortedDuplicates());

    case TRANSACTION_NOT_DURABLE:
      return Boolean.valueOf(isTransactionNotDurable());

    case TYPE:
      return getType();

    case UNSORTED_DUPLICATES:
      return Boolean.valueOf(isUnsortedDuplicates());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALLOW_CREATE:
      return isSetAllowCreate();
    case BLOB_THRESHOLD:
      return isSetBlobThreshold();
    case BTREE_MIN_KEY:
      return isSetBtreeMinKey();
    case BTREE_RECORD_NUMBERS:
      return isSetBtreeRecordNumbers();
    case CHECKSUM:
      return isSetChecksum();
    case EXCLUSIVE_CREATE:
      return isSetExclusiveCreate();
    case HASH_FILL_FACTOR:
      return isSetHashFillFactor();
    case HASH_NUM_ELEMENTS:
      return isSetHashNumElements();
    case HEAP_REGION_SIZE:
      return isSetHeapRegionSize();
    case HEAPSIZE:
      return isSetHeapsize();
    case MULTIVERSION:
      return isSetMultiversion();
    case NO_WAIT_DB_EXCLUSIVE_LOCK:
      return isSetNoWaitDbExclusiveLock();
    case PAGE_SIZE:
      return isSetPageSize();
    case PRIORITY:
      return isSetPriority();
    case QUEUE_EXTENT_SIZE:
      return isSetQueueExtentSize();
    case QUEUE_IN_ORDER:
      return isSetQueueInOrder();
    case READ_ONLY:
      return isSetReadOnly();
    case READ_UNCOMMITTED:
      return isSetReadUncommitted();
    case RECORD_LENGTH:
      return isSetRecordLength();
    case RECORD_PAD:
      return isSetRecordPad();
    case RENUMBERING:
      return isSetRenumbering();
    case REVERSE_SPLIT_OFF:
      return isSetReverseSplitOff();
    case SORTED_DUPLICATES:
      return isSetSortedDuplicates();
    case TRANSACTION_NOT_DURABLE:
      return isSetTransactionNotDurable();
    case TYPE:
      return isSetType();
    case UNSORTED_DUPLICATES:
      return isSetUnsortedDuplicates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDatabaseConfig)
      return this.equals((TDatabaseConfig)that);
    return false;
  }

  public boolean equals(TDatabaseConfig that) {
    if (that == null)
      return false;

    boolean this_present_allowCreate = true && this.isSetAllowCreate();
    boolean that_present_allowCreate = true && that.isSetAllowCreate();
    if (this_present_allowCreate || that_present_allowCreate) {
      if (!(this_present_allowCreate && that_present_allowCreate))
        return false;
      if (this.allowCreate != that.allowCreate)
        return false;
    }

    boolean this_present_blobThreshold = true && this.isSetBlobThreshold();
    boolean that_present_blobThreshold = true && that.isSetBlobThreshold();
    if (this_present_blobThreshold || that_present_blobThreshold) {
      if (!(this_present_blobThreshold && that_present_blobThreshold))
        return false;
      if (this.blobThreshold != that.blobThreshold)
        return false;
    }

    boolean this_present_btreeMinKey = true && this.isSetBtreeMinKey();
    boolean that_present_btreeMinKey = true && that.isSetBtreeMinKey();
    if (this_present_btreeMinKey || that_present_btreeMinKey) {
      if (!(this_present_btreeMinKey && that_present_btreeMinKey))
        return false;
      if (this.btreeMinKey != that.btreeMinKey)
        return false;
    }

    boolean this_present_btreeRecordNumbers = true && this.isSetBtreeRecordNumbers();
    boolean that_present_btreeRecordNumbers = true && that.isSetBtreeRecordNumbers();
    if (this_present_btreeRecordNumbers || that_present_btreeRecordNumbers) {
      if (!(this_present_btreeRecordNumbers && that_present_btreeRecordNumbers))
        return false;
      if (this.btreeRecordNumbers != that.btreeRecordNumbers)
        return false;
    }

    boolean this_present_checksum = true && this.isSetChecksum();
    boolean that_present_checksum = true && that.isSetChecksum();
    if (this_present_checksum || that_present_checksum) {
      if (!(this_present_checksum && that_present_checksum))
        return false;
      if (this.checksum != that.checksum)
        return false;
    }

    boolean this_present_exclusiveCreate = true && this.isSetExclusiveCreate();
    boolean that_present_exclusiveCreate = true && that.isSetExclusiveCreate();
    if (this_present_exclusiveCreate || that_present_exclusiveCreate) {
      if (!(this_present_exclusiveCreate && that_present_exclusiveCreate))
        return false;
      if (this.exclusiveCreate != that.exclusiveCreate)
        return false;
    }

    boolean this_present_hashFillFactor = true && this.isSetHashFillFactor();
    boolean that_present_hashFillFactor = true && that.isSetHashFillFactor();
    if (this_present_hashFillFactor || that_present_hashFillFactor) {
      if (!(this_present_hashFillFactor && that_present_hashFillFactor))
        return false;
      if (this.hashFillFactor != that.hashFillFactor)
        return false;
    }

    boolean this_present_hashNumElements = true && this.isSetHashNumElements();
    boolean that_present_hashNumElements = true && that.isSetHashNumElements();
    if (this_present_hashNumElements || that_present_hashNumElements) {
      if (!(this_present_hashNumElements && that_present_hashNumElements))
        return false;
      if (this.hashNumElements != that.hashNumElements)
        return false;
    }

    boolean this_present_heapRegionSize = true && this.isSetHeapRegionSize();
    boolean that_present_heapRegionSize = true && that.isSetHeapRegionSize();
    if (this_present_heapRegionSize || that_present_heapRegionSize) {
      if (!(this_present_heapRegionSize && that_present_heapRegionSize))
        return false;
      if (this.heapRegionSize != that.heapRegionSize)
        return false;
    }

    boolean this_present_heapsize = true && this.isSetHeapsize();
    boolean that_present_heapsize = true && that.isSetHeapsize();
    if (this_present_heapsize || that_present_heapsize) {
      if (!(this_present_heapsize && that_present_heapsize))
        return false;
      if (this.heapsize != that.heapsize)
        return false;
    }

    boolean this_present_multiversion = true && this.isSetMultiversion();
    boolean that_present_multiversion = true && that.isSetMultiversion();
    if (this_present_multiversion || that_present_multiversion) {
      if (!(this_present_multiversion && that_present_multiversion))
        return false;
      if (this.multiversion != that.multiversion)
        return false;
    }

    boolean this_present_noWaitDbExclusiveLock = true && this.isSetNoWaitDbExclusiveLock();
    boolean that_present_noWaitDbExclusiveLock = true && that.isSetNoWaitDbExclusiveLock();
    if (this_present_noWaitDbExclusiveLock || that_present_noWaitDbExclusiveLock) {
      if (!(this_present_noWaitDbExclusiveLock && that_present_noWaitDbExclusiveLock))
        return false;
      if (this.noWaitDbExclusiveLock != that.noWaitDbExclusiveLock)
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_queueExtentSize = true && this.isSetQueueExtentSize();
    boolean that_present_queueExtentSize = true && that.isSetQueueExtentSize();
    if (this_present_queueExtentSize || that_present_queueExtentSize) {
      if (!(this_present_queueExtentSize && that_present_queueExtentSize))
        return false;
      if (this.queueExtentSize != that.queueExtentSize)
        return false;
    }

    boolean this_present_queueInOrder = true && this.isSetQueueInOrder();
    boolean that_present_queueInOrder = true && that.isSetQueueInOrder();
    if (this_present_queueInOrder || that_present_queueInOrder) {
      if (!(this_present_queueInOrder && that_present_queueInOrder))
        return false;
      if (this.queueInOrder != that.queueInOrder)
        return false;
    }

    boolean this_present_readOnly = true && this.isSetReadOnly();
    boolean that_present_readOnly = true && that.isSetReadOnly();
    if (this_present_readOnly || that_present_readOnly) {
      if (!(this_present_readOnly && that_present_readOnly))
        return false;
      if (this.readOnly != that.readOnly)
        return false;
    }

    boolean this_present_readUncommitted = true && this.isSetReadUncommitted();
    boolean that_present_readUncommitted = true && that.isSetReadUncommitted();
    if (this_present_readUncommitted || that_present_readUncommitted) {
      if (!(this_present_readUncommitted && that_present_readUncommitted))
        return false;
      if (this.readUncommitted != that.readUncommitted)
        return false;
    }

    boolean this_present_recordLength = true && this.isSetRecordLength();
    boolean that_present_recordLength = true && that.isSetRecordLength();
    if (this_present_recordLength || that_present_recordLength) {
      if (!(this_present_recordLength && that_present_recordLength))
        return false;
      if (this.recordLength != that.recordLength)
        return false;
    }

    boolean this_present_recordPad = true && this.isSetRecordPad();
    boolean that_present_recordPad = true && that.isSetRecordPad();
    if (this_present_recordPad || that_present_recordPad) {
      if (!(this_present_recordPad && that_present_recordPad))
        return false;
      if (this.recordPad != that.recordPad)
        return false;
    }

    boolean this_present_renumbering = true && this.isSetRenumbering();
    boolean that_present_renumbering = true && that.isSetRenumbering();
    if (this_present_renumbering || that_present_renumbering) {
      if (!(this_present_renumbering && that_present_renumbering))
        return false;
      if (this.renumbering != that.renumbering)
        return false;
    }

    boolean this_present_reverseSplitOff = true && this.isSetReverseSplitOff();
    boolean that_present_reverseSplitOff = true && that.isSetReverseSplitOff();
    if (this_present_reverseSplitOff || that_present_reverseSplitOff) {
      if (!(this_present_reverseSplitOff && that_present_reverseSplitOff))
        return false;
      if (this.reverseSplitOff != that.reverseSplitOff)
        return false;
    }

    boolean this_present_sortedDuplicates = true && this.isSetSortedDuplicates();
    boolean that_present_sortedDuplicates = true && that.isSetSortedDuplicates();
    if (this_present_sortedDuplicates || that_present_sortedDuplicates) {
      if (!(this_present_sortedDuplicates && that_present_sortedDuplicates))
        return false;
      if (this.sortedDuplicates != that.sortedDuplicates)
        return false;
    }

    boolean this_present_transactionNotDurable = true && this.isSetTransactionNotDurable();
    boolean that_present_transactionNotDurable = true && that.isSetTransactionNotDurable();
    if (this_present_transactionNotDurable || that_present_transactionNotDurable) {
      if (!(this_present_transactionNotDurable && that_present_transactionNotDurable))
        return false;
      if (this.transactionNotDurable != that.transactionNotDurable)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_unsortedDuplicates = true && this.isSetUnsortedDuplicates();
    boolean that_present_unsortedDuplicates = true && that.isSetUnsortedDuplicates();
    if (this_present_unsortedDuplicates || that_present_unsortedDuplicates) {
      if (!(this_present_unsortedDuplicates && that_present_unsortedDuplicates))
        return false;
      if (this.unsortedDuplicates != that.unsortedDuplicates)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_allowCreate = true && (isSetAllowCreate());
    list.add(present_allowCreate);
    if (present_allowCreate)
      list.add(allowCreate);

    boolean present_blobThreshold = true && (isSetBlobThreshold());
    list.add(present_blobThreshold);
    if (present_blobThreshold)
      list.add(blobThreshold);

    boolean present_btreeMinKey = true && (isSetBtreeMinKey());
    list.add(present_btreeMinKey);
    if (present_btreeMinKey)
      list.add(btreeMinKey);

    boolean present_btreeRecordNumbers = true && (isSetBtreeRecordNumbers());
    list.add(present_btreeRecordNumbers);
    if (present_btreeRecordNumbers)
      list.add(btreeRecordNumbers);

    boolean present_checksum = true && (isSetChecksum());
    list.add(present_checksum);
    if (present_checksum)
      list.add(checksum);

    boolean present_exclusiveCreate = true && (isSetExclusiveCreate());
    list.add(present_exclusiveCreate);
    if (present_exclusiveCreate)
      list.add(exclusiveCreate);

    boolean present_hashFillFactor = true && (isSetHashFillFactor());
    list.add(present_hashFillFactor);
    if (present_hashFillFactor)
      list.add(hashFillFactor);

    boolean present_hashNumElements = true && (isSetHashNumElements());
    list.add(present_hashNumElements);
    if (present_hashNumElements)
      list.add(hashNumElements);

    boolean present_heapRegionSize = true && (isSetHeapRegionSize());
    list.add(present_heapRegionSize);
    if (present_heapRegionSize)
      list.add(heapRegionSize);

    boolean present_heapsize = true && (isSetHeapsize());
    list.add(present_heapsize);
    if (present_heapsize)
      list.add(heapsize);

    boolean present_multiversion = true && (isSetMultiversion());
    list.add(present_multiversion);
    if (present_multiversion)
      list.add(multiversion);

    boolean present_noWaitDbExclusiveLock = true && (isSetNoWaitDbExclusiveLock());
    list.add(present_noWaitDbExclusiveLock);
    if (present_noWaitDbExclusiveLock)
      list.add(noWaitDbExclusiveLock);

    boolean present_pageSize = true && (isSetPageSize());
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_priority = true && (isSetPriority());
    list.add(present_priority);
    if (present_priority)
      list.add(priority.getValue());

    boolean present_queueExtentSize = true && (isSetQueueExtentSize());
    list.add(present_queueExtentSize);
    if (present_queueExtentSize)
      list.add(queueExtentSize);

    boolean present_queueInOrder = true && (isSetQueueInOrder());
    list.add(present_queueInOrder);
    if (present_queueInOrder)
      list.add(queueInOrder);

    boolean present_readOnly = true && (isSetReadOnly());
    list.add(present_readOnly);
    if (present_readOnly)
      list.add(readOnly);

    boolean present_readUncommitted = true && (isSetReadUncommitted());
    list.add(present_readUncommitted);
    if (present_readUncommitted)
      list.add(readUncommitted);

    boolean present_recordLength = true && (isSetRecordLength());
    list.add(present_recordLength);
    if (present_recordLength)
      list.add(recordLength);

    boolean present_recordPad = true && (isSetRecordPad());
    list.add(present_recordPad);
    if (present_recordPad)
      list.add(recordPad);

    boolean present_renumbering = true && (isSetRenumbering());
    list.add(present_renumbering);
    if (present_renumbering)
      list.add(renumbering);

    boolean present_reverseSplitOff = true && (isSetReverseSplitOff());
    list.add(present_reverseSplitOff);
    if (present_reverseSplitOff)
      list.add(reverseSplitOff);

    boolean present_sortedDuplicates = true && (isSetSortedDuplicates());
    list.add(present_sortedDuplicates);
    if (present_sortedDuplicates)
      list.add(sortedDuplicates);

    boolean present_transactionNotDurable = true && (isSetTransactionNotDurable());
    list.add(present_transactionNotDurable);
    if (present_transactionNotDurable)
      list.add(transactionNotDurable);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_unsortedDuplicates = true && (isSetUnsortedDuplicates());
    list.add(present_unsortedDuplicates);
    if (present_unsortedDuplicates)
      list.add(unsortedDuplicates);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDatabaseConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAllowCreate()).compareTo(other.isSetAllowCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowCreate, other.allowCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlobThreshold()).compareTo(other.isSetBlobThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlobThreshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blobThreshold, other.blobThreshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtreeMinKey()).compareTo(other.isSetBtreeMinKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtreeMinKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btreeMinKey, other.btreeMinKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtreeRecordNumbers()).compareTo(other.isSetBtreeRecordNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtreeRecordNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btreeRecordNumbers, other.btreeRecordNumbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChecksum()).compareTo(other.isSetChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checksum, other.checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExclusiveCreate()).compareTo(other.isSetExclusiveCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExclusiveCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclusiveCreate, other.exclusiveCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashFillFactor()).compareTo(other.isSetHashFillFactor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashFillFactor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashFillFactor, other.hashFillFactor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashNumElements()).compareTo(other.isSetHashNumElements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashNumElements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashNumElements, other.hashNumElements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapRegionSize()).compareTo(other.isSetHeapRegionSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapRegionSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapRegionSize, other.heapRegionSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapsize()).compareTo(other.isSetHeapsize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapsize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapsize, other.heapsize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiversion()).compareTo(other.isSetMultiversion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiversion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiversion, other.multiversion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoWaitDbExclusiveLock()).compareTo(other.isSetNoWaitDbExclusiveLock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoWaitDbExclusiveLock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noWaitDbExclusiveLock, other.noWaitDbExclusiveLock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueExtentSize()).compareTo(other.isSetQueueExtentSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueExtentSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueExtentSize, other.queueExtentSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueInOrder()).compareTo(other.isSetQueueInOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueInOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueInOrder, other.queueInOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadOnly()).compareTo(other.isSetReadOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readOnly, other.readOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadUncommitted()).compareTo(other.isSetReadUncommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadUncommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readUncommitted, other.readUncommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordLength()).compareTo(other.isSetRecordLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordLength, other.recordLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordPad()).compareTo(other.isSetRecordPad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordPad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordPad, other.recordPad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRenumbering()).compareTo(other.isSetRenumbering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRenumbering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.renumbering, other.renumbering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReverseSplitOff()).compareTo(other.isSetReverseSplitOff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReverseSplitOff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reverseSplitOff, other.reverseSplitOff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortedDuplicates()).compareTo(other.isSetSortedDuplicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortedDuplicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortedDuplicates, other.sortedDuplicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionNotDurable()).compareTo(other.isSetTransactionNotDurable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionNotDurable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionNotDurable, other.transactionNotDurable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnsortedDuplicates()).compareTo(other.isSetUnsortedDuplicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnsortedDuplicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unsortedDuplicates, other.unsortedDuplicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDatabaseConfig(");
    boolean first = true;

    if (isSetAllowCreate()) {
      sb.append("allowCreate:");
      sb.append(this.allowCreate);
      first = false;
    }
    if (isSetBlobThreshold()) {
      if (!first) sb.append(", ");
      sb.append("blobThreshold:");
      sb.append(this.blobThreshold);
      first = false;
    }
    if (isSetBtreeMinKey()) {
      if (!first) sb.append(", ");
      sb.append("btreeMinKey:");
      sb.append(this.btreeMinKey);
      first = false;
    }
    if (isSetBtreeRecordNumbers()) {
      if (!first) sb.append(", ");
      sb.append("btreeRecordNumbers:");
      sb.append(this.btreeRecordNumbers);
      first = false;
    }
    if (isSetChecksum()) {
      if (!first) sb.append(", ");
      sb.append("checksum:");
      sb.append(this.checksum);
      first = false;
    }
    if (isSetExclusiveCreate()) {
      if (!first) sb.append(", ");
      sb.append("exclusiveCreate:");
      sb.append(this.exclusiveCreate);
      first = false;
    }
    if (isSetHashFillFactor()) {
      if (!first) sb.append(", ");
      sb.append("hashFillFactor:");
      sb.append(this.hashFillFactor);
      first = false;
    }
    if (isSetHashNumElements()) {
      if (!first) sb.append(", ");
      sb.append("hashNumElements:");
      sb.append(this.hashNumElements);
      first = false;
    }
    if (isSetHeapRegionSize()) {
      if (!first) sb.append(", ");
      sb.append("heapRegionSize:");
      sb.append(this.heapRegionSize);
      first = false;
    }
    if (isSetHeapsize()) {
      if (!first) sb.append(", ");
      sb.append("heapsize:");
      sb.append(this.heapsize);
      first = false;
    }
    if (isSetMultiversion()) {
      if (!first) sb.append(", ");
      sb.append("multiversion:");
      sb.append(this.multiversion);
      first = false;
    }
    if (isSetNoWaitDbExclusiveLock()) {
      if (!first) sb.append(", ");
      sb.append("noWaitDbExclusiveLock:");
      sb.append(this.noWaitDbExclusiveLock);
      first = false;
    }
    if (isSetPageSize()) {
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetQueueExtentSize()) {
      if (!first) sb.append(", ");
      sb.append("queueExtentSize:");
      sb.append(this.queueExtentSize);
      first = false;
    }
    if (isSetQueueInOrder()) {
      if (!first) sb.append(", ");
      sb.append("queueInOrder:");
      sb.append(this.queueInOrder);
      first = false;
    }
    if (isSetReadOnly()) {
      if (!first) sb.append(", ");
      sb.append("readOnly:");
      sb.append(this.readOnly);
      first = false;
    }
    if (isSetReadUncommitted()) {
      if (!first) sb.append(", ");
      sb.append("readUncommitted:");
      sb.append(this.readUncommitted);
      first = false;
    }
    if (isSetRecordLength()) {
      if (!first) sb.append(", ");
      sb.append("recordLength:");
      sb.append(this.recordLength);
      first = false;
    }
    if (isSetRecordPad()) {
      if (!first) sb.append(", ");
      sb.append("recordPad:");
      sb.append(this.recordPad);
      first = false;
    }
    if (isSetRenumbering()) {
      if (!first) sb.append(", ");
      sb.append("renumbering:");
      sb.append(this.renumbering);
      first = false;
    }
    if (isSetReverseSplitOff()) {
      if (!first) sb.append(", ");
      sb.append("reverseSplitOff:");
      sb.append(this.reverseSplitOff);
      first = false;
    }
    if (isSetSortedDuplicates()) {
      if (!first) sb.append(", ");
      sb.append("sortedDuplicates:");
      sb.append(this.sortedDuplicates);
      first = false;
    }
    if (isSetTransactionNotDurable()) {
      if (!first) sb.append(", ");
      sb.append("transactionNotDurable:");
      sb.append(this.transactionNotDurable);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetUnsortedDuplicates()) {
      if (!first) sb.append(", ");
      sb.append("unsortedDuplicates:");
      sb.append(this.unsortedDuplicates);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDatabaseConfigStandardSchemeFactory implements SchemeFactory {
    public TDatabaseConfigStandardScheme getScheme() {
      return new TDatabaseConfigStandardScheme();
    }
  }

  private static class TDatabaseConfigStandardScheme extends StandardScheme<TDatabaseConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDatabaseConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALLOW_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowCreate = iprot.readBool();
              struct.setAllowCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOB_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blobThreshold = iprot.readI32();
              struct.setBlobThresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BTREE_MIN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.btreeMinKey = iprot.readI32();
              struct.setBtreeMinKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BTREE_RECORD_NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.btreeRecordNumbers = iprot.readBool();
              struct.setBtreeRecordNumbersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checksum = iprot.readBool();
              struct.setChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXCLUSIVE_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.exclusiveCreate = iprot.readBool();
              struct.setExclusiveCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HASH_FILL_FACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hashFillFactor = iprot.readI32();
              struct.setHashFillFactorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HASH_NUM_ELEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hashNumElements = iprot.readI32();
              struct.setHashNumElementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HEAP_REGION_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heapRegionSize = iprot.readI32();
              struct.setHeapRegionSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HEAPSIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.heapsize = iprot.readI64();
              struct.setHeapsizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MULTIVERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.multiversion = iprot.readBool();
              struct.setMultiversionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NO_WAIT_DB_EXCLUSIVE_LOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.noWaitDbExclusiveLock = iprot.readBool();
              struct.setNoWaitDbExclusiveLockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = com.sleepycat.thrift.TCachePriority.findByValue(iprot.readI32());
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // QUEUE_EXTENT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueExtentSize = iprot.readI32();
              struct.setQueueExtentSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // QUEUE_IN_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.queueInOrder = iprot.readBool();
              struct.setQueueInOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // READ_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.readOnly = iprot.readBool();
              struct.setReadOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // READ_UNCOMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.readUncommitted = iprot.readBool();
              struct.setReadUncommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RECORD_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordLength = iprot.readI32();
              struct.setRecordLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RECORD_PAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordPad = iprot.readI32();
              struct.setRecordPadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RENUMBERING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.renumbering = iprot.readBool();
              struct.setRenumberingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REVERSE_SPLIT_OFF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reverseSplitOff = iprot.readBool();
              struct.setReverseSplitOffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SORTED_DUPLICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sortedDuplicates = iprot.readBool();
              struct.setSortedDuplicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRANSACTION_NOT_DURABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.transactionNotDurable = iprot.readBool();
              struct.setTransactionNotDurableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.sleepycat.thrift.TDatabaseType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UNSORTED_DUPLICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.unsortedDuplicates = iprot.readBool();
              struct.setUnsortedDuplicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDatabaseConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAllowCreate()) {
        oprot.writeFieldBegin(ALLOW_CREATE_FIELD_DESC);
        oprot.writeBool(struct.allowCreate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBlobThreshold()) {
        oprot.writeFieldBegin(BLOB_THRESHOLD_FIELD_DESC);
        oprot.writeI32(struct.blobThreshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBtreeMinKey()) {
        oprot.writeFieldBegin(BTREE_MIN_KEY_FIELD_DESC);
        oprot.writeI32(struct.btreeMinKey);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBtreeRecordNumbers()) {
        oprot.writeFieldBegin(BTREE_RECORD_NUMBERS_FIELD_DESC);
        oprot.writeBool(struct.btreeRecordNumbers);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChecksum()) {
        oprot.writeFieldBegin(CHECKSUM_FIELD_DESC);
        oprot.writeBool(struct.checksum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExclusiveCreate()) {
        oprot.writeFieldBegin(EXCLUSIVE_CREATE_FIELD_DESC);
        oprot.writeBool(struct.exclusiveCreate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHashFillFactor()) {
        oprot.writeFieldBegin(HASH_FILL_FACTOR_FIELD_DESC);
        oprot.writeI32(struct.hashFillFactor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHashNumElements()) {
        oprot.writeFieldBegin(HASH_NUM_ELEMENTS_FIELD_DESC);
        oprot.writeI32(struct.hashNumElements);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeapRegionSize()) {
        oprot.writeFieldBegin(HEAP_REGION_SIZE_FIELD_DESC);
        oprot.writeI32(struct.heapRegionSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeapsize()) {
        oprot.writeFieldBegin(HEAPSIZE_FIELD_DESC);
        oprot.writeI64(struct.heapsize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMultiversion()) {
        oprot.writeFieldBegin(MULTIVERSION_FIELD_DESC);
        oprot.writeBool(struct.multiversion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNoWaitDbExclusiveLock()) {
        oprot.writeFieldBegin(NO_WAIT_DB_EXCLUSIVE_LOCK_FIELD_DESC);
        oprot.writeBool(struct.noWaitDbExclusiveLock);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageSize()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeI32(struct.priority.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetQueueExtentSize()) {
        oprot.writeFieldBegin(QUEUE_EXTENT_SIZE_FIELD_DESC);
        oprot.writeI32(struct.queueExtentSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueueInOrder()) {
        oprot.writeFieldBegin(QUEUE_IN_ORDER_FIELD_DESC);
        oprot.writeBool(struct.queueInOrder);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadOnly()) {
        oprot.writeFieldBegin(READ_ONLY_FIELD_DESC);
        oprot.writeBool(struct.readOnly);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadUncommitted()) {
        oprot.writeFieldBegin(READ_UNCOMMITTED_FIELD_DESC);
        oprot.writeBool(struct.readUncommitted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecordLength()) {
        oprot.writeFieldBegin(RECORD_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.recordLength);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecordPad()) {
        oprot.writeFieldBegin(RECORD_PAD_FIELD_DESC);
        oprot.writeI32(struct.recordPad);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRenumbering()) {
        oprot.writeFieldBegin(RENUMBERING_FIELD_DESC);
        oprot.writeBool(struct.renumbering);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReverseSplitOff()) {
        oprot.writeFieldBegin(REVERSE_SPLIT_OFF_FIELD_DESC);
        oprot.writeBool(struct.reverseSplitOff);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSortedDuplicates()) {
        oprot.writeFieldBegin(SORTED_DUPLICATES_FIELD_DESC);
        oprot.writeBool(struct.sortedDuplicates);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTransactionNotDurable()) {
        oprot.writeFieldBegin(TRANSACTION_NOT_DURABLE_FIELD_DESC);
        oprot.writeBool(struct.transactionNotDurable);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUnsortedDuplicates()) {
        oprot.writeFieldBegin(UNSORTED_DUPLICATES_FIELD_DESC);
        oprot.writeBool(struct.unsortedDuplicates);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDatabaseConfigTupleSchemeFactory implements SchemeFactory {
    public TDatabaseConfigTupleScheme getScheme() {
      return new TDatabaseConfigTupleScheme();
    }
  }

  private static class TDatabaseConfigTupleScheme extends TupleScheme<TDatabaseConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDatabaseConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAllowCreate()) {
        optionals.set(0);
      }
      if (struct.isSetBlobThreshold()) {
        optionals.set(1);
      }
      if (struct.isSetBtreeMinKey()) {
        optionals.set(2);
      }
      if (struct.isSetBtreeRecordNumbers()) {
        optionals.set(3);
      }
      if (struct.isSetChecksum()) {
        optionals.set(4);
      }
      if (struct.isSetExclusiveCreate()) {
        optionals.set(5);
      }
      if (struct.isSetHashFillFactor()) {
        optionals.set(6);
      }
      if (struct.isSetHashNumElements()) {
        optionals.set(7);
      }
      if (struct.isSetHeapRegionSize()) {
        optionals.set(8);
      }
      if (struct.isSetHeapsize()) {
        optionals.set(9);
      }
      if (struct.isSetMultiversion()) {
        optionals.set(10);
      }
      if (struct.isSetNoWaitDbExclusiveLock()) {
        optionals.set(11);
      }
      if (struct.isSetPageSize()) {
        optionals.set(12);
      }
      if (struct.isSetPriority()) {
        optionals.set(13);
      }
      if (struct.isSetQueueExtentSize()) {
        optionals.set(14);
      }
      if (struct.isSetQueueInOrder()) {
        optionals.set(15);
      }
      if (struct.isSetReadOnly()) {
        optionals.set(16);
      }
      if (struct.isSetReadUncommitted()) {
        optionals.set(17);
      }
      if (struct.isSetRecordLength()) {
        optionals.set(18);
      }
      if (struct.isSetRecordPad()) {
        optionals.set(19);
      }
      if (struct.isSetRenumbering()) {
        optionals.set(20);
      }
      if (struct.isSetReverseSplitOff()) {
        optionals.set(21);
      }
      if (struct.isSetSortedDuplicates()) {
        optionals.set(22);
      }
      if (struct.isSetTransactionNotDurable()) {
        optionals.set(23);
      }
      if (struct.isSetType()) {
        optionals.set(24);
      }
      if (struct.isSetUnsortedDuplicates()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetAllowCreate()) {
        oprot.writeBool(struct.allowCreate);
      }
      if (struct.isSetBlobThreshold()) {
        oprot.writeI32(struct.blobThreshold);
      }
      if (struct.isSetBtreeMinKey()) {
        oprot.writeI32(struct.btreeMinKey);
      }
      if (struct.isSetBtreeRecordNumbers()) {
        oprot.writeBool(struct.btreeRecordNumbers);
      }
      if (struct.isSetChecksum()) {
        oprot.writeBool(struct.checksum);
      }
      if (struct.isSetExclusiveCreate()) {
        oprot.writeBool(struct.exclusiveCreate);
      }
      if (struct.isSetHashFillFactor()) {
        oprot.writeI32(struct.hashFillFactor);
      }
      if (struct.isSetHashNumElements()) {
        oprot.writeI32(struct.hashNumElements);
      }
      if (struct.isSetHeapRegionSize()) {
        oprot.writeI32(struct.heapRegionSize);
      }
      if (struct.isSetHeapsize()) {
        oprot.writeI64(struct.heapsize);
      }
      if (struct.isSetMultiversion()) {
        oprot.writeBool(struct.multiversion);
      }
      if (struct.isSetNoWaitDbExclusiveLock()) {
        oprot.writeBool(struct.noWaitDbExclusiveLock);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority.getValue());
      }
      if (struct.isSetQueueExtentSize()) {
        oprot.writeI32(struct.queueExtentSize);
      }
      if (struct.isSetQueueInOrder()) {
        oprot.writeBool(struct.queueInOrder);
      }
      if (struct.isSetReadOnly()) {
        oprot.writeBool(struct.readOnly);
      }
      if (struct.isSetReadUncommitted()) {
        oprot.writeBool(struct.readUncommitted);
      }
      if (struct.isSetRecordLength()) {
        oprot.writeI32(struct.recordLength);
      }
      if (struct.isSetRecordPad()) {
        oprot.writeI32(struct.recordPad);
      }
      if (struct.isSetRenumbering()) {
        oprot.writeBool(struct.renumbering);
      }
      if (struct.isSetReverseSplitOff()) {
        oprot.writeBool(struct.reverseSplitOff);
      }
      if (struct.isSetSortedDuplicates()) {
        oprot.writeBool(struct.sortedDuplicates);
      }
      if (struct.isSetTransactionNotDurable()) {
        oprot.writeBool(struct.transactionNotDurable);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetUnsortedDuplicates()) {
        oprot.writeBool(struct.unsortedDuplicates);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDatabaseConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.allowCreate = iprot.readBool();
        struct.setAllowCreateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.blobThreshold = iprot.readI32();
        struct.setBlobThresholdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.btreeMinKey = iprot.readI32();
        struct.setBtreeMinKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.btreeRecordNumbers = iprot.readBool();
        struct.setBtreeRecordNumbersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.checksum = iprot.readBool();
        struct.setChecksumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.exclusiveCreate = iprot.readBool();
        struct.setExclusiveCreateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hashFillFactor = iprot.readI32();
        struct.setHashFillFactorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hashNumElements = iprot.readI32();
        struct.setHashNumElementsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.heapRegionSize = iprot.readI32();
        struct.setHeapRegionSizeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.heapsize = iprot.readI64();
        struct.setHeapsizeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.multiversion = iprot.readBool();
        struct.setMultiversionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.noWaitDbExclusiveLock = iprot.readBool();
        struct.setNoWaitDbExclusiveLockIsSet(true);
      }
      if (incoming.get(12)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.priority = com.sleepycat.thrift.TCachePriority.findByValue(iprot.readI32());
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(14)) {
        struct.queueExtentSize = iprot.readI32();
        struct.setQueueExtentSizeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.queueInOrder = iprot.readBool();
        struct.setQueueInOrderIsSet(true);
      }
      if (incoming.get(16)) {
        struct.readOnly = iprot.readBool();
        struct.setReadOnlyIsSet(true);
      }
      if (incoming.get(17)) {
        struct.readUncommitted = iprot.readBool();
        struct.setReadUncommittedIsSet(true);
      }
      if (incoming.get(18)) {
        struct.recordLength = iprot.readI32();
        struct.setRecordLengthIsSet(true);
      }
      if (incoming.get(19)) {
        struct.recordPad = iprot.readI32();
        struct.setRecordPadIsSet(true);
      }
      if (incoming.get(20)) {
        struct.renumbering = iprot.readBool();
        struct.setRenumberingIsSet(true);
      }
      if (incoming.get(21)) {
        struct.reverseSplitOff = iprot.readBool();
        struct.setReverseSplitOffIsSet(true);
      }
      if (incoming.get(22)) {
        struct.sortedDuplicates = iprot.readBool();
        struct.setSortedDuplicatesIsSet(true);
      }
      if (incoming.get(23)) {
        struct.transactionNotDurable = iprot.readBool();
        struct.setTransactionNotDurableIsSet(true);
      }
      if (incoming.get(24)) {
        struct.type = com.sleepycat.thrift.TDatabaseType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.unsortedDuplicates = iprot.readBool();
        struct.setUnsortedDuplicatesIsSet(true);
      }
    }
  }

}

