/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class BdbService {

  /**
   * ***********************
   *   Service Definitions  *
   * ***********************
   */
  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public TProtocolVersionTestResult isProtocolVersionSupported(String clientVersion) throws org.apache.thrift.TException;

    public String getBdbVersion() throws org.apache.thrift.TException;

    public void shutdown() throws org.apache.thrift.TException;

    public TEnvironment openEnvironment(String homeDir, TEnvironmentConfig envConfig) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void closeEnvironmentHandle(TEnvironment env) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void closeEnvironmentHandles(String homeDir, long minIdleInMilli) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void deleteEnvironmentAndDatabases(String homeDir, boolean force) throws TFileNotFoundException, TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TEnvironmentConfig getEnvironmentConfig(TEnvironment env) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void setEnvironmentConfig(TEnvironment env, TEnvironmentConfig envConfig) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void removeDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, boolean force) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void renameDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, String newName, boolean force) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void checkpoint(TEnvironment env, int kbytes, int min, boolean force) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TDatabase openDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabaseConfig dbConfig) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TDatabase openSecondaryDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabase primaryDb, TSecondaryDatabaseConfig sdbConfig) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void closeDatabaseHandle(TDatabase db) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void closeDatabaseHandles(String envHomeDir, String fileName, String databaseName, long minIdleInMilli) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TDatabaseConfig getDatabaseConfig(TDatabase db) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void setDatabaseConfig(TDatabase db, TDatabaseConfig dbConfig) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TGetResult dbGet(TDatabase db, TTransaction txn, TKeyData keyData, TDbGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TGetWithPKeyResult dbGetWithPKey(TDatabase sdb, TTransaction txn, TKeyDataWithPKey keyPKey, TDbGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TPutResult dbPut(TDatabase db, TTransaction txn, List<TKeyDataWithSecondaryKeys> pairs, TDbPutConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TOperationStatus dbDelete(TDatabase db, TTransaction txn, List<TKeyData> keyOrPairs) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TOperationStatus dbKeyExists(TDatabase db, TTransaction txn, TDbt key) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TKeyRangeResult dbKeyRange(TDatabase db, TTransaction txn, TDbt key) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TCompactResult dbCompact(TDatabase db, TTransaction txn, TDbt start, TDbt stop, TCompactConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public int dbTruncate(TDatabase db, TTransaction txn, boolean countRecords) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TCursor openCursor(TDatabase db, TTransaction txn, TCursorConfig cursorConfig) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void closeCursorHandle(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TCursorConfig getCursorConfig(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TCachePriority getCursorCachePriority(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void setCursorCachePriority(TCursor cursor, TCachePriority priority) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TGetResult cursorGet(TCursor cursor, TKeyData keyData, TCursorGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TGetWithPKeyResult cursorGetWithPKey(TCursor cursor, TKeyDataWithPKey keyPKey, TCursorGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TPutResult cursorPut(TCursor cursor, TKeyDataWithSecondaryKeys pair, TCursorPutConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TOperationStatus cursorDelete(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TCursor cursorDup(TCursor cursor, boolean samePos) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public short cursorCompare(TCursor cursor1, TCursor cursor2) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public int cursorCount(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TJoinCursor openJoinCursor(TDatabase pdb, List<TCursor> scursors, boolean sortCursors) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void closeJoinCursorHandle(TJoinCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TGetResult joinCursorGet(TJoinCursor cursor, TJoinCursorGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TTransaction beginTransaction(TEnvironment env, TTransaction parent, TTransactionConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void txnAbort(TTransaction txn) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void txnCommit(TTransaction txn, TDurabilityPolicy durability) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public int txnGetPriority(TTransaction txn) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void txnSetPriority(TTransaction txn, int priority) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TSequence openSequence(TDatabase db, TTransaction txn, TDbt key, TSequenceConfig config) throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void closeSequenceHandle(TSequence seq) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public void removeSequence(TDatabase db, TTransaction txn, TDbt key, boolean isAutoCommitNoSync, boolean force) throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public long sequenceGet(TSequence seq, TTransaction txn, int delta) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TEnvStatResult getEnvStatistics(TEnvironment env, TEnvStatConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

    public TDatabaseStatResult getDatabaseStatistics(TDatabase db, TTransaction txn, boolean fast) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isProtocolVersionSupported(String clientVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBdbVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openEnvironment(String homeDir, TEnvironmentConfig envConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeEnvironmentHandle(TEnvironment env, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeEnvironmentHandles(String homeDir, long minIdleInMilli, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteEnvironmentAndDatabases(String homeDir, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEnvironmentConfig(TEnvironment env, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setEnvironmentConfig(TEnvironment env, TEnvironmentConfig envConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void renameDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, String newName, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkpoint(TEnvironment env, int kbytes, int min, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabaseConfig dbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openSecondaryDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabase primaryDb, TSecondaryDatabaseConfig sdbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeDatabaseHandle(TDatabase db, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeDatabaseHandles(String envHomeDir, String fileName, String databaseName, long minIdleInMilli, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDatabaseConfig(TDatabase db, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setDatabaseConfig(TDatabase db, TDatabaseConfig dbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbGet(TDatabase db, TTransaction txn, TKeyData keyData, TDbGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbGetWithPKey(TDatabase sdb, TTransaction txn, TKeyDataWithPKey keyPKey, TDbGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbPut(TDatabase db, TTransaction txn, List<TKeyDataWithSecondaryKeys> pairs, TDbPutConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbDelete(TDatabase db, TTransaction txn, List<TKeyData> keyOrPairs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbKeyExists(TDatabase db, TTransaction txn, TDbt key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbKeyRange(TDatabase db, TTransaction txn, TDbt key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbCompact(TDatabase db, TTransaction txn, TDbt start, TDbt stop, TCompactConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dbTruncate(TDatabase db, TTransaction txn, boolean countRecords, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openCursor(TDatabase db, TTransaction txn, TCursorConfig cursorConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeCursorHandle(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCursorConfig(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCursorCachePriority(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setCursorCachePriority(TCursor cursor, TCachePriority priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cursorGet(TCursor cursor, TKeyData keyData, TCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cursorGetWithPKey(TCursor cursor, TKeyDataWithPKey keyPKey, TCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cursorPut(TCursor cursor, TKeyDataWithSecondaryKeys pair, TCursorPutConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cursorDelete(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cursorDup(TCursor cursor, boolean samePos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cursorCompare(TCursor cursor1, TCursor cursor2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cursorCount(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openJoinCursor(TDatabase pdb, List<TCursor> scursors, boolean sortCursors, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeJoinCursorHandle(TJoinCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void joinCursorGet(TJoinCursor cursor, TJoinCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void beginTransaction(TEnvironment env, TTransaction parent, TTransactionConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void txnAbort(TTransaction txn, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void txnCommit(TTransaction txn, TDurabilityPolicy durability, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void txnGetPriority(TTransaction txn, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void txnSetPriority(TTransaction txn, int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openSequence(TDatabase db, TTransaction txn, TDbt key, TSequenceConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeSequenceHandle(TSequence seq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeSequence(TDatabase db, TTransaction txn, TDbt key, boolean isAutoCommitNoSync, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sequenceGet(TSequence seq, TTransaction txn, int delta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEnvStatistics(TEnvironment env, TEnvStatConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDatabaseStatistics(TDatabase db, TTransaction txn, boolean fast, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public TProtocolVersionTestResult isProtocolVersionSupported(String clientVersion) throws org.apache.thrift.TException
    {
      send_isProtocolVersionSupported(clientVersion);
      return recv_isProtocolVersionSupported();
    }

    public void send_isProtocolVersionSupported(String clientVersion) throws org.apache.thrift.TException
    {
      isProtocolVersionSupported_args args = new isProtocolVersionSupported_args();
      args.setClientVersion(clientVersion);
      sendBase("isProtocolVersionSupported", args);
    }

    public TProtocolVersionTestResult recv_isProtocolVersionSupported() throws org.apache.thrift.TException
    {
      isProtocolVersionSupported_result result = new isProtocolVersionSupported_result();
      receiveBase(result, "isProtocolVersionSupported");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isProtocolVersionSupported failed: unknown result");
    }

    public String getBdbVersion() throws org.apache.thrift.TException
    {
      send_getBdbVersion();
      return recv_getBdbVersion();
    }

    public void send_getBdbVersion() throws org.apache.thrift.TException
    {
      getBdbVersion_args args = new getBdbVersion_args();
      sendBase("getBdbVersion", args);
    }

    public String recv_getBdbVersion() throws org.apache.thrift.TException
    {
      getBdbVersion_result result = new getBdbVersion_result();
      receiveBase(result, "getBdbVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBdbVersion failed: unknown result");
    }

    public void shutdown() throws org.apache.thrift.TException
    {
      send_shutdown();
    }

    public void send_shutdown() throws org.apache.thrift.TException
    {
      shutdown_args args = new shutdown_args();
      sendBase("shutdown", args);
    }

    public TEnvironment openEnvironment(String homeDir, TEnvironmentConfig envConfig) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_openEnvironment(homeDir, envConfig);
      return recv_openEnvironment();
    }

    public void send_openEnvironment(String homeDir, TEnvironmentConfig envConfig) throws org.apache.thrift.TException
    {
      openEnvironment_args args = new openEnvironment_args();
      args.setHomeDir(homeDir);
      args.setEnvConfig(envConfig);
      sendBase("openEnvironment", args);
    }

    public TEnvironment recv_openEnvironment() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      openEnvironment_result result = new openEnvironment_result();
      receiveBase(result, "openEnvironment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ioe != null) {
        throw result.ioe;
      }
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openEnvironment failed: unknown result");
    }

    public void closeEnvironmentHandle(TEnvironment env) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_closeEnvironmentHandle(env);
      recv_closeEnvironmentHandle();
    }

    public void send_closeEnvironmentHandle(TEnvironment env) throws org.apache.thrift.TException
    {
      closeEnvironmentHandle_args args = new closeEnvironmentHandle_args();
      args.setEnv(env);
      sendBase("closeEnvironmentHandle", args);
    }

    public void recv_closeEnvironmentHandle() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      closeEnvironmentHandle_result result = new closeEnvironmentHandle_result();
      receiveBase(result, "closeEnvironmentHandle");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void closeEnvironmentHandles(String homeDir, long minIdleInMilli) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_closeEnvironmentHandles(homeDir, minIdleInMilli);
      recv_closeEnvironmentHandles();
    }

    public void send_closeEnvironmentHandles(String homeDir, long minIdleInMilli) throws org.apache.thrift.TException
    {
      closeEnvironmentHandles_args args = new closeEnvironmentHandles_args();
      args.setHomeDir(homeDir);
      args.setMinIdleInMilli(minIdleInMilli);
      sendBase("closeEnvironmentHandles", args);
    }

    public void recv_closeEnvironmentHandles() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      closeEnvironmentHandles_result result = new closeEnvironmentHandles_result();
      receiveBase(result, "closeEnvironmentHandles");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void deleteEnvironmentAndDatabases(String homeDir, boolean force) throws TFileNotFoundException, TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_deleteEnvironmentAndDatabases(homeDir, force);
      recv_deleteEnvironmentAndDatabases();
    }

    public void send_deleteEnvironmentAndDatabases(String homeDir, boolean force) throws org.apache.thrift.TException
    {
      deleteEnvironmentAndDatabases_args args = new deleteEnvironmentAndDatabases_args();
      args.setHomeDir(homeDir);
      args.setForce(force);
      sendBase("deleteEnvironmentAndDatabases", args);
    }

    public void recv_deleteEnvironmentAndDatabases() throws TFileNotFoundException, TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      deleteEnvironmentAndDatabases_result result = new deleteEnvironmentAndDatabases_result();
      receiveBase(result, "deleteEnvironmentAndDatabases");
      if (result.fe != null) {
        throw result.fe;
      }
      if (result.ioe != null) {
        throw result.ioe;
      }
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TEnvironmentConfig getEnvironmentConfig(TEnvironment env) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_getEnvironmentConfig(env);
      return recv_getEnvironmentConfig();
    }

    public void send_getEnvironmentConfig(TEnvironment env) throws org.apache.thrift.TException
    {
      getEnvironmentConfig_args args = new getEnvironmentConfig_args();
      args.setEnv(env);
      sendBase("getEnvironmentConfig", args);
    }

    public TEnvironmentConfig recv_getEnvironmentConfig() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      getEnvironmentConfig_result result = new getEnvironmentConfig_result();
      receiveBase(result, "getEnvironmentConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEnvironmentConfig failed: unknown result");
    }

    public void setEnvironmentConfig(TEnvironment env, TEnvironmentConfig envConfig) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_setEnvironmentConfig(env, envConfig);
      recv_setEnvironmentConfig();
    }

    public void send_setEnvironmentConfig(TEnvironment env, TEnvironmentConfig envConfig) throws org.apache.thrift.TException
    {
      setEnvironmentConfig_args args = new setEnvironmentConfig_args();
      args.setEnv(env);
      args.setEnvConfig(envConfig);
      sendBase("setEnvironmentConfig", args);
    }

    public void recv_setEnvironmentConfig() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      setEnvironmentConfig_result result = new setEnvironmentConfig_result();
      receiveBase(result, "setEnvironmentConfig");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void removeDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, boolean force) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_removeDatabase(env, txn, fileName, databaseName, force);
      recv_removeDatabase();
    }

    public void send_removeDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, boolean force) throws org.apache.thrift.TException
    {
      removeDatabase_args args = new removeDatabase_args();
      args.setEnv(env);
      args.setTxn(txn);
      args.setFileName(fileName);
      args.setDatabaseName(databaseName);
      args.setForce(force);
      sendBase("removeDatabase", args);
    }

    public void recv_removeDatabase() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      removeDatabase_result result = new removeDatabase_result();
      receiveBase(result, "removeDatabase");
      if (result.ioe != null) {
        throw result.ioe;
      }
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void renameDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, String newName, boolean force) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_renameDatabase(env, txn, fileName, databaseName, newName, force);
      recv_renameDatabase();
    }

    public void send_renameDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, String newName, boolean force) throws org.apache.thrift.TException
    {
      renameDatabase_args args = new renameDatabase_args();
      args.setEnv(env);
      args.setTxn(txn);
      args.setFileName(fileName);
      args.setDatabaseName(databaseName);
      args.setNewName(newName);
      args.setForce(force);
      sendBase("renameDatabase", args);
    }

    public void recv_renameDatabase() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      renameDatabase_result result = new renameDatabase_result();
      receiveBase(result, "renameDatabase");
      if (result.ioe != null) {
        throw result.ioe;
      }
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void checkpoint(TEnvironment env, int kbytes, int min, boolean force) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_checkpoint(env, kbytes, min, force);
      recv_checkpoint();
    }

    public void send_checkpoint(TEnvironment env, int kbytes, int min, boolean force) throws org.apache.thrift.TException
    {
      checkpoint_args args = new checkpoint_args();
      args.setEnv(env);
      args.setKbytes(kbytes);
      args.setMin(min);
      args.setForce(force);
      sendBase("checkpoint", args);
    }

    public void recv_checkpoint() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      checkpoint_result result = new checkpoint_result();
      receiveBase(result, "checkpoint");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TDatabase openDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabaseConfig dbConfig) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_openDatabase(env, txn, fileName, databaseName, dbConfig);
      return recv_openDatabase();
    }

    public void send_openDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabaseConfig dbConfig) throws org.apache.thrift.TException
    {
      openDatabase_args args = new openDatabase_args();
      args.setEnv(env);
      args.setTxn(txn);
      args.setFileName(fileName);
      args.setDatabaseName(databaseName);
      args.setDbConfig(dbConfig);
      sendBase("openDatabase", args);
    }

    public TDatabase recv_openDatabase() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      openDatabase_result result = new openDatabase_result();
      receiveBase(result, "openDatabase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ioe != null) {
        throw result.ioe;
      }
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openDatabase failed: unknown result");
    }

    public TDatabase openSecondaryDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabase primaryDb, TSecondaryDatabaseConfig sdbConfig) throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_openSecondaryDatabase(env, txn, fileName, databaseName, primaryDb, sdbConfig);
      return recv_openSecondaryDatabase();
    }

    public void send_openSecondaryDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabase primaryDb, TSecondaryDatabaseConfig sdbConfig) throws org.apache.thrift.TException
    {
      openSecondaryDatabase_args args = new openSecondaryDatabase_args();
      args.setEnv(env);
      args.setTxn(txn);
      args.setFileName(fileName);
      args.setDatabaseName(databaseName);
      args.setPrimaryDb(primaryDb);
      args.setSdbConfig(sdbConfig);
      sendBase("openSecondaryDatabase", args);
    }

    public TDatabase recv_openSecondaryDatabase() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      openSecondaryDatabase_result result = new openSecondaryDatabase_result();
      receiveBase(result, "openSecondaryDatabase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ioe != null) {
        throw result.ioe;
      }
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openSecondaryDatabase failed: unknown result");
    }

    public void closeDatabaseHandle(TDatabase db) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_closeDatabaseHandle(db);
      recv_closeDatabaseHandle();
    }

    public void send_closeDatabaseHandle(TDatabase db) throws org.apache.thrift.TException
    {
      closeDatabaseHandle_args args = new closeDatabaseHandle_args();
      args.setDb(db);
      sendBase("closeDatabaseHandle", args);
    }

    public void recv_closeDatabaseHandle() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      closeDatabaseHandle_result result = new closeDatabaseHandle_result();
      receiveBase(result, "closeDatabaseHandle");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void closeDatabaseHandles(String envHomeDir, String fileName, String databaseName, long minIdleInMilli) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_closeDatabaseHandles(envHomeDir, fileName, databaseName, minIdleInMilli);
      recv_closeDatabaseHandles();
    }

    public void send_closeDatabaseHandles(String envHomeDir, String fileName, String databaseName, long minIdleInMilli) throws org.apache.thrift.TException
    {
      closeDatabaseHandles_args args = new closeDatabaseHandles_args();
      args.setEnvHomeDir(envHomeDir);
      args.setFileName(fileName);
      args.setDatabaseName(databaseName);
      args.setMinIdleInMilli(minIdleInMilli);
      sendBase("closeDatabaseHandles", args);
    }

    public void recv_closeDatabaseHandles() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      closeDatabaseHandles_result result = new closeDatabaseHandles_result();
      receiveBase(result, "closeDatabaseHandles");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TDatabaseConfig getDatabaseConfig(TDatabase db) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_getDatabaseConfig(db);
      return recv_getDatabaseConfig();
    }

    public void send_getDatabaseConfig(TDatabase db) throws org.apache.thrift.TException
    {
      getDatabaseConfig_args args = new getDatabaseConfig_args();
      args.setDb(db);
      sendBase("getDatabaseConfig", args);
    }

    public TDatabaseConfig recv_getDatabaseConfig() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      getDatabaseConfig_result result = new getDatabaseConfig_result();
      receiveBase(result, "getDatabaseConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDatabaseConfig failed: unknown result");
    }

    public void setDatabaseConfig(TDatabase db, TDatabaseConfig dbConfig) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_setDatabaseConfig(db, dbConfig);
      recv_setDatabaseConfig();
    }

    public void send_setDatabaseConfig(TDatabase db, TDatabaseConfig dbConfig) throws org.apache.thrift.TException
    {
      setDatabaseConfig_args args = new setDatabaseConfig_args();
      args.setDb(db);
      args.setDbConfig(dbConfig);
      sendBase("setDatabaseConfig", args);
    }

    public void recv_setDatabaseConfig() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      setDatabaseConfig_result result = new setDatabaseConfig_result();
      receiveBase(result, "setDatabaseConfig");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TGetResult dbGet(TDatabase db, TTransaction txn, TKeyData keyData, TDbGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbGet(db, txn, keyData, config);
      return recv_dbGet();
    }

    public void send_dbGet(TDatabase db, TTransaction txn, TKeyData keyData, TDbGetConfig config) throws org.apache.thrift.TException
    {
      dbGet_args args = new dbGet_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setKeyData(keyData);
      args.setConfig(config);
      sendBase("dbGet", args);
    }

    public TGetResult recv_dbGet() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbGet_result result = new dbGet_result();
      receiveBase(result, "dbGet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbGet failed: unknown result");
    }

    public TGetWithPKeyResult dbGetWithPKey(TDatabase sdb, TTransaction txn, TKeyDataWithPKey keyPKey, TDbGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbGetWithPKey(sdb, txn, keyPKey, config);
      return recv_dbGetWithPKey();
    }

    public void send_dbGetWithPKey(TDatabase sdb, TTransaction txn, TKeyDataWithPKey keyPKey, TDbGetConfig config) throws org.apache.thrift.TException
    {
      dbGetWithPKey_args args = new dbGetWithPKey_args();
      args.setSdb(sdb);
      args.setTxn(txn);
      args.setKeyPKey(keyPKey);
      args.setConfig(config);
      sendBase("dbGetWithPKey", args);
    }

    public TGetWithPKeyResult recv_dbGetWithPKey() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbGetWithPKey_result result = new dbGetWithPKey_result();
      receiveBase(result, "dbGetWithPKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbGetWithPKey failed: unknown result");
    }

    public TPutResult dbPut(TDatabase db, TTransaction txn, List<TKeyDataWithSecondaryKeys> pairs, TDbPutConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbPut(db, txn, pairs, config);
      return recv_dbPut();
    }

    public void send_dbPut(TDatabase db, TTransaction txn, List<TKeyDataWithSecondaryKeys> pairs, TDbPutConfig config) throws org.apache.thrift.TException
    {
      dbPut_args args = new dbPut_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setPairs(pairs);
      args.setConfig(config);
      sendBase("dbPut", args);
    }

    public TPutResult recv_dbPut() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbPut_result result = new dbPut_result();
      receiveBase(result, "dbPut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbPut failed: unknown result");
    }

    public TOperationStatus dbDelete(TDatabase db, TTransaction txn, List<TKeyData> keyOrPairs) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbDelete(db, txn, keyOrPairs);
      return recv_dbDelete();
    }

    public void send_dbDelete(TDatabase db, TTransaction txn, List<TKeyData> keyOrPairs) throws org.apache.thrift.TException
    {
      dbDelete_args args = new dbDelete_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setKeyOrPairs(keyOrPairs);
      sendBase("dbDelete", args);
    }

    public TOperationStatus recv_dbDelete() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbDelete_result result = new dbDelete_result();
      receiveBase(result, "dbDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbDelete failed: unknown result");
    }

    public TOperationStatus dbKeyExists(TDatabase db, TTransaction txn, TDbt key) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbKeyExists(db, txn, key);
      return recv_dbKeyExists();
    }

    public void send_dbKeyExists(TDatabase db, TTransaction txn, TDbt key) throws org.apache.thrift.TException
    {
      dbKeyExists_args args = new dbKeyExists_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setKey(key);
      sendBase("dbKeyExists", args);
    }

    public TOperationStatus recv_dbKeyExists() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbKeyExists_result result = new dbKeyExists_result();
      receiveBase(result, "dbKeyExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbKeyExists failed: unknown result");
    }

    public TKeyRangeResult dbKeyRange(TDatabase db, TTransaction txn, TDbt key) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbKeyRange(db, txn, key);
      return recv_dbKeyRange();
    }

    public void send_dbKeyRange(TDatabase db, TTransaction txn, TDbt key) throws org.apache.thrift.TException
    {
      dbKeyRange_args args = new dbKeyRange_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setKey(key);
      sendBase("dbKeyRange", args);
    }

    public TKeyRangeResult recv_dbKeyRange() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbKeyRange_result result = new dbKeyRange_result();
      receiveBase(result, "dbKeyRange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbKeyRange failed: unknown result");
    }

    public TCompactResult dbCompact(TDatabase db, TTransaction txn, TDbt start, TDbt stop, TCompactConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbCompact(db, txn, start, stop, config);
      return recv_dbCompact();
    }

    public void send_dbCompact(TDatabase db, TTransaction txn, TDbt start, TDbt stop, TCompactConfig config) throws org.apache.thrift.TException
    {
      dbCompact_args args = new dbCompact_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setStart(start);
      args.setStop(stop);
      args.setConfig(config);
      sendBase("dbCompact", args);
    }

    public TCompactResult recv_dbCompact() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbCompact_result result = new dbCompact_result();
      receiveBase(result, "dbCompact");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbCompact failed: unknown result");
    }

    public int dbTruncate(TDatabase db, TTransaction txn, boolean countRecords) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_dbTruncate(db, txn, countRecords);
      return recv_dbTruncate();
    }

    public void send_dbTruncate(TDatabase db, TTransaction txn, boolean countRecords) throws org.apache.thrift.TException
    {
      dbTruncate_args args = new dbTruncate_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setCountRecords(countRecords);
      sendBase("dbTruncate", args);
    }

    public int recv_dbTruncate() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      dbTruncate_result result = new dbTruncate_result();
      receiveBase(result, "dbTruncate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbTruncate failed: unknown result");
    }

    public TCursor openCursor(TDatabase db, TTransaction txn, TCursorConfig cursorConfig) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_openCursor(db, txn, cursorConfig);
      return recv_openCursor();
    }

    public void send_openCursor(TDatabase db, TTransaction txn, TCursorConfig cursorConfig) throws org.apache.thrift.TException
    {
      openCursor_args args = new openCursor_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setCursorConfig(cursorConfig);
      sendBase("openCursor", args);
    }

    public TCursor recv_openCursor() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      openCursor_result result = new openCursor_result();
      receiveBase(result, "openCursor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openCursor failed: unknown result");
    }

    public void closeCursorHandle(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_closeCursorHandle(cursor);
      recv_closeCursorHandle();
    }

    public void send_closeCursorHandle(TCursor cursor) throws org.apache.thrift.TException
    {
      closeCursorHandle_args args = new closeCursorHandle_args();
      args.setCursor(cursor);
      sendBase("closeCursorHandle", args);
    }

    public void recv_closeCursorHandle() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      closeCursorHandle_result result = new closeCursorHandle_result();
      receiveBase(result, "closeCursorHandle");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TCursorConfig getCursorConfig(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_getCursorConfig(cursor);
      return recv_getCursorConfig();
    }

    public void send_getCursorConfig(TCursor cursor) throws org.apache.thrift.TException
    {
      getCursorConfig_args args = new getCursorConfig_args();
      args.setCursor(cursor);
      sendBase("getCursorConfig", args);
    }

    public TCursorConfig recv_getCursorConfig() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      getCursorConfig_result result = new getCursorConfig_result();
      receiveBase(result, "getCursorConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCursorConfig failed: unknown result");
    }

    public TCachePriority getCursorCachePriority(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_getCursorCachePriority(cursor);
      return recv_getCursorCachePriority();
    }

    public void send_getCursorCachePriority(TCursor cursor) throws org.apache.thrift.TException
    {
      getCursorCachePriority_args args = new getCursorCachePriority_args();
      args.setCursor(cursor);
      sendBase("getCursorCachePriority", args);
    }

    public TCachePriority recv_getCursorCachePriority() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      getCursorCachePriority_result result = new getCursorCachePriority_result();
      receiveBase(result, "getCursorCachePriority");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCursorCachePriority failed: unknown result");
    }

    public void setCursorCachePriority(TCursor cursor, TCachePriority priority) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_setCursorCachePriority(cursor, priority);
      recv_setCursorCachePriority();
    }

    public void send_setCursorCachePriority(TCursor cursor, TCachePriority priority) throws org.apache.thrift.TException
    {
      setCursorCachePriority_args args = new setCursorCachePriority_args();
      args.setCursor(cursor);
      args.setPriority(priority);
      sendBase("setCursorCachePriority", args);
    }

    public void recv_setCursorCachePriority() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      setCursorCachePriority_result result = new setCursorCachePriority_result();
      receiveBase(result, "setCursorCachePriority");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TGetResult cursorGet(TCursor cursor, TKeyData keyData, TCursorGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_cursorGet(cursor, keyData, config);
      return recv_cursorGet();
    }

    public void send_cursorGet(TCursor cursor, TKeyData keyData, TCursorGetConfig config) throws org.apache.thrift.TException
    {
      cursorGet_args args = new cursorGet_args();
      args.setCursor(cursor);
      args.setKeyData(keyData);
      args.setConfig(config);
      sendBase("cursorGet", args);
    }

    public TGetResult recv_cursorGet() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      cursorGet_result result = new cursorGet_result();
      receiveBase(result, "cursorGet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cursorGet failed: unknown result");
    }

    public TGetWithPKeyResult cursorGetWithPKey(TCursor cursor, TKeyDataWithPKey keyPKey, TCursorGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_cursorGetWithPKey(cursor, keyPKey, config);
      return recv_cursorGetWithPKey();
    }

    public void send_cursorGetWithPKey(TCursor cursor, TKeyDataWithPKey keyPKey, TCursorGetConfig config) throws org.apache.thrift.TException
    {
      cursorGetWithPKey_args args = new cursorGetWithPKey_args();
      args.setCursor(cursor);
      args.setKeyPKey(keyPKey);
      args.setConfig(config);
      sendBase("cursorGetWithPKey", args);
    }

    public TGetWithPKeyResult recv_cursorGetWithPKey() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      cursorGetWithPKey_result result = new cursorGetWithPKey_result();
      receiveBase(result, "cursorGetWithPKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cursorGetWithPKey failed: unknown result");
    }

    public TPutResult cursorPut(TCursor cursor, TKeyDataWithSecondaryKeys pair, TCursorPutConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_cursorPut(cursor, pair, config);
      return recv_cursorPut();
    }

    public void send_cursorPut(TCursor cursor, TKeyDataWithSecondaryKeys pair, TCursorPutConfig config) throws org.apache.thrift.TException
    {
      cursorPut_args args = new cursorPut_args();
      args.setCursor(cursor);
      args.setPair(pair);
      args.setConfig(config);
      sendBase("cursorPut", args);
    }

    public TPutResult recv_cursorPut() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      cursorPut_result result = new cursorPut_result();
      receiveBase(result, "cursorPut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cursorPut failed: unknown result");
    }

    public TOperationStatus cursorDelete(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_cursorDelete(cursor);
      return recv_cursorDelete();
    }

    public void send_cursorDelete(TCursor cursor) throws org.apache.thrift.TException
    {
      cursorDelete_args args = new cursorDelete_args();
      args.setCursor(cursor);
      sendBase("cursorDelete", args);
    }

    public TOperationStatus recv_cursorDelete() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      cursorDelete_result result = new cursorDelete_result();
      receiveBase(result, "cursorDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cursorDelete failed: unknown result");
    }

    public TCursor cursorDup(TCursor cursor, boolean samePos) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_cursorDup(cursor, samePos);
      return recv_cursorDup();
    }

    public void send_cursorDup(TCursor cursor, boolean samePos) throws org.apache.thrift.TException
    {
      cursorDup_args args = new cursorDup_args();
      args.setCursor(cursor);
      args.setSamePos(samePos);
      sendBase("cursorDup", args);
    }

    public TCursor recv_cursorDup() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      cursorDup_result result = new cursorDup_result();
      receiveBase(result, "cursorDup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cursorDup failed: unknown result");
    }

    public short cursorCompare(TCursor cursor1, TCursor cursor2) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_cursorCompare(cursor1, cursor2);
      return recv_cursorCompare();
    }

    public void send_cursorCompare(TCursor cursor1, TCursor cursor2) throws org.apache.thrift.TException
    {
      cursorCompare_args args = new cursorCompare_args();
      args.setCursor1(cursor1);
      args.setCursor2(cursor2);
      sendBase("cursorCompare", args);
    }

    public short recv_cursorCompare() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      cursorCompare_result result = new cursorCompare_result();
      receiveBase(result, "cursorCompare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cursorCompare failed: unknown result");
    }

    public int cursorCount(TCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_cursorCount(cursor);
      return recv_cursorCount();
    }

    public void send_cursorCount(TCursor cursor) throws org.apache.thrift.TException
    {
      cursorCount_args args = new cursorCount_args();
      args.setCursor(cursor);
      sendBase("cursorCount", args);
    }

    public int recv_cursorCount() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      cursorCount_result result = new cursorCount_result();
      receiveBase(result, "cursorCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cursorCount failed: unknown result");
    }

    public TJoinCursor openJoinCursor(TDatabase pdb, List<TCursor> scursors, boolean sortCursors) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_openJoinCursor(pdb, scursors, sortCursors);
      return recv_openJoinCursor();
    }

    public void send_openJoinCursor(TDatabase pdb, List<TCursor> scursors, boolean sortCursors) throws org.apache.thrift.TException
    {
      openJoinCursor_args args = new openJoinCursor_args();
      args.setPdb(pdb);
      args.setScursors(scursors);
      args.setSortCursors(sortCursors);
      sendBase("openJoinCursor", args);
    }

    public TJoinCursor recv_openJoinCursor() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      openJoinCursor_result result = new openJoinCursor_result();
      receiveBase(result, "openJoinCursor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openJoinCursor failed: unknown result");
    }

    public void closeJoinCursorHandle(TJoinCursor cursor) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_closeJoinCursorHandle(cursor);
      recv_closeJoinCursorHandle();
    }

    public void send_closeJoinCursorHandle(TJoinCursor cursor) throws org.apache.thrift.TException
    {
      closeJoinCursorHandle_args args = new closeJoinCursorHandle_args();
      args.setCursor(cursor);
      sendBase("closeJoinCursorHandle", args);
    }

    public void recv_closeJoinCursorHandle() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      closeJoinCursorHandle_result result = new closeJoinCursorHandle_result();
      receiveBase(result, "closeJoinCursorHandle");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TGetResult joinCursorGet(TJoinCursor cursor, TJoinCursorGetConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_joinCursorGet(cursor, config);
      return recv_joinCursorGet();
    }

    public void send_joinCursorGet(TJoinCursor cursor, TJoinCursorGetConfig config) throws org.apache.thrift.TException
    {
      joinCursorGet_args args = new joinCursorGet_args();
      args.setCursor(cursor);
      args.setConfig(config);
      sendBase("joinCursorGet", args);
    }

    public TGetResult recv_joinCursorGet() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      joinCursorGet_result result = new joinCursorGet_result();
      receiveBase(result, "joinCursorGet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "joinCursorGet failed: unknown result");
    }

    public TTransaction beginTransaction(TEnvironment env, TTransaction parent, TTransactionConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_beginTransaction(env, parent, config);
      return recv_beginTransaction();
    }

    public void send_beginTransaction(TEnvironment env, TTransaction parent, TTransactionConfig config) throws org.apache.thrift.TException
    {
      beginTransaction_args args = new beginTransaction_args();
      args.setEnv(env);
      args.setParent(parent);
      args.setConfig(config);
      sendBase("beginTransaction", args);
    }

    public TTransaction recv_beginTransaction() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      beginTransaction_result result = new beginTransaction_result();
      receiveBase(result, "beginTransaction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginTransaction failed: unknown result");
    }

    public void txnAbort(TTransaction txn) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_txnAbort(txn);
      recv_txnAbort();
    }

    public void send_txnAbort(TTransaction txn) throws org.apache.thrift.TException
    {
      txnAbort_args args = new txnAbort_args();
      args.setTxn(txn);
      sendBase("txnAbort", args);
    }

    public void recv_txnAbort() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      txnAbort_result result = new txnAbort_result();
      receiveBase(result, "txnAbort");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void txnCommit(TTransaction txn, TDurabilityPolicy durability) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_txnCommit(txn, durability);
      recv_txnCommit();
    }

    public void send_txnCommit(TTransaction txn, TDurabilityPolicy durability) throws org.apache.thrift.TException
    {
      txnCommit_args args = new txnCommit_args();
      args.setTxn(txn);
      args.setDurability(durability);
      sendBase("txnCommit", args);
    }

    public void recv_txnCommit() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      txnCommit_result result = new txnCommit_result();
      receiveBase(result, "txnCommit");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public int txnGetPriority(TTransaction txn) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_txnGetPriority(txn);
      return recv_txnGetPriority();
    }

    public void send_txnGetPriority(TTransaction txn) throws org.apache.thrift.TException
    {
      txnGetPriority_args args = new txnGetPriority_args();
      args.setTxn(txn);
      sendBase("txnGetPriority", args);
    }

    public int recv_txnGetPriority() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      txnGetPriority_result result = new txnGetPriority_result();
      receiveBase(result, "txnGetPriority");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "txnGetPriority failed: unknown result");
    }

    public void txnSetPriority(TTransaction txn, int priority) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_txnSetPriority(txn, priority);
      recv_txnSetPriority();
    }

    public void send_txnSetPriority(TTransaction txn, int priority) throws org.apache.thrift.TException
    {
      txnSetPriority_args args = new txnSetPriority_args();
      args.setTxn(txn);
      args.setPriority(priority);
      sendBase("txnSetPriority", args);
    }

    public void recv_txnSetPriority() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      txnSetPriority_result result = new txnSetPriority_result();
      receiveBase(result, "txnSetPriority");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public TSequence openSequence(TDatabase db, TTransaction txn, TDbt key, TSequenceConfig config) throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_openSequence(db, txn, key, config);
      return recv_openSequence();
    }

    public void send_openSequence(TDatabase db, TTransaction txn, TDbt key, TSequenceConfig config) throws org.apache.thrift.TException
    {
      openSequence_args args = new openSequence_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setKey(key);
      args.setConfig(config);
      sendBase("openSequence", args);
    }

    public TSequence recv_openSequence() throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      openSequence_result result = new openSequence_result();
      receiveBase(result, "openSequence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openSequence failed: unknown result");
    }

    public void closeSequenceHandle(TSequence seq) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_closeSequenceHandle(seq);
      recv_closeSequenceHandle();
    }

    public void send_closeSequenceHandle(TSequence seq) throws org.apache.thrift.TException
    {
      closeSequenceHandle_args args = new closeSequenceHandle_args();
      args.setSeq(seq);
      sendBase("closeSequenceHandle", args);
    }

    public void recv_closeSequenceHandle() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      closeSequenceHandle_result result = new closeSequenceHandle_result();
      receiveBase(result, "closeSequenceHandle");
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void removeSequence(TDatabase db, TTransaction txn, TDbt key, boolean isAutoCommitNoSync, boolean force) throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_removeSequence(db, txn, key, isAutoCommitNoSync, force);
      recv_removeSequence();
    }

    public void send_removeSequence(TDatabase db, TTransaction txn, TDbt key, boolean isAutoCommitNoSync, boolean force) throws org.apache.thrift.TException
    {
      removeSequence_args args = new removeSequence_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setKey(key);
      args.setIsAutoCommitNoSync(isAutoCommitNoSync);
      args.setForce(force);
      sendBase("removeSequence", args);
    }

    public void recv_removeSequence() throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      removeSequence_result result = new removeSequence_result();
      receiveBase(result, "removeSequence");
      if (result.iue != null) {
        throw result.iue;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public long sequenceGet(TSequence seq, TTransaction txn, int delta) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_sequenceGet(seq, txn, delta);
      return recv_sequenceGet();
    }

    public void send_sequenceGet(TSequence seq, TTransaction txn, int delta) throws org.apache.thrift.TException
    {
      sequenceGet_args args = new sequenceGet_args();
      args.setSeq(seq);
      args.setTxn(txn);
      args.setDelta(delta);
      sendBase("sequenceGet", args);
    }

    public long recv_sequenceGet() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      sequenceGet_result result = new sequenceGet_result();
      receiveBase(result, "sequenceGet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sequenceGet failed: unknown result");
    }

    public TEnvStatResult getEnvStatistics(TEnvironment env, TEnvStatConfig config) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_getEnvStatistics(env, config);
      return recv_getEnvStatistics();
    }

    public void send_getEnvStatistics(TEnvironment env, TEnvStatConfig config) throws org.apache.thrift.TException
    {
      getEnvStatistics_args args = new getEnvStatistics_args();
      args.setEnv(env);
      args.setConfig(config);
      sendBase("getEnvStatistics", args);
    }

    public TEnvStatResult recv_getEnvStatistics() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      getEnvStatistics_result result = new getEnvStatistics_result();
      receiveBase(result, "getEnvStatistics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEnvStatistics failed: unknown result");
    }

    public TDatabaseStatResult getDatabaseStatistics(TDatabase db, TTransaction txn, boolean fast) throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      send_getDatabaseStatistics(db, txn, fast);
      return recv_getDatabaseStatistics();
    }

    public void send_getDatabaseStatistics(TDatabase db, TTransaction txn, boolean fast) throws org.apache.thrift.TException
    {
      getDatabaseStatistics_args args = new getDatabaseStatistics_args();
      args.setDb(db);
      args.setTxn(txn);
      args.setFast(fast);
      sendBase("getDatabaseStatistics", args);
    }

    public TDatabaseStatResult recv_getDatabaseStatistics() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException
    {
      getDatabaseStatistics_result result = new getDatabaseStatistics_result();
      receiveBase(result, "getDatabaseStatistics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dbe != null) {
        throw result.dbe;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDatabaseStatistics failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void isProtocolVersionSupported(String clientVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isProtocolVersionSupported_call method_call = new isProtocolVersionSupported_call(clientVersion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isProtocolVersionSupported_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientVersion;
      public isProtocolVersionSupported_call(String clientVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientVersion = clientVersion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isProtocolVersionSupported", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isProtocolVersionSupported_args args = new isProtocolVersionSupported_args();
        args.setClientVersion(clientVersion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TProtocolVersionTestResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isProtocolVersionSupported();
      }
    }

    public void getBdbVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBdbVersion_call method_call = new getBdbVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBdbVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getBdbVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBdbVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBdbVersion_args args = new getBdbVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBdbVersion();
      }
    }

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdown_call method_call = new shutdown_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdown_call extends org.apache.thrift.async.TAsyncMethodCall {
      public shutdown_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdown", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        shutdown_args args = new shutdown_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void openEnvironment(String homeDir, TEnvironmentConfig envConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openEnvironment_call method_call = new openEnvironment_call(homeDir, envConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openEnvironment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String homeDir;
      private TEnvironmentConfig envConfig;
      public openEnvironment_call(String homeDir, TEnvironmentConfig envConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.homeDir = homeDir;
        this.envConfig = envConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openEnvironment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openEnvironment_args args = new openEnvironment_args();
        args.setHomeDir(homeDir);
        args.setEnvConfig(envConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEnvironment getResult() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openEnvironment();
      }
    }

    public void closeEnvironmentHandle(TEnvironment env, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeEnvironmentHandle_call method_call = new closeEnvironmentHandle_call(env, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeEnvironmentHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      public closeEnvironmentHandle_call(TEnvironment env, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeEnvironmentHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeEnvironmentHandle_args args = new closeEnvironmentHandle_args();
        args.setEnv(env);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeEnvironmentHandle();
      }
    }

    public void closeEnvironmentHandles(String homeDir, long minIdleInMilli, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeEnvironmentHandles_call method_call = new closeEnvironmentHandles_call(homeDir, minIdleInMilli, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeEnvironmentHandles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String homeDir;
      private long minIdleInMilli;
      public closeEnvironmentHandles_call(String homeDir, long minIdleInMilli, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.homeDir = homeDir;
        this.minIdleInMilli = minIdleInMilli;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeEnvironmentHandles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeEnvironmentHandles_args args = new closeEnvironmentHandles_args();
        args.setHomeDir(homeDir);
        args.setMinIdleInMilli(minIdleInMilli);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeEnvironmentHandles();
      }
    }

    public void deleteEnvironmentAndDatabases(String homeDir, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEnvironmentAndDatabases_call method_call = new deleteEnvironmentAndDatabases_call(homeDir, force, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEnvironmentAndDatabases_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String homeDir;
      private boolean force;
      public deleteEnvironmentAndDatabases_call(String homeDir, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.homeDir = homeDir;
        this.force = force;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEnvironmentAndDatabases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEnvironmentAndDatabases_args args = new deleteEnvironmentAndDatabases_args();
        args.setHomeDir(homeDir);
        args.setForce(force);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TFileNotFoundException, TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteEnvironmentAndDatabases();
      }
    }

    public void getEnvironmentConfig(TEnvironment env, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEnvironmentConfig_call method_call = new getEnvironmentConfig_call(env, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEnvironmentConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      public getEnvironmentConfig_call(TEnvironment env, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEnvironmentConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEnvironmentConfig_args args = new getEnvironmentConfig_args();
        args.setEnv(env);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEnvironmentConfig getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEnvironmentConfig();
      }
    }

    public void setEnvironmentConfig(TEnvironment env, TEnvironmentConfig envConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setEnvironmentConfig_call method_call = new setEnvironmentConfig_call(env, envConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setEnvironmentConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private TEnvironmentConfig envConfig;
      public setEnvironmentConfig_call(TEnvironment env, TEnvironmentConfig envConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.envConfig = envConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setEnvironmentConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setEnvironmentConfig_args args = new setEnvironmentConfig_args();
        args.setEnv(env);
        args.setEnvConfig(envConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setEnvironmentConfig();
      }
    }

    public void removeDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeDatabase_call method_call = new removeDatabase_call(env, txn, fileName, databaseName, force, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeDatabase_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private TTransaction txn;
      private String fileName;
      private String databaseName;
      private boolean force;
      public removeDatabase_call(TEnvironment env, TTransaction txn, String fileName, String databaseName, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.txn = txn;
        this.fileName = fileName;
        this.databaseName = databaseName;
        this.force = force;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeDatabase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeDatabase_args args = new removeDatabase_args();
        args.setEnv(env);
        args.setTxn(txn);
        args.setFileName(fileName);
        args.setDatabaseName(databaseName);
        args.setForce(force);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeDatabase();
      }
    }

    public void renameDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, String newName, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameDatabase_call method_call = new renameDatabase_call(env, txn, fileName, databaseName, newName, force, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameDatabase_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private TTransaction txn;
      private String fileName;
      private String databaseName;
      private String newName;
      private boolean force;
      public renameDatabase_call(TEnvironment env, TTransaction txn, String fileName, String databaseName, String newName, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.txn = txn;
        this.fileName = fileName;
        this.databaseName = databaseName;
        this.newName = newName;
        this.force = force;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameDatabase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameDatabase_args args = new renameDatabase_args();
        args.setEnv(env);
        args.setTxn(txn);
        args.setFileName(fileName);
        args.setDatabaseName(databaseName);
        args.setNewName(newName);
        args.setForce(force);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_renameDatabase();
      }
    }

    public void checkpoint(TEnvironment env, int kbytes, int min, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkpoint_call method_call = new checkpoint_call(env, kbytes, min, force, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkpoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private int kbytes;
      private int min;
      private boolean force;
      public checkpoint_call(TEnvironment env, int kbytes, int min, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.kbytes = kbytes;
        this.min = min;
        this.force = force;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkpoint_args args = new checkpoint_args();
        args.setEnv(env);
        args.setKbytes(kbytes);
        args.setMin(min);
        args.setForce(force);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_checkpoint();
      }
    }

    public void openDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabaseConfig dbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openDatabase_call method_call = new openDatabase_call(env, txn, fileName, databaseName, dbConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openDatabase_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private TTransaction txn;
      private String fileName;
      private String databaseName;
      private TDatabaseConfig dbConfig;
      public openDatabase_call(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabaseConfig dbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.txn = txn;
        this.fileName = fileName;
        this.databaseName = databaseName;
        this.dbConfig = dbConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openDatabase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openDatabase_args args = new openDatabase_args();
        args.setEnv(env);
        args.setTxn(txn);
        args.setFileName(fileName);
        args.setDatabaseName(databaseName);
        args.setDbConfig(dbConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDatabase getResult() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openDatabase();
      }
    }

    public void openSecondaryDatabase(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabase primaryDb, TSecondaryDatabaseConfig sdbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openSecondaryDatabase_call method_call = new openSecondaryDatabase_call(env, txn, fileName, databaseName, primaryDb, sdbConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openSecondaryDatabase_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private TTransaction txn;
      private String fileName;
      private String databaseName;
      private TDatabase primaryDb;
      private TSecondaryDatabaseConfig sdbConfig;
      public openSecondaryDatabase_call(TEnvironment env, TTransaction txn, String fileName, String databaseName, TDatabase primaryDb, TSecondaryDatabaseConfig sdbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.txn = txn;
        this.fileName = fileName;
        this.databaseName = databaseName;
        this.primaryDb = primaryDb;
        this.sdbConfig = sdbConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openSecondaryDatabase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openSecondaryDatabase_args args = new openSecondaryDatabase_args();
        args.setEnv(env);
        args.setTxn(txn);
        args.setFileName(fileName);
        args.setDatabaseName(databaseName);
        args.setPrimaryDb(primaryDb);
        args.setSdbConfig(sdbConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDatabase getResult() throws TIOException, TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openSecondaryDatabase();
      }
    }

    public void closeDatabaseHandle(TDatabase db, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeDatabaseHandle_call method_call = new closeDatabaseHandle_call(db, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeDatabaseHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      public closeDatabaseHandle_call(TDatabase db, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeDatabaseHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeDatabaseHandle_args args = new closeDatabaseHandle_args();
        args.setDb(db);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeDatabaseHandle();
      }
    }

    public void closeDatabaseHandles(String envHomeDir, String fileName, String databaseName, long minIdleInMilli, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeDatabaseHandles_call method_call = new closeDatabaseHandles_call(envHomeDir, fileName, databaseName, minIdleInMilli, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeDatabaseHandles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String envHomeDir;
      private String fileName;
      private String databaseName;
      private long minIdleInMilli;
      public closeDatabaseHandles_call(String envHomeDir, String fileName, String databaseName, long minIdleInMilli, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.envHomeDir = envHomeDir;
        this.fileName = fileName;
        this.databaseName = databaseName;
        this.minIdleInMilli = minIdleInMilli;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeDatabaseHandles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeDatabaseHandles_args args = new closeDatabaseHandles_args();
        args.setEnvHomeDir(envHomeDir);
        args.setFileName(fileName);
        args.setDatabaseName(databaseName);
        args.setMinIdleInMilli(minIdleInMilli);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeDatabaseHandles();
      }
    }

    public void getDatabaseConfig(TDatabase db, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDatabaseConfig_call method_call = new getDatabaseConfig_call(db, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDatabaseConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      public getDatabaseConfig_call(TDatabase db, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDatabaseConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDatabaseConfig_args args = new getDatabaseConfig_args();
        args.setDb(db);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDatabaseConfig getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDatabaseConfig();
      }
    }

    public void setDatabaseConfig(TDatabase db, TDatabaseConfig dbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDatabaseConfig_call method_call = new setDatabaseConfig_call(db, dbConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDatabaseConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TDatabaseConfig dbConfig;
      public setDatabaseConfig_call(TDatabase db, TDatabaseConfig dbConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.dbConfig = dbConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDatabaseConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDatabaseConfig_args args = new setDatabaseConfig_args();
        args.setDb(db);
        args.setDbConfig(dbConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setDatabaseConfig();
      }
    }

    public void dbGet(TDatabase db, TTransaction txn, TKeyData keyData, TDbGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbGet_call method_call = new dbGet_call(db, txn, keyData, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbGet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private TKeyData keyData;
      private TDbGetConfig config;
      public dbGet_call(TDatabase db, TTransaction txn, TKeyData keyData, TDbGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.keyData = keyData;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbGet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbGet_args args = new dbGet_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setKeyData(keyData);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbGet();
      }
    }

    public void dbGetWithPKey(TDatabase sdb, TTransaction txn, TKeyDataWithPKey keyPKey, TDbGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbGetWithPKey_call method_call = new dbGetWithPKey_call(sdb, txn, keyPKey, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbGetWithPKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase sdb;
      private TTransaction txn;
      private TKeyDataWithPKey keyPKey;
      private TDbGetConfig config;
      public dbGetWithPKey_call(TDatabase sdb, TTransaction txn, TKeyDataWithPKey keyPKey, TDbGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sdb = sdb;
        this.txn = txn;
        this.keyPKey = keyPKey;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbGetWithPKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbGetWithPKey_args args = new dbGetWithPKey_args();
        args.setSdb(sdb);
        args.setTxn(txn);
        args.setKeyPKey(keyPKey);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetWithPKeyResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbGetWithPKey();
      }
    }

    public void dbPut(TDatabase db, TTransaction txn, List<TKeyDataWithSecondaryKeys> pairs, TDbPutConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbPut_call method_call = new dbPut_call(db, txn, pairs, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbPut_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private List<TKeyDataWithSecondaryKeys> pairs;
      private TDbPutConfig config;
      public dbPut_call(TDatabase db, TTransaction txn, List<TKeyDataWithSecondaryKeys> pairs, TDbPutConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.pairs = pairs;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbPut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbPut_args args = new dbPut_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setPairs(pairs);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPutResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbPut();
      }
    }

    public void dbDelete(TDatabase db, TTransaction txn, List<TKeyData> keyOrPairs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbDelete_call method_call = new dbDelete_call(db, txn, keyOrPairs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private List<TKeyData> keyOrPairs;
      public dbDelete_call(TDatabase db, TTransaction txn, List<TKeyData> keyOrPairs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.keyOrPairs = keyOrPairs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbDelete_args args = new dbDelete_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setKeyOrPairs(keyOrPairs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOperationStatus getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbDelete();
      }
    }

    public void dbKeyExists(TDatabase db, TTransaction txn, TDbt key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbKeyExists_call method_call = new dbKeyExists_call(db, txn, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbKeyExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private TDbt key;
      public dbKeyExists_call(TDatabase db, TTransaction txn, TDbt key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbKeyExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbKeyExists_args args = new dbKeyExists_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOperationStatus getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbKeyExists();
      }
    }

    public void dbKeyRange(TDatabase db, TTransaction txn, TDbt key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbKeyRange_call method_call = new dbKeyRange_call(db, txn, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbKeyRange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private TDbt key;
      public dbKeyRange_call(TDatabase db, TTransaction txn, TDbt key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbKeyRange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbKeyRange_args args = new dbKeyRange_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TKeyRangeResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbKeyRange();
      }
    }

    public void dbCompact(TDatabase db, TTransaction txn, TDbt start, TDbt stop, TCompactConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbCompact_call method_call = new dbCompact_call(db, txn, start, stop, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbCompact_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private TDbt start;
      private TDbt stop;
      private TCompactConfig config;
      public dbCompact_call(TDatabase db, TTransaction txn, TDbt start, TDbt stop, TCompactConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.start = start;
        this.stop = stop;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbCompact", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbCompact_args args = new dbCompact_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setStart(start);
        args.setStop(stop);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCompactResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbCompact();
      }
    }

    public void dbTruncate(TDatabase db, TTransaction txn, boolean countRecords, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbTruncate_call method_call = new dbTruncate_call(db, txn, countRecords, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbTruncate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private boolean countRecords;
      public dbTruncate_call(TDatabase db, TTransaction txn, boolean countRecords, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.countRecords = countRecords;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbTruncate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbTruncate_args args = new dbTruncate_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setCountRecords(countRecords);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbTruncate();
      }
    }

    public void openCursor(TDatabase db, TTransaction txn, TCursorConfig cursorConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openCursor_call method_call = new openCursor_call(db, txn, cursorConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openCursor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private TCursorConfig cursorConfig;
      public openCursor_call(TDatabase db, TTransaction txn, TCursorConfig cursorConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.cursorConfig = cursorConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openCursor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openCursor_args args = new openCursor_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setCursorConfig(cursorConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCursor getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openCursor();
      }
    }

    public void closeCursorHandle(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeCursorHandle_call method_call = new closeCursorHandle_call(cursor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeCursorHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      public closeCursorHandle_call(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeCursorHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeCursorHandle_args args = new closeCursorHandle_args();
        args.setCursor(cursor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeCursorHandle();
      }
    }

    public void getCursorConfig(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCursorConfig_call method_call = new getCursorConfig_call(cursor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCursorConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      public getCursorConfig_call(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCursorConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCursorConfig_args args = new getCursorConfig_args();
        args.setCursor(cursor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCursorConfig getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCursorConfig();
      }
    }

    public void getCursorCachePriority(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCursorCachePriority_call method_call = new getCursorCachePriority_call(cursor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCursorCachePriority_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      public getCursorCachePriority_call(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCursorCachePriority", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCursorCachePriority_args args = new getCursorCachePriority_args();
        args.setCursor(cursor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCachePriority getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCursorCachePriority();
      }
    }

    public void setCursorCachePriority(TCursor cursor, TCachePriority priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setCursorCachePriority_call method_call = new setCursorCachePriority_call(cursor, priority, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setCursorCachePriority_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      private TCachePriority priority;
      public setCursorCachePriority_call(TCursor cursor, TCachePriority priority, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
        this.priority = priority;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCursorCachePriority", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setCursorCachePriority_args args = new setCursorCachePriority_args();
        args.setCursor(cursor);
        args.setPriority(priority);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setCursorCachePriority();
      }
    }

    public void cursorGet(TCursor cursor, TKeyData keyData, TCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cursorGet_call method_call = new cursorGet_call(cursor, keyData, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cursorGet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      private TKeyData keyData;
      private TCursorGetConfig config;
      public cursorGet_call(TCursor cursor, TKeyData keyData, TCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
        this.keyData = keyData;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cursorGet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cursorGet_args args = new cursorGet_args();
        args.setCursor(cursor);
        args.setKeyData(keyData);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cursorGet();
      }
    }

    public void cursorGetWithPKey(TCursor cursor, TKeyDataWithPKey keyPKey, TCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cursorGetWithPKey_call method_call = new cursorGetWithPKey_call(cursor, keyPKey, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cursorGetWithPKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      private TKeyDataWithPKey keyPKey;
      private TCursorGetConfig config;
      public cursorGetWithPKey_call(TCursor cursor, TKeyDataWithPKey keyPKey, TCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
        this.keyPKey = keyPKey;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cursorGetWithPKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cursorGetWithPKey_args args = new cursorGetWithPKey_args();
        args.setCursor(cursor);
        args.setKeyPKey(keyPKey);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetWithPKeyResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cursorGetWithPKey();
      }
    }

    public void cursorPut(TCursor cursor, TKeyDataWithSecondaryKeys pair, TCursorPutConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cursorPut_call method_call = new cursorPut_call(cursor, pair, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cursorPut_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      private TKeyDataWithSecondaryKeys pair;
      private TCursorPutConfig config;
      public cursorPut_call(TCursor cursor, TKeyDataWithSecondaryKeys pair, TCursorPutConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
        this.pair = pair;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cursorPut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cursorPut_args args = new cursorPut_args();
        args.setCursor(cursor);
        args.setPair(pair);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPutResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cursorPut();
      }
    }

    public void cursorDelete(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cursorDelete_call method_call = new cursorDelete_call(cursor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cursorDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      public cursorDelete_call(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cursorDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cursorDelete_args args = new cursorDelete_args();
        args.setCursor(cursor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOperationStatus getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cursorDelete();
      }
    }

    public void cursorDup(TCursor cursor, boolean samePos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cursorDup_call method_call = new cursorDup_call(cursor, samePos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cursorDup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      private boolean samePos;
      public cursorDup_call(TCursor cursor, boolean samePos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
        this.samePos = samePos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cursorDup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cursorDup_args args = new cursorDup_args();
        args.setCursor(cursor);
        args.setSamePos(samePos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCursor getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cursorDup();
      }
    }

    public void cursorCompare(TCursor cursor1, TCursor cursor2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cursorCompare_call method_call = new cursorCompare_call(cursor1, cursor2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cursorCompare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor1;
      private TCursor cursor2;
      public cursorCompare_call(TCursor cursor1, TCursor cursor2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor1 = cursor1;
        this.cursor2 = cursor2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cursorCompare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cursorCompare_args args = new cursorCompare_args();
        args.setCursor1(cursor1);
        args.setCursor2(cursor2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public short getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cursorCompare();
      }
    }

    public void cursorCount(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cursorCount_call method_call = new cursorCount_call(cursor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cursorCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCursor cursor;
      public cursorCount_call(TCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cursorCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cursorCount_args args = new cursorCount_args();
        args.setCursor(cursor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cursorCount();
      }
    }

    public void openJoinCursor(TDatabase pdb, List<TCursor> scursors, boolean sortCursors, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openJoinCursor_call method_call = new openJoinCursor_call(pdb, scursors, sortCursors, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openJoinCursor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase pdb;
      private List<TCursor> scursors;
      private boolean sortCursors;
      public openJoinCursor_call(TDatabase pdb, List<TCursor> scursors, boolean sortCursors, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pdb = pdb;
        this.scursors = scursors;
        this.sortCursors = sortCursors;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openJoinCursor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openJoinCursor_args args = new openJoinCursor_args();
        args.setPdb(pdb);
        args.setScursors(scursors);
        args.setSortCursors(sortCursors);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TJoinCursor getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openJoinCursor();
      }
    }

    public void closeJoinCursorHandle(TJoinCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeJoinCursorHandle_call method_call = new closeJoinCursorHandle_call(cursor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeJoinCursorHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TJoinCursor cursor;
      public closeJoinCursorHandle_call(TJoinCursor cursor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeJoinCursorHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeJoinCursorHandle_args args = new closeJoinCursorHandle_args();
        args.setCursor(cursor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeJoinCursorHandle();
      }
    }

    public void joinCursorGet(TJoinCursor cursor, TJoinCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      joinCursorGet_call method_call = new joinCursorGet_call(cursor, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinCursorGet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TJoinCursor cursor;
      private TJoinCursorGetConfig config;
      public joinCursorGet_call(TJoinCursor cursor, TJoinCursorGetConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursor = cursor;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinCursorGet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        joinCursorGet_args args = new joinCursorGet_args();
        args.setCursor(cursor);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_joinCursorGet();
      }
    }

    public void beginTransaction(TEnvironment env, TTransaction parent, TTransactionConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginTransaction_call method_call = new beginTransaction_call(env, parent, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private TTransaction parent;
      private TTransactionConfig config;
      public beginTransaction_call(TEnvironment env, TTransaction parent, TTransactionConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.parent = parent;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginTransaction_args args = new beginTransaction_args();
        args.setEnv(env);
        args.setParent(parent);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTransaction getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_beginTransaction();
      }
    }

    public void txnAbort(TTransaction txn, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      txnAbort_call method_call = new txnAbort_call(txn, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class txnAbort_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TTransaction txn;
      public txnAbort_call(TTransaction txn, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txn = txn;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("txnAbort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        txnAbort_args args = new txnAbort_args();
        args.setTxn(txn);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_txnAbort();
      }
    }

    public void txnCommit(TTransaction txn, TDurabilityPolicy durability, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      txnCommit_call method_call = new txnCommit_call(txn, durability, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class txnCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TTransaction txn;
      private TDurabilityPolicy durability;
      public txnCommit_call(TTransaction txn, TDurabilityPolicy durability, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txn = txn;
        this.durability = durability;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("txnCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        txnCommit_args args = new txnCommit_args();
        args.setTxn(txn);
        args.setDurability(durability);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_txnCommit();
      }
    }

    public void txnGetPriority(TTransaction txn, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      txnGetPriority_call method_call = new txnGetPriority_call(txn, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class txnGetPriority_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TTransaction txn;
      public txnGetPriority_call(TTransaction txn, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txn = txn;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("txnGetPriority", org.apache.thrift.protocol.TMessageType.CALL, 0));
        txnGetPriority_args args = new txnGetPriority_args();
        args.setTxn(txn);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_txnGetPriority();
      }
    }

    public void txnSetPriority(TTransaction txn, int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      txnSetPriority_call method_call = new txnSetPriority_call(txn, priority, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class txnSetPriority_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TTransaction txn;
      private int priority;
      public txnSetPriority_call(TTransaction txn, int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txn = txn;
        this.priority = priority;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("txnSetPriority", org.apache.thrift.protocol.TMessageType.CALL, 0));
        txnSetPriority_args args = new txnSetPriority_args();
        args.setTxn(txn);
        args.setPriority(priority);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_txnSetPriority();
      }
    }

    public void openSequence(TDatabase db, TTransaction txn, TDbt key, TSequenceConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openSequence_call method_call = new openSequence_call(db, txn, key, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openSequence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private TDbt key;
      private TSequenceConfig config;
      public openSequence_call(TDatabase db, TTransaction txn, TDbt key, TSequenceConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.key = key;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openSequence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openSequence_args args = new openSequence_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setKey(key);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSequence getResult() throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openSequence();
      }
    }

    public void closeSequenceHandle(TSequence seq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeSequenceHandle_call method_call = new closeSequenceHandle_call(seq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeSequenceHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TSequence seq;
      public closeSequenceHandle_call(TSequence seq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.seq = seq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeSequenceHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeSequenceHandle_args args = new closeSequenceHandle_args();
        args.setSeq(seq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeSequenceHandle();
      }
    }

    public void removeSequence(TDatabase db, TTransaction txn, TDbt key, boolean isAutoCommitNoSync, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSequence_call method_call = new removeSequence_call(db, txn, key, isAutoCommitNoSync, force, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSequence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private TDbt key;
      private boolean isAutoCommitNoSync;
      private boolean force;
      public removeSequence_call(TDatabase db, TTransaction txn, TDbt key, boolean isAutoCommitNoSync, boolean force, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.key = key;
        this.isAutoCommitNoSync = isAutoCommitNoSync;
        this.force = force;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSequence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSequence_args args = new removeSequence_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setKey(key);
        args.setIsAutoCommitNoSync(isAutoCommitNoSync);
        args.setForce(force);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TResourceInUseException, TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeSequence();
      }
    }

    public void sequenceGet(TSequence seq, TTransaction txn, int delta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sequenceGet_call method_call = new sequenceGet_call(seq, txn, delta, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sequenceGet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TSequence seq;
      private TTransaction txn;
      private int delta;
      public sequenceGet_call(TSequence seq, TTransaction txn, int delta, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.seq = seq;
        this.txn = txn;
        this.delta = delta;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sequenceGet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sequenceGet_args args = new sequenceGet_args();
        args.setSeq(seq);
        args.setTxn(txn);
        args.setDelta(delta);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sequenceGet();
      }
    }

    public void getEnvStatistics(TEnvironment env, TEnvStatConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEnvStatistics_call method_call = new getEnvStatistics_call(env, config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEnvStatistics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TEnvironment env;
      private TEnvStatConfig config;
      public getEnvStatistics_call(TEnvironment env, TEnvStatConfig config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEnvStatistics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEnvStatistics_args args = new getEnvStatistics_args();
        args.setEnv(env);
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEnvStatResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEnvStatistics();
      }
    }

    public void getDatabaseStatistics(TDatabase db, TTransaction txn, boolean fast, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDatabaseStatistics_call method_call = new getDatabaseStatistics_call(db, txn, fast, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDatabaseStatistics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TDatabase db;
      private TTransaction txn;
      private boolean fast;
      public getDatabaseStatistics_call(TDatabase db, TTransaction txn, boolean fast, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.txn = txn;
        this.fast = fast;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDatabaseStatistics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDatabaseStatistics_args args = new getDatabaseStatistics_args();
        args.setDb(db);
        args.setTxn(txn);
        args.setFast(fast);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDatabaseStatResult getResult() throws TDatabaseException, TRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDatabaseStatistics();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("isProtocolVersionSupported", new isProtocolVersionSupported());
      processMap.put("getBdbVersion", new getBdbVersion());
      processMap.put("shutdown", new shutdown());
      processMap.put("openEnvironment", new openEnvironment());
      processMap.put("closeEnvironmentHandle", new closeEnvironmentHandle());
      processMap.put("closeEnvironmentHandles", new closeEnvironmentHandles());
      processMap.put("deleteEnvironmentAndDatabases", new deleteEnvironmentAndDatabases());
      processMap.put("getEnvironmentConfig", new getEnvironmentConfig());
      processMap.put("setEnvironmentConfig", new setEnvironmentConfig());
      processMap.put("removeDatabase", new removeDatabase());
      processMap.put("renameDatabase", new renameDatabase());
      processMap.put("checkpoint", new checkpoint());
      processMap.put("openDatabase", new openDatabase());
      processMap.put("openSecondaryDatabase", new openSecondaryDatabase());
      processMap.put("closeDatabaseHandle", new closeDatabaseHandle());
      processMap.put("closeDatabaseHandles", new closeDatabaseHandles());
      processMap.put("getDatabaseConfig", new getDatabaseConfig());
      processMap.put("setDatabaseConfig", new setDatabaseConfig());
      processMap.put("dbGet", new dbGet());
      processMap.put("dbGetWithPKey", new dbGetWithPKey());
      processMap.put("dbPut", new dbPut());
      processMap.put("dbDelete", new dbDelete());
      processMap.put("dbKeyExists", new dbKeyExists());
      processMap.put("dbKeyRange", new dbKeyRange());
      processMap.put("dbCompact", new dbCompact());
      processMap.put("dbTruncate", new dbTruncate());
      processMap.put("openCursor", new openCursor());
      processMap.put("closeCursorHandle", new closeCursorHandle());
      processMap.put("getCursorConfig", new getCursorConfig());
      processMap.put("getCursorCachePriority", new getCursorCachePriority());
      processMap.put("setCursorCachePriority", new setCursorCachePriority());
      processMap.put("cursorGet", new cursorGet());
      processMap.put("cursorGetWithPKey", new cursorGetWithPKey());
      processMap.put("cursorPut", new cursorPut());
      processMap.put("cursorDelete", new cursorDelete());
      processMap.put("cursorDup", new cursorDup());
      processMap.put("cursorCompare", new cursorCompare());
      processMap.put("cursorCount", new cursorCount());
      processMap.put("openJoinCursor", new openJoinCursor());
      processMap.put("closeJoinCursorHandle", new closeJoinCursorHandle());
      processMap.put("joinCursorGet", new joinCursorGet());
      processMap.put("beginTransaction", new beginTransaction());
      processMap.put("txnAbort", new txnAbort());
      processMap.put("txnCommit", new txnCommit());
      processMap.put("txnGetPriority", new txnGetPriority());
      processMap.put("txnSetPriority", new txnSetPriority());
      processMap.put("openSequence", new openSequence());
      processMap.put("closeSequenceHandle", new closeSequenceHandle());
      processMap.put("removeSequence", new removeSequence());
      processMap.put("sequenceGet", new sequenceGet());
      processMap.put("getEnvStatistics", new getEnvStatistics());
      processMap.put("getDatabaseStatistics", new getDatabaseStatistics());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class isProtocolVersionSupported<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isProtocolVersionSupported_args> {
      public isProtocolVersionSupported() {
        super("isProtocolVersionSupported");
      }

      public isProtocolVersionSupported_args getEmptyArgsInstance() {
        return new isProtocolVersionSupported_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isProtocolVersionSupported_result getResult(I iface, isProtocolVersionSupported_args args) throws org.apache.thrift.TException {
        isProtocolVersionSupported_result result = new isProtocolVersionSupported_result();
        result.success = iface.isProtocolVersionSupported(args.clientVersion);
        return result;
      }
    }

    public static class getBdbVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBdbVersion_args> {
      public getBdbVersion() {
        super("getBdbVersion");
      }

      public getBdbVersion_args getEmptyArgsInstance() {
        return new getBdbVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBdbVersion_result getResult(I iface, getBdbVersion_args args) throws org.apache.thrift.TException {
        getBdbVersion_result result = new getBdbVersion_result();
        result.success = iface.getBdbVersion();
        return result;
      }
    }

    public static class shutdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdown_args> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, shutdown_args args) throws org.apache.thrift.TException {
        iface.shutdown();
        return null;
      }
    }

    public static class openEnvironment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openEnvironment_args> {
      public openEnvironment() {
        super("openEnvironment");
      }

      public openEnvironment_args getEmptyArgsInstance() {
        return new openEnvironment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openEnvironment_result getResult(I iface, openEnvironment_args args) throws org.apache.thrift.TException {
        openEnvironment_result result = new openEnvironment_result();
        try {
          result.success = iface.openEnvironment(args.homeDir, args.envConfig);
        } catch (TIOException ioe) {
          result.ioe = ioe;
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class closeEnvironmentHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeEnvironmentHandle_args> {
      public closeEnvironmentHandle() {
        super("closeEnvironmentHandle");
      }

      public closeEnvironmentHandle_args getEmptyArgsInstance() {
        return new closeEnvironmentHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeEnvironmentHandle_result getResult(I iface, closeEnvironmentHandle_args args) throws org.apache.thrift.TException {
        closeEnvironmentHandle_result result = new closeEnvironmentHandle_result();
        try {
          iface.closeEnvironmentHandle(args.env);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class closeEnvironmentHandles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeEnvironmentHandles_args> {
      public closeEnvironmentHandles() {
        super("closeEnvironmentHandles");
      }

      public closeEnvironmentHandles_args getEmptyArgsInstance() {
        return new closeEnvironmentHandles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeEnvironmentHandles_result getResult(I iface, closeEnvironmentHandles_args args) throws org.apache.thrift.TException {
        closeEnvironmentHandles_result result = new closeEnvironmentHandles_result();
        try {
          iface.closeEnvironmentHandles(args.homeDir, args.minIdleInMilli);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class deleteEnvironmentAndDatabases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEnvironmentAndDatabases_args> {
      public deleteEnvironmentAndDatabases() {
        super("deleteEnvironmentAndDatabases");
      }

      public deleteEnvironmentAndDatabases_args getEmptyArgsInstance() {
        return new deleteEnvironmentAndDatabases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEnvironmentAndDatabases_result getResult(I iface, deleteEnvironmentAndDatabases_args args) throws org.apache.thrift.TException {
        deleteEnvironmentAndDatabases_result result = new deleteEnvironmentAndDatabases_result();
        try {
          iface.deleteEnvironmentAndDatabases(args.homeDir, args.force);
        } catch (TFileNotFoundException fe) {
          result.fe = fe;
        } catch (TIOException ioe) {
          result.ioe = ioe;
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getEnvironmentConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEnvironmentConfig_args> {
      public getEnvironmentConfig() {
        super("getEnvironmentConfig");
      }

      public getEnvironmentConfig_args getEmptyArgsInstance() {
        return new getEnvironmentConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEnvironmentConfig_result getResult(I iface, getEnvironmentConfig_args args) throws org.apache.thrift.TException {
        getEnvironmentConfig_result result = new getEnvironmentConfig_result();
        try {
          result.success = iface.getEnvironmentConfig(args.env);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class setEnvironmentConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setEnvironmentConfig_args> {
      public setEnvironmentConfig() {
        super("setEnvironmentConfig");
      }

      public setEnvironmentConfig_args getEmptyArgsInstance() {
        return new setEnvironmentConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setEnvironmentConfig_result getResult(I iface, setEnvironmentConfig_args args) throws org.apache.thrift.TException {
        setEnvironmentConfig_result result = new setEnvironmentConfig_result();
        try {
          iface.setEnvironmentConfig(args.env, args.envConfig);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class removeDatabase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeDatabase_args> {
      public removeDatabase() {
        super("removeDatabase");
      }

      public removeDatabase_args getEmptyArgsInstance() {
        return new removeDatabase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeDatabase_result getResult(I iface, removeDatabase_args args) throws org.apache.thrift.TException {
        removeDatabase_result result = new removeDatabase_result();
        try {
          iface.removeDatabase(args.env, args.txn, args.fileName, args.databaseName, args.force);
        } catch (TIOException ioe) {
          result.ioe = ioe;
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class renameDatabase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameDatabase_args> {
      public renameDatabase() {
        super("renameDatabase");
      }

      public renameDatabase_args getEmptyArgsInstance() {
        return new renameDatabase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public renameDatabase_result getResult(I iface, renameDatabase_args args) throws org.apache.thrift.TException {
        renameDatabase_result result = new renameDatabase_result();
        try {
          iface.renameDatabase(args.env, args.txn, args.fileName, args.databaseName, args.newName, args.force);
        } catch (TIOException ioe) {
          result.ioe = ioe;
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class checkpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkpoint_args> {
      public checkpoint() {
        super("checkpoint");
      }

      public checkpoint_args getEmptyArgsInstance() {
        return new checkpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkpoint_result getResult(I iface, checkpoint_args args) throws org.apache.thrift.TException {
        checkpoint_result result = new checkpoint_result();
        try {
          iface.checkpoint(args.env, args.kbytes, args.min, args.force);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class openDatabase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openDatabase_args> {
      public openDatabase() {
        super("openDatabase");
      }

      public openDatabase_args getEmptyArgsInstance() {
        return new openDatabase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openDatabase_result getResult(I iface, openDatabase_args args) throws org.apache.thrift.TException {
        openDatabase_result result = new openDatabase_result();
        try {
          result.success = iface.openDatabase(args.env, args.txn, args.fileName, args.databaseName, args.dbConfig);
        } catch (TIOException ioe) {
          result.ioe = ioe;
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class openSecondaryDatabase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openSecondaryDatabase_args> {
      public openSecondaryDatabase() {
        super("openSecondaryDatabase");
      }

      public openSecondaryDatabase_args getEmptyArgsInstance() {
        return new openSecondaryDatabase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openSecondaryDatabase_result getResult(I iface, openSecondaryDatabase_args args) throws org.apache.thrift.TException {
        openSecondaryDatabase_result result = new openSecondaryDatabase_result();
        try {
          result.success = iface.openSecondaryDatabase(args.env, args.txn, args.fileName, args.databaseName, args.primaryDb, args.sdbConfig);
        } catch (TIOException ioe) {
          result.ioe = ioe;
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class closeDatabaseHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeDatabaseHandle_args> {
      public closeDatabaseHandle() {
        super("closeDatabaseHandle");
      }

      public closeDatabaseHandle_args getEmptyArgsInstance() {
        return new closeDatabaseHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeDatabaseHandle_result getResult(I iface, closeDatabaseHandle_args args) throws org.apache.thrift.TException {
        closeDatabaseHandle_result result = new closeDatabaseHandle_result();
        try {
          iface.closeDatabaseHandle(args.db);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class closeDatabaseHandles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeDatabaseHandles_args> {
      public closeDatabaseHandles() {
        super("closeDatabaseHandles");
      }

      public closeDatabaseHandles_args getEmptyArgsInstance() {
        return new closeDatabaseHandles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeDatabaseHandles_result getResult(I iface, closeDatabaseHandles_args args) throws org.apache.thrift.TException {
        closeDatabaseHandles_result result = new closeDatabaseHandles_result();
        try {
          iface.closeDatabaseHandles(args.envHomeDir, args.fileName, args.databaseName, args.minIdleInMilli);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getDatabaseConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDatabaseConfig_args> {
      public getDatabaseConfig() {
        super("getDatabaseConfig");
      }

      public getDatabaseConfig_args getEmptyArgsInstance() {
        return new getDatabaseConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDatabaseConfig_result getResult(I iface, getDatabaseConfig_args args) throws org.apache.thrift.TException {
        getDatabaseConfig_result result = new getDatabaseConfig_result();
        try {
          result.success = iface.getDatabaseConfig(args.db);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class setDatabaseConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDatabaseConfig_args> {
      public setDatabaseConfig() {
        super("setDatabaseConfig");
      }

      public setDatabaseConfig_args getEmptyArgsInstance() {
        return new setDatabaseConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setDatabaseConfig_result getResult(I iface, setDatabaseConfig_args args) throws org.apache.thrift.TException {
        setDatabaseConfig_result result = new setDatabaseConfig_result();
        try {
          iface.setDatabaseConfig(args.db, args.dbConfig);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbGet_args> {
      public dbGet() {
        super("dbGet");
      }

      public dbGet_args getEmptyArgsInstance() {
        return new dbGet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbGet_result getResult(I iface, dbGet_args args) throws org.apache.thrift.TException {
        dbGet_result result = new dbGet_result();
        try {
          result.success = iface.dbGet(args.db, args.txn, args.keyData, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbGetWithPKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbGetWithPKey_args> {
      public dbGetWithPKey() {
        super("dbGetWithPKey");
      }

      public dbGetWithPKey_args getEmptyArgsInstance() {
        return new dbGetWithPKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbGetWithPKey_result getResult(I iface, dbGetWithPKey_args args) throws org.apache.thrift.TException {
        dbGetWithPKey_result result = new dbGetWithPKey_result();
        try {
          result.success = iface.dbGetWithPKey(args.sdb, args.txn, args.keyPKey, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbPut_args> {
      public dbPut() {
        super("dbPut");
      }

      public dbPut_args getEmptyArgsInstance() {
        return new dbPut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbPut_result getResult(I iface, dbPut_args args) throws org.apache.thrift.TException {
        dbPut_result result = new dbPut_result();
        try {
          result.success = iface.dbPut(args.db, args.txn, args.pairs, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbDelete_args> {
      public dbDelete() {
        super("dbDelete");
      }

      public dbDelete_args getEmptyArgsInstance() {
        return new dbDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbDelete_result getResult(I iface, dbDelete_args args) throws org.apache.thrift.TException {
        dbDelete_result result = new dbDelete_result();
        try {
          result.success = iface.dbDelete(args.db, args.txn, args.keyOrPairs);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbKeyExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbKeyExists_args> {
      public dbKeyExists() {
        super("dbKeyExists");
      }

      public dbKeyExists_args getEmptyArgsInstance() {
        return new dbKeyExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbKeyExists_result getResult(I iface, dbKeyExists_args args) throws org.apache.thrift.TException {
        dbKeyExists_result result = new dbKeyExists_result();
        try {
          result.success = iface.dbKeyExists(args.db, args.txn, args.key);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbKeyRange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbKeyRange_args> {
      public dbKeyRange() {
        super("dbKeyRange");
      }

      public dbKeyRange_args getEmptyArgsInstance() {
        return new dbKeyRange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbKeyRange_result getResult(I iface, dbKeyRange_args args) throws org.apache.thrift.TException {
        dbKeyRange_result result = new dbKeyRange_result();
        try {
          result.success = iface.dbKeyRange(args.db, args.txn, args.key);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbCompact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbCompact_args> {
      public dbCompact() {
        super("dbCompact");
      }

      public dbCompact_args getEmptyArgsInstance() {
        return new dbCompact_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbCompact_result getResult(I iface, dbCompact_args args) throws org.apache.thrift.TException {
        dbCompact_result result = new dbCompact_result();
        try {
          result.success = iface.dbCompact(args.db, args.txn, args.start, args.stop, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class dbTruncate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbTruncate_args> {
      public dbTruncate() {
        super("dbTruncate");
      }

      public dbTruncate_args getEmptyArgsInstance() {
        return new dbTruncate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dbTruncate_result getResult(I iface, dbTruncate_args args) throws org.apache.thrift.TException {
        dbTruncate_result result = new dbTruncate_result();
        try {
          result.success = iface.dbTruncate(args.db, args.txn, args.countRecords);
          result.setSuccessIsSet(true);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class openCursor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openCursor_args> {
      public openCursor() {
        super("openCursor");
      }

      public openCursor_args getEmptyArgsInstance() {
        return new openCursor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openCursor_result getResult(I iface, openCursor_args args) throws org.apache.thrift.TException {
        openCursor_result result = new openCursor_result();
        try {
          result.success = iface.openCursor(args.db, args.txn, args.cursorConfig);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class closeCursorHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeCursorHandle_args> {
      public closeCursorHandle() {
        super("closeCursorHandle");
      }

      public closeCursorHandle_args getEmptyArgsInstance() {
        return new closeCursorHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeCursorHandle_result getResult(I iface, closeCursorHandle_args args) throws org.apache.thrift.TException {
        closeCursorHandle_result result = new closeCursorHandle_result();
        try {
          iface.closeCursorHandle(args.cursor);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getCursorConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCursorConfig_args> {
      public getCursorConfig() {
        super("getCursorConfig");
      }

      public getCursorConfig_args getEmptyArgsInstance() {
        return new getCursorConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCursorConfig_result getResult(I iface, getCursorConfig_args args) throws org.apache.thrift.TException {
        getCursorConfig_result result = new getCursorConfig_result();
        try {
          result.success = iface.getCursorConfig(args.cursor);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getCursorCachePriority<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCursorCachePriority_args> {
      public getCursorCachePriority() {
        super("getCursorCachePriority");
      }

      public getCursorCachePriority_args getEmptyArgsInstance() {
        return new getCursorCachePriority_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCursorCachePriority_result getResult(I iface, getCursorCachePriority_args args) throws org.apache.thrift.TException {
        getCursorCachePriority_result result = new getCursorCachePriority_result();
        try {
          result.success = iface.getCursorCachePriority(args.cursor);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class setCursorCachePriority<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCursorCachePriority_args> {
      public setCursorCachePriority() {
        super("setCursorCachePriority");
      }

      public setCursorCachePriority_args getEmptyArgsInstance() {
        return new setCursorCachePriority_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setCursorCachePriority_result getResult(I iface, setCursorCachePriority_args args) throws org.apache.thrift.TException {
        setCursorCachePriority_result result = new setCursorCachePriority_result();
        try {
          iface.setCursorCachePriority(args.cursor, args.priority);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class cursorGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cursorGet_args> {
      public cursorGet() {
        super("cursorGet");
      }

      public cursorGet_args getEmptyArgsInstance() {
        return new cursorGet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cursorGet_result getResult(I iface, cursorGet_args args) throws org.apache.thrift.TException {
        cursorGet_result result = new cursorGet_result();
        try {
          result.success = iface.cursorGet(args.cursor, args.keyData, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class cursorGetWithPKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cursorGetWithPKey_args> {
      public cursorGetWithPKey() {
        super("cursorGetWithPKey");
      }

      public cursorGetWithPKey_args getEmptyArgsInstance() {
        return new cursorGetWithPKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cursorGetWithPKey_result getResult(I iface, cursorGetWithPKey_args args) throws org.apache.thrift.TException {
        cursorGetWithPKey_result result = new cursorGetWithPKey_result();
        try {
          result.success = iface.cursorGetWithPKey(args.cursor, args.keyPKey, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class cursorPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cursorPut_args> {
      public cursorPut() {
        super("cursorPut");
      }

      public cursorPut_args getEmptyArgsInstance() {
        return new cursorPut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cursorPut_result getResult(I iface, cursorPut_args args) throws org.apache.thrift.TException {
        cursorPut_result result = new cursorPut_result();
        try {
          result.success = iface.cursorPut(args.cursor, args.pair, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class cursorDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cursorDelete_args> {
      public cursorDelete() {
        super("cursorDelete");
      }

      public cursorDelete_args getEmptyArgsInstance() {
        return new cursorDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cursorDelete_result getResult(I iface, cursorDelete_args args) throws org.apache.thrift.TException {
        cursorDelete_result result = new cursorDelete_result();
        try {
          result.success = iface.cursorDelete(args.cursor);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class cursorDup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cursorDup_args> {
      public cursorDup() {
        super("cursorDup");
      }

      public cursorDup_args getEmptyArgsInstance() {
        return new cursorDup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cursorDup_result getResult(I iface, cursorDup_args args) throws org.apache.thrift.TException {
        cursorDup_result result = new cursorDup_result();
        try {
          result.success = iface.cursorDup(args.cursor, args.samePos);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class cursorCompare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cursorCompare_args> {
      public cursorCompare() {
        super("cursorCompare");
      }

      public cursorCompare_args getEmptyArgsInstance() {
        return new cursorCompare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cursorCompare_result getResult(I iface, cursorCompare_args args) throws org.apache.thrift.TException {
        cursorCompare_result result = new cursorCompare_result();
        try {
          result.success = iface.cursorCompare(args.cursor1, args.cursor2);
          result.setSuccessIsSet(true);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class cursorCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cursorCount_args> {
      public cursorCount() {
        super("cursorCount");
      }

      public cursorCount_args getEmptyArgsInstance() {
        return new cursorCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cursorCount_result getResult(I iface, cursorCount_args args) throws org.apache.thrift.TException {
        cursorCount_result result = new cursorCount_result();
        try {
          result.success = iface.cursorCount(args.cursor);
          result.setSuccessIsSet(true);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class openJoinCursor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openJoinCursor_args> {
      public openJoinCursor() {
        super("openJoinCursor");
      }

      public openJoinCursor_args getEmptyArgsInstance() {
        return new openJoinCursor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openJoinCursor_result getResult(I iface, openJoinCursor_args args) throws org.apache.thrift.TException {
        openJoinCursor_result result = new openJoinCursor_result();
        try {
          result.success = iface.openJoinCursor(args.pdb, args.scursors, args.sortCursors);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class closeJoinCursorHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeJoinCursorHandle_args> {
      public closeJoinCursorHandle() {
        super("closeJoinCursorHandle");
      }

      public closeJoinCursorHandle_args getEmptyArgsInstance() {
        return new closeJoinCursorHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeJoinCursorHandle_result getResult(I iface, closeJoinCursorHandle_args args) throws org.apache.thrift.TException {
        closeJoinCursorHandle_result result = new closeJoinCursorHandle_result();
        try {
          iface.closeJoinCursorHandle(args.cursor);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class joinCursorGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, joinCursorGet_args> {
      public joinCursorGet() {
        super("joinCursorGet");
      }

      public joinCursorGet_args getEmptyArgsInstance() {
        return new joinCursorGet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public joinCursorGet_result getResult(I iface, joinCursorGet_args args) throws org.apache.thrift.TException {
        joinCursorGet_result result = new joinCursorGet_result();
        try {
          result.success = iface.joinCursorGet(args.cursor, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class beginTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginTransaction_args> {
      public beginTransaction() {
        super("beginTransaction");
      }

      public beginTransaction_args getEmptyArgsInstance() {
        return new beginTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginTransaction_result getResult(I iface, beginTransaction_args args) throws org.apache.thrift.TException {
        beginTransaction_result result = new beginTransaction_result();
        try {
          result.success = iface.beginTransaction(args.env, args.parent, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class txnAbort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, txnAbort_args> {
      public txnAbort() {
        super("txnAbort");
      }

      public txnAbort_args getEmptyArgsInstance() {
        return new txnAbort_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public txnAbort_result getResult(I iface, txnAbort_args args) throws org.apache.thrift.TException {
        txnAbort_result result = new txnAbort_result();
        try {
          iface.txnAbort(args.txn);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class txnCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, txnCommit_args> {
      public txnCommit() {
        super("txnCommit");
      }

      public txnCommit_args getEmptyArgsInstance() {
        return new txnCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public txnCommit_result getResult(I iface, txnCommit_args args) throws org.apache.thrift.TException {
        txnCommit_result result = new txnCommit_result();
        try {
          iface.txnCommit(args.txn, args.durability);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class txnGetPriority<I extends Iface> extends org.apache.thrift.ProcessFunction<I, txnGetPriority_args> {
      public txnGetPriority() {
        super("txnGetPriority");
      }

      public txnGetPriority_args getEmptyArgsInstance() {
        return new txnGetPriority_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public txnGetPriority_result getResult(I iface, txnGetPriority_args args) throws org.apache.thrift.TException {
        txnGetPriority_result result = new txnGetPriority_result();
        try {
          result.success = iface.txnGetPriority(args.txn);
          result.setSuccessIsSet(true);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class txnSetPriority<I extends Iface> extends org.apache.thrift.ProcessFunction<I, txnSetPriority_args> {
      public txnSetPriority() {
        super("txnSetPriority");
      }

      public txnSetPriority_args getEmptyArgsInstance() {
        return new txnSetPriority_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public txnSetPriority_result getResult(I iface, txnSetPriority_args args) throws org.apache.thrift.TException {
        txnSetPriority_result result = new txnSetPriority_result();
        try {
          iface.txnSetPriority(args.txn, args.priority);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class openSequence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openSequence_args> {
      public openSequence() {
        super("openSequence");
      }

      public openSequence_args getEmptyArgsInstance() {
        return new openSequence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openSequence_result getResult(I iface, openSequence_args args) throws org.apache.thrift.TException {
        openSequence_result result = new openSequence_result();
        try {
          result.success = iface.openSequence(args.db, args.txn, args.key, args.config);
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class closeSequenceHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeSequenceHandle_args> {
      public closeSequenceHandle() {
        super("closeSequenceHandle");
      }

      public closeSequenceHandle_args getEmptyArgsInstance() {
        return new closeSequenceHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeSequenceHandle_result getResult(I iface, closeSequenceHandle_args args) throws org.apache.thrift.TException {
        closeSequenceHandle_result result = new closeSequenceHandle_result();
        try {
          iface.closeSequenceHandle(args.seq);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class removeSequence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSequence_args> {
      public removeSequence() {
        super("removeSequence");
      }

      public removeSequence_args getEmptyArgsInstance() {
        return new removeSequence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeSequence_result getResult(I iface, removeSequence_args args) throws org.apache.thrift.TException {
        removeSequence_result result = new removeSequence_result();
        try {
          iface.removeSequence(args.db, args.txn, args.key, args.isAutoCommitNoSync, args.force);
        } catch (TResourceInUseException iue) {
          result.iue = iue;
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class sequenceGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sequenceGet_args> {
      public sequenceGet() {
        super("sequenceGet");
      }

      public sequenceGet_args getEmptyArgsInstance() {
        return new sequenceGet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sequenceGet_result getResult(I iface, sequenceGet_args args) throws org.apache.thrift.TException {
        sequenceGet_result result = new sequenceGet_result();
        try {
          result.success = iface.sequenceGet(args.seq, args.txn, args.delta);
          result.setSuccessIsSet(true);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getEnvStatistics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEnvStatistics_args> {
      public getEnvStatistics() {
        super("getEnvStatistics");
      }

      public getEnvStatistics_args getEmptyArgsInstance() {
        return new getEnvStatistics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEnvStatistics_result getResult(I iface, getEnvStatistics_args args) throws org.apache.thrift.TException {
        getEnvStatistics_result result = new getEnvStatistics_result();
        try {
          result.success = iface.getEnvStatistics(args.env, args.config);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getDatabaseStatistics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDatabaseStatistics_args> {
      public getDatabaseStatistics() {
        super("getDatabaseStatistics");
      }

      public getDatabaseStatistics_args getEmptyArgsInstance() {
        return new getDatabaseStatistics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDatabaseStatistics_result getResult(I iface, getDatabaseStatistics_args args) throws org.apache.thrift.TException {
        getDatabaseStatistics_result result = new getDatabaseStatistics_result();
        try {
          result.success = iface.getDatabaseStatistics(args.db, args.txn, args.fast);
        } catch (TDatabaseException dbe) {
          result.dbe = dbe;
        } catch (TRuntimeException re) {
          result.re = re;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("isProtocolVersionSupported", new isProtocolVersionSupported());
      processMap.put("getBdbVersion", new getBdbVersion());
      processMap.put("shutdown", new shutdown());
      processMap.put("openEnvironment", new openEnvironment());
      processMap.put("closeEnvironmentHandle", new closeEnvironmentHandle());
      processMap.put("closeEnvironmentHandles", new closeEnvironmentHandles());
      processMap.put("deleteEnvironmentAndDatabases", new deleteEnvironmentAndDatabases());
      processMap.put("getEnvironmentConfig", new getEnvironmentConfig());
      processMap.put("setEnvironmentConfig", new setEnvironmentConfig());
      processMap.put("removeDatabase", new removeDatabase());
      processMap.put("renameDatabase", new renameDatabase());
      processMap.put("checkpoint", new checkpoint());
      processMap.put("openDatabase", new openDatabase());
      processMap.put("openSecondaryDatabase", new openSecondaryDatabase());
      processMap.put("closeDatabaseHandle", new closeDatabaseHandle());
      processMap.put("closeDatabaseHandles", new closeDatabaseHandles());
      processMap.put("getDatabaseConfig", new getDatabaseConfig());
      processMap.put("setDatabaseConfig", new setDatabaseConfig());
      processMap.put("dbGet", new dbGet());
      processMap.put("dbGetWithPKey", new dbGetWithPKey());
      processMap.put("dbPut", new dbPut());
      processMap.put("dbDelete", new dbDelete());
      processMap.put("dbKeyExists", new dbKeyExists());
      processMap.put("dbKeyRange", new dbKeyRange());
      processMap.put("dbCompact", new dbCompact());
      processMap.put("dbTruncate", new dbTruncate());
      processMap.put("openCursor", new openCursor());
      processMap.put("closeCursorHandle", new closeCursorHandle());
      processMap.put("getCursorConfig", new getCursorConfig());
      processMap.put("getCursorCachePriority", new getCursorCachePriority());
      processMap.put("setCursorCachePriority", new setCursorCachePriority());
      processMap.put("cursorGet", new cursorGet());
      processMap.put("cursorGetWithPKey", new cursorGetWithPKey());
      processMap.put("cursorPut", new cursorPut());
      processMap.put("cursorDelete", new cursorDelete());
      processMap.put("cursorDup", new cursorDup());
      processMap.put("cursorCompare", new cursorCompare());
      processMap.put("cursorCount", new cursorCount());
      processMap.put("openJoinCursor", new openJoinCursor());
      processMap.put("closeJoinCursorHandle", new closeJoinCursorHandle());
      processMap.put("joinCursorGet", new joinCursorGet());
      processMap.put("beginTransaction", new beginTransaction());
      processMap.put("txnAbort", new txnAbort());
      processMap.put("txnCommit", new txnCommit());
      processMap.put("txnGetPriority", new txnGetPriority());
      processMap.put("txnSetPriority", new txnSetPriority());
      processMap.put("openSequence", new openSequence());
      processMap.put("closeSequenceHandle", new closeSequenceHandle());
      processMap.put("removeSequence", new removeSequence());
      processMap.put("sequenceGet", new sequenceGet());
      processMap.put("getEnvStatistics", new getEnvStatistics());
      processMap.put("getDatabaseStatistics", new getDatabaseStatistics());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class isProtocolVersionSupported<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isProtocolVersionSupported_args, TProtocolVersionTestResult> {
      public isProtocolVersionSupported() {
        super("isProtocolVersionSupported");
      }

      public isProtocolVersionSupported_args getEmptyArgsInstance() {
        return new isProtocolVersionSupported_args();
      }

      public AsyncMethodCallback<TProtocolVersionTestResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TProtocolVersionTestResult>() { 
          public void onComplete(TProtocolVersionTestResult o) {
            isProtocolVersionSupported_result result = new isProtocolVersionSupported_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isProtocolVersionSupported_result result = new isProtocolVersionSupported_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isProtocolVersionSupported_args args, org.apache.thrift.async.AsyncMethodCallback<TProtocolVersionTestResult> resultHandler) throws TException {
        iface.isProtocolVersionSupported(args.clientVersion,resultHandler);
      }
    }

    public static class getBdbVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBdbVersion_args, String> {
      public getBdbVersion() {
        super("getBdbVersion");
      }

      public getBdbVersion_args getEmptyArgsInstance() {
        return new getBdbVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getBdbVersion_result result = new getBdbVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBdbVersion_result result = new getBdbVersion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBdbVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getBdbVersion(resultHandler);
      }
    }

    public static class shutdown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdown_args, Void> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, shutdown_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.shutdown(resultHandler);
      }
    }

    public static class openEnvironment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openEnvironment_args, TEnvironment> {
      public openEnvironment() {
        super("openEnvironment");
      }

      public openEnvironment_args getEmptyArgsInstance() {
        return new openEnvironment_args();
      }

      public AsyncMethodCallback<TEnvironment> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TEnvironment>() { 
          public void onComplete(TEnvironment o) {
            openEnvironment_result result = new openEnvironment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openEnvironment_result result = new openEnvironment_result();
            if (e instanceof TIOException) {
                        result.ioe = (TIOException) e;
                        result.setIoeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openEnvironment_args args, org.apache.thrift.async.AsyncMethodCallback<TEnvironment> resultHandler) throws TException {
        iface.openEnvironment(args.homeDir, args.envConfig,resultHandler);
      }
    }

    public static class closeEnvironmentHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeEnvironmentHandle_args, Void> {
      public closeEnvironmentHandle() {
        super("closeEnvironmentHandle");
      }

      public closeEnvironmentHandle_args getEmptyArgsInstance() {
        return new closeEnvironmentHandle_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeEnvironmentHandle_result result = new closeEnvironmentHandle_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeEnvironmentHandle_result result = new closeEnvironmentHandle_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeEnvironmentHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeEnvironmentHandle(args.env,resultHandler);
      }
    }

    public static class closeEnvironmentHandles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeEnvironmentHandles_args, Void> {
      public closeEnvironmentHandles() {
        super("closeEnvironmentHandles");
      }

      public closeEnvironmentHandles_args getEmptyArgsInstance() {
        return new closeEnvironmentHandles_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeEnvironmentHandles_result result = new closeEnvironmentHandles_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeEnvironmentHandles_result result = new closeEnvironmentHandles_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeEnvironmentHandles_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeEnvironmentHandles(args.homeDir, args.minIdleInMilli,resultHandler);
      }
    }

    public static class deleteEnvironmentAndDatabases<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteEnvironmentAndDatabases_args, Void> {
      public deleteEnvironmentAndDatabases() {
        super("deleteEnvironmentAndDatabases");
      }

      public deleteEnvironmentAndDatabases_args getEmptyArgsInstance() {
        return new deleteEnvironmentAndDatabases_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteEnvironmentAndDatabases_result result = new deleteEnvironmentAndDatabases_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteEnvironmentAndDatabases_result result = new deleteEnvironmentAndDatabases_result();
            if (e instanceof TFileNotFoundException) {
                        result.fe = (TFileNotFoundException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TIOException) {
                        result.ioe = (TIOException) e;
                        result.setIoeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteEnvironmentAndDatabases_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteEnvironmentAndDatabases(args.homeDir, args.force,resultHandler);
      }
    }

    public static class getEnvironmentConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEnvironmentConfig_args, TEnvironmentConfig> {
      public getEnvironmentConfig() {
        super("getEnvironmentConfig");
      }

      public getEnvironmentConfig_args getEmptyArgsInstance() {
        return new getEnvironmentConfig_args();
      }

      public AsyncMethodCallback<TEnvironmentConfig> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TEnvironmentConfig>() { 
          public void onComplete(TEnvironmentConfig o) {
            getEnvironmentConfig_result result = new getEnvironmentConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEnvironmentConfig_result result = new getEnvironmentConfig_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEnvironmentConfig_args args, org.apache.thrift.async.AsyncMethodCallback<TEnvironmentConfig> resultHandler) throws TException {
        iface.getEnvironmentConfig(args.env,resultHandler);
      }
    }

    public static class setEnvironmentConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setEnvironmentConfig_args, Void> {
      public setEnvironmentConfig() {
        super("setEnvironmentConfig");
      }

      public setEnvironmentConfig_args getEmptyArgsInstance() {
        return new setEnvironmentConfig_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setEnvironmentConfig_result result = new setEnvironmentConfig_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setEnvironmentConfig_result result = new setEnvironmentConfig_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setEnvironmentConfig_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setEnvironmentConfig(args.env, args.envConfig,resultHandler);
      }
    }

    public static class removeDatabase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeDatabase_args, Void> {
      public removeDatabase() {
        super("removeDatabase");
      }

      public removeDatabase_args getEmptyArgsInstance() {
        return new removeDatabase_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeDatabase_result result = new removeDatabase_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeDatabase_result result = new removeDatabase_result();
            if (e instanceof TIOException) {
                        result.ioe = (TIOException) e;
                        result.setIoeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeDatabase_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeDatabase(args.env, args.txn, args.fileName, args.databaseName, args.force,resultHandler);
      }
    }

    public static class renameDatabase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameDatabase_args, Void> {
      public renameDatabase() {
        super("renameDatabase");
      }

      public renameDatabase_args getEmptyArgsInstance() {
        return new renameDatabase_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            renameDatabase_result result = new renameDatabase_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            renameDatabase_result result = new renameDatabase_result();
            if (e instanceof TIOException) {
                        result.ioe = (TIOException) e;
                        result.setIoeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renameDatabase_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.renameDatabase(args.env, args.txn, args.fileName, args.databaseName, args.newName, args.force,resultHandler);
      }
    }

    public static class checkpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkpoint_args, Void> {
      public checkpoint() {
        super("checkpoint");
      }

      public checkpoint_args getEmptyArgsInstance() {
        return new checkpoint_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            checkpoint_result result = new checkpoint_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkpoint_result result = new checkpoint_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkpoint_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.checkpoint(args.env, args.kbytes, args.min, args.force,resultHandler);
      }
    }

    public static class openDatabase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openDatabase_args, TDatabase> {
      public openDatabase() {
        super("openDatabase");
      }

      public openDatabase_args getEmptyArgsInstance() {
        return new openDatabase_args();
      }

      public AsyncMethodCallback<TDatabase> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TDatabase>() { 
          public void onComplete(TDatabase o) {
            openDatabase_result result = new openDatabase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openDatabase_result result = new openDatabase_result();
            if (e instanceof TIOException) {
                        result.ioe = (TIOException) e;
                        result.setIoeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openDatabase_args args, org.apache.thrift.async.AsyncMethodCallback<TDatabase> resultHandler) throws TException {
        iface.openDatabase(args.env, args.txn, args.fileName, args.databaseName, args.dbConfig,resultHandler);
      }
    }

    public static class openSecondaryDatabase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openSecondaryDatabase_args, TDatabase> {
      public openSecondaryDatabase() {
        super("openSecondaryDatabase");
      }

      public openSecondaryDatabase_args getEmptyArgsInstance() {
        return new openSecondaryDatabase_args();
      }

      public AsyncMethodCallback<TDatabase> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TDatabase>() { 
          public void onComplete(TDatabase o) {
            openSecondaryDatabase_result result = new openSecondaryDatabase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openSecondaryDatabase_result result = new openSecondaryDatabase_result();
            if (e instanceof TIOException) {
                        result.ioe = (TIOException) e;
                        result.setIoeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openSecondaryDatabase_args args, org.apache.thrift.async.AsyncMethodCallback<TDatabase> resultHandler) throws TException {
        iface.openSecondaryDatabase(args.env, args.txn, args.fileName, args.databaseName, args.primaryDb, args.sdbConfig,resultHandler);
      }
    }

    public static class closeDatabaseHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeDatabaseHandle_args, Void> {
      public closeDatabaseHandle() {
        super("closeDatabaseHandle");
      }

      public closeDatabaseHandle_args getEmptyArgsInstance() {
        return new closeDatabaseHandle_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeDatabaseHandle_result result = new closeDatabaseHandle_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeDatabaseHandle_result result = new closeDatabaseHandle_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeDatabaseHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeDatabaseHandle(args.db,resultHandler);
      }
    }

    public static class closeDatabaseHandles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeDatabaseHandles_args, Void> {
      public closeDatabaseHandles() {
        super("closeDatabaseHandles");
      }

      public closeDatabaseHandles_args getEmptyArgsInstance() {
        return new closeDatabaseHandles_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeDatabaseHandles_result result = new closeDatabaseHandles_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeDatabaseHandles_result result = new closeDatabaseHandles_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeDatabaseHandles_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeDatabaseHandles(args.envHomeDir, args.fileName, args.databaseName, args.minIdleInMilli,resultHandler);
      }
    }

    public static class getDatabaseConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDatabaseConfig_args, TDatabaseConfig> {
      public getDatabaseConfig() {
        super("getDatabaseConfig");
      }

      public getDatabaseConfig_args getEmptyArgsInstance() {
        return new getDatabaseConfig_args();
      }

      public AsyncMethodCallback<TDatabaseConfig> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TDatabaseConfig>() { 
          public void onComplete(TDatabaseConfig o) {
            getDatabaseConfig_result result = new getDatabaseConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDatabaseConfig_result result = new getDatabaseConfig_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDatabaseConfig_args args, org.apache.thrift.async.AsyncMethodCallback<TDatabaseConfig> resultHandler) throws TException {
        iface.getDatabaseConfig(args.db,resultHandler);
      }
    }

    public static class setDatabaseConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setDatabaseConfig_args, Void> {
      public setDatabaseConfig() {
        super("setDatabaseConfig");
      }

      public setDatabaseConfig_args getEmptyArgsInstance() {
        return new setDatabaseConfig_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setDatabaseConfig_result result = new setDatabaseConfig_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setDatabaseConfig_result result = new setDatabaseConfig_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setDatabaseConfig_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setDatabaseConfig(args.db, args.dbConfig,resultHandler);
      }
    }

    public static class dbGet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbGet_args, TGetResult> {
      public dbGet() {
        super("dbGet");
      }

      public dbGet_args getEmptyArgsInstance() {
        return new dbGet_args();
      }

      public AsyncMethodCallback<TGetResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGetResult>() { 
          public void onComplete(TGetResult o) {
            dbGet_result result = new dbGet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbGet_result result = new dbGet_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbGet_args args, org.apache.thrift.async.AsyncMethodCallback<TGetResult> resultHandler) throws TException {
        iface.dbGet(args.db, args.txn, args.keyData, args.config,resultHandler);
      }
    }

    public static class dbGetWithPKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbGetWithPKey_args, TGetWithPKeyResult> {
      public dbGetWithPKey() {
        super("dbGetWithPKey");
      }

      public dbGetWithPKey_args getEmptyArgsInstance() {
        return new dbGetWithPKey_args();
      }

      public AsyncMethodCallback<TGetWithPKeyResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGetWithPKeyResult>() { 
          public void onComplete(TGetWithPKeyResult o) {
            dbGetWithPKey_result result = new dbGetWithPKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbGetWithPKey_result result = new dbGetWithPKey_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbGetWithPKey_args args, org.apache.thrift.async.AsyncMethodCallback<TGetWithPKeyResult> resultHandler) throws TException {
        iface.dbGetWithPKey(args.sdb, args.txn, args.keyPKey, args.config,resultHandler);
      }
    }

    public static class dbPut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbPut_args, TPutResult> {
      public dbPut() {
        super("dbPut");
      }

      public dbPut_args getEmptyArgsInstance() {
        return new dbPut_args();
      }

      public AsyncMethodCallback<TPutResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TPutResult>() { 
          public void onComplete(TPutResult o) {
            dbPut_result result = new dbPut_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbPut_result result = new dbPut_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbPut_args args, org.apache.thrift.async.AsyncMethodCallback<TPutResult> resultHandler) throws TException {
        iface.dbPut(args.db, args.txn, args.pairs, args.config,resultHandler);
      }
    }

    public static class dbDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbDelete_args, TOperationStatus> {
      public dbDelete() {
        super("dbDelete");
      }

      public dbDelete_args getEmptyArgsInstance() {
        return new dbDelete_args();
      }

      public AsyncMethodCallback<TOperationStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TOperationStatus>() { 
          public void onComplete(TOperationStatus o) {
            dbDelete_result result = new dbDelete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbDelete_result result = new dbDelete_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbDelete_args args, org.apache.thrift.async.AsyncMethodCallback<TOperationStatus> resultHandler) throws TException {
        iface.dbDelete(args.db, args.txn, args.keyOrPairs,resultHandler);
      }
    }

    public static class dbKeyExists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbKeyExists_args, TOperationStatus> {
      public dbKeyExists() {
        super("dbKeyExists");
      }

      public dbKeyExists_args getEmptyArgsInstance() {
        return new dbKeyExists_args();
      }

      public AsyncMethodCallback<TOperationStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TOperationStatus>() { 
          public void onComplete(TOperationStatus o) {
            dbKeyExists_result result = new dbKeyExists_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbKeyExists_result result = new dbKeyExists_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbKeyExists_args args, org.apache.thrift.async.AsyncMethodCallback<TOperationStatus> resultHandler) throws TException {
        iface.dbKeyExists(args.db, args.txn, args.key,resultHandler);
      }
    }

    public static class dbKeyRange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbKeyRange_args, TKeyRangeResult> {
      public dbKeyRange() {
        super("dbKeyRange");
      }

      public dbKeyRange_args getEmptyArgsInstance() {
        return new dbKeyRange_args();
      }

      public AsyncMethodCallback<TKeyRangeResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TKeyRangeResult>() { 
          public void onComplete(TKeyRangeResult o) {
            dbKeyRange_result result = new dbKeyRange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbKeyRange_result result = new dbKeyRange_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbKeyRange_args args, org.apache.thrift.async.AsyncMethodCallback<TKeyRangeResult> resultHandler) throws TException {
        iface.dbKeyRange(args.db, args.txn, args.key,resultHandler);
      }
    }

    public static class dbCompact<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbCompact_args, TCompactResult> {
      public dbCompact() {
        super("dbCompact");
      }

      public dbCompact_args getEmptyArgsInstance() {
        return new dbCompact_args();
      }

      public AsyncMethodCallback<TCompactResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TCompactResult>() { 
          public void onComplete(TCompactResult o) {
            dbCompact_result result = new dbCompact_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbCompact_result result = new dbCompact_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbCompact_args args, org.apache.thrift.async.AsyncMethodCallback<TCompactResult> resultHandler) throws TException {
        iface.dbCompact(args.db, args.txn, args.start, args.stop, args.config,resultHandler);
      }
    }

    public static class dbTruncate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbTruncate_args, Integer> {
      public dbTruncate() {
        super("dbTruncate");
      }

      public dbTruncate_args getEmptyArgsInstance() {
        return new dbTruncate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            dbTruncate_result result = new dbTruncate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dbTruncate_result result = new dbTruncate_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbTruncate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.dbTruncate(args.db, args.txn, args.countRecords,resultHandler);
      }
    }

    public static class openCursor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openCursor_args, TCursor> {
      public openCursor() {
        super("openCursor");
      }

      public openCursor_args getEmptyArgsInstance() {
        return new openCursor_args();
      }

      public AsyncMethodCallback<TCursor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TCursor>() { 
          public void onComplete(TCursor o) {
            openCursor_result result = new openCursor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openCursor_result result = new openCursor_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openCursor_args args, org.apache.thrift.async.AsyncMethodCallback<TCursor> resultHandler) throws TException {
        iface.openCursor(args.db, args.txn, args.cursorConfig,resultHandler);
      }
    }

    public static class closeCursorHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeCursorHandle_args, Void> {
      public closeCursorHandle() {
        super("closeCursorHandle");
      }

      public closeCursorHandle_args getEmptyArgsInstance() {
        return new closeCursorHandle_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeCursorHandle_result result = new closeCursorHandle_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeCursorHandle_result result = new closeCursorHandle_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeCursorHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeCursorHandle(args.cursor,resultHandler);
      }
    }

    public static class getCursorConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCursorConfig_args, TCursorConfig> {
      public getCursorConfig() {
        super("getCursorConfig");
      }

      public getCursorConfig_args getEmptyArgsInstance() {
        return new getCursorConfig_args();
      }

      public AsyncMethodCallback<TCursorConfig> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TCursorConfig>() { 
          public void onComplete(TCursorConfig o) {
            getCursorConfig_result result = new getCursorConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCursorConfig_result result = new getCursorConfig_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCursorConfig_args args, org.apache.thrift.async.AsyncMethodCallback<TCursorConfig> resultHandler) throws TException {
        iface.getCursorConfig(args.cursor,resultHandler);
      }
    }

    public static class getCursorCachePriority<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCursorCachePriority_args, TCachePriority> {
      public getCursorCachePriority() {
        super("getCursorCachePriority");
      }

      public getCursorCachePriority_args getEmptyArgsInstance() {
        return new getCursorCachePriority_args();
      }

      public AsyncMethodCallback<TCachePriority> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TCachePriority>() { 
          public void onComplete(TCachePriority o) {
            getCursorCachePriority_result result = new getCursorCachePriority_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCursorCachePriority_result result = new getCursorCachePriority_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCursorCachePriority_args args, org.apache.thrift.async.AsyncMethodCallback<TCachePriority> resultHandler) throws TException {
        iface.getCursorCachePriority(args.cursor,resultHandler);
      }
    }

    public static class setCursorCachePriority<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setCursorCachePriority_args, Void> {
      public setCursorCachePriority() {
        super("setCursorCachePriority");
      }

      public setCursorCachePriority_args getEmptyArgsInstance() {
        return new setCursorCachePriority_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setCursorCachePriority_result result = new setCursorCachePriority_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setCursorCachePriority_result result = new setCursorCachePriority_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setCursorCachePriority_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setCursorCachePriority(args.cursor, args.priority,resultHandler);
      }
    }

    public static class cursorGet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cursorGet_args, TGetResult> {
      public cursorGet() {
        super("cursorGet");
      }

      public cursorGet_args getEmptyArgsInstance() {
        return new cursorGet_args();
      }

      public AsyncMethodCallback<TGetResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGetResult>() { 
          public void onComplete(TGetResult o) {
            cursorGet_result result = new cursorGet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cursorGet_result result = new cursorGet_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cursorGet_args args, org.apache.thrift.async.AsyncMethodCallback<TGetResult> resultHandler) throws TException {
        iface.cursorGet(args.cursor, args.keyData, args.config,resultHandler);
      }
    }

    public static class cursorGetWithPKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cursorGetWithPKey_args, TGetWithPKeyResult> {
      public cursorGetWithPKey() {
        super("cursorGetWithPKey");
      }

      public cursorGetWithPKey_args getEmptyArgsInstance() {
        return new cursorGetWithPKey_args();
      }

      public AsyncMethodCallback<TGetWithPKeyResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGetWithPKeyResult>() { 
          public void onComplete(TGetWithPKeyResult o) {
            cursorGetWithPKey_result result = new cursorGetWithPKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cursorGetWithPKey_result result = new cursorGetWithPKey_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cursorGetWithPKey_args args, org.apache.thrift.async.AsyncMethodCallback<TGetWithPKeyResult> resultHandler) throws TException {
        iface.cursorGetWithPKey(args.cursor, args.keyPKey, args.config,resultHandler);
      }
    }

    public static class cursorPut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cursorPut_args, TPutResult> {
      public cursorPut() {
        super("cursorPut");
      }

      public cursorPut_args getEmptyArgsInstance() {
        return new cursorPut_args();
      }

      public AsyncMethodCallback<TPutResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TPutResult>() { 
          public void onComplete(TPutResult o) {
            cursorPut_result result = new cursorPut_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cursorPut_result result = new cursorPut_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cursorPut_args args, org.apache.thrift.async.AsyncMethodCallback<TPutResult> resultHandler) throws TException {
        iface.cursorPut(args.cursor, args.pair, args.config,resultHandler);
      }
    }

    public static class cursorDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cursorDelete_args, TOperationStatus> {
      public cursorDelete() {
        super("cursorDelete");
      }

      public cursorDelete_args getEmptyArgsInstance() {
        return new cursorDelete_args();
      }

      public AsyncMethodCallback<TOperationStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TOperationStatus>() { 
          public void onComplete(TOperationStatus o) {
            cursorDelete_result result = new cursorDelete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cursorDelete_result result = new cursorDelete_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cursorDelete_args args, org.apache.thrift.async.AsyncMethodCallback<TOperationStatus> resultHandler) throws TException {
        iface.cursorDelete(args.cursor,resultHandler);
      }
    }

    public static class cursorDup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cursorDup_args, TCursor> {
      public cursorDup() {
        super("cursorDup");
      }

      public cursorDup_args getEmptyArgsInstance() {
        return new cursorDup_args();
      }

      public AsyncMethodCallback<TCursor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TCursor>() { 
          public void onComplete(TCursor o) {
            cursorDup_result result = new cursorDup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cursorDup_result result = new cursorDup_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cursorDup_args args, org.apache.thrift.async.AsyncMethodCallback<TCursor> resultHandler) throws TException {
        iface.cursorDup(args.cursor, args.samePos,resultHandler);
      }
    }

    public static class cursorCompare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cursorCompare_args, Short> {
      public cursorCompare() {
        super("cursorCompare");
      }

      public cursorCompare_args getEmptyArgsInstance() {
        return new cursorCompare_args();
      }

      public AsyncMethodCallback<Short> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Short>() { 
          public void onComplete(Short o) {
            cursorCompare_result result = new cursorCompare_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cursorCompare_result result = new cursorCompare_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cursorCompare_args args, org.apache.thrift.async.AsyncMethodCallback<Short> resultHandler) throws TException {
        iface.cursorCompare(args.cursor1, args.cursor2,resultHandler);
      }
    }

    public static class cursorCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cursorCount_args, Integer> {
      public cursorCount() {
        super("cursorCount");
      }

      public cursorCount_args getEmptyArgsInstance() {
        return new cursorCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            cursorCount_result result = new cursorCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cursorCount_result result = new cursorCount_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cursorCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.cursorCount(args.cursor,resultHandler);
      }
    }

    public static class openJoinCursor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openJoinCursor_args, TJoinCursor> {
      public openJoinCursor() {
        super("openJoinCursor");
      }

      public openJoinCursor_args getEmptyArgsInstance() {
        return new openJoinCursor_args();
      }

      public AsyncMethodCallback<TJoinCursor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TJoinCursor>() { 
          public void onComplete(TJoinCursor o) {
            openJoinCursor_result result = new openJoinCursor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openJoinCursor_result result = new openJoinCursor_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openJoinCursor_args args, org.apache.thrift.async.AsyncMethodCallback<TJoinCursor> resultHandler) throws TException {
        iface.openJoinCursor(args.pdb, args.scursors, args.sortCursors,resultHandler);
      }
    }

    public static class closeJoinCursorHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeJoinCursorHandle_args, Void> {
      public closeJoinCursorHandle() {
        super("closeJoinCursorHandle");
      }

      public closeJoinCursorHandle_args getEmptyArgsInstance() {
        return new closeJoinCursorHandle_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeJoinCursorHandle_result result = new closeJoinCursorHandle_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeJoinCursorHandle_result result = new closeJoinCursorHandle_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeJoinCursorHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeJoinCursorHandle(args.cursor,resultHandler);
      }
    }

    public static class joinCursorGet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, joinCursorGet_args, TGetResult> {
      public joinCursorGet() {
        super("joinCursorGet");
      }

      public joinCursorGet_args getEmptyArgsInstance() {
        return new joinCursorGet_args();
      }

      public AsyncMethodCallback<TGetResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGetResult>() { 
          public void onComplete(TGetResult o) {
            joinCursorGet_result result = new joinCursorGet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            joinCursorGet_result result = new joinCursorGet_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, joinCursorGet_args args, org.apache.thrift.async.AsyncMethodCallback<TGetResult> resultHandler) throws TException {
        iface.joinCursorGet(args.cursor, args.config,resultHandler);
      }
    }

    public static class beginTransaction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginTransaction_args, TTransaction> {
      public beginTransaction() {
        super("beginTransaction");
      }

      public beginTransaction_args getEmptyArgsInstance() {
        return new beginTransaction_args();
      }

      public AsyncMethodCallback<TTransaction> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TTransaction>() { 
          public void onComplete(TTransaction o) {
            beginTransaction_result result = new beginTransaction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            beginTransaction_result result = new beginTransaction_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginTransaction_args args, org.apache.thrift.async.AsyncMethodCallback<TTransaction> resultHandler) throws TException {
        iface.beginTransaction(args.env, args.parent, args.config,resultHandler);
      }
    }

    public static class txnAbort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, txnAbort_args, Void> {
      public txnAbort() {
        super("txnAbort");
      }

      public txnAbort_args getEmptyArgsInstance() {
        return new txnAbort_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            txnAbort_result result = new txnAbort_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            txnAbort_result result = new txnAbort_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, txnAbort_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.txnAbort(args.txn,resultHandler);
      }
    }

    public static class txnCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, txnCommit_args, Void> {
      public txnCommit() {
        super("txnCommit");
      }

      public txnCommit_args getEmptyArgsInstance() {
        return new txnCommit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            txnCommit_result result = new txnCommit_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            txnCommit_result result = new txnCommit_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, txnCommit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.txnCommit(args.txn, args.durability,resultHandler);
      }
    }

    public static class txnGetPriority<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, txnGetPriority_args, Integer> {
      public txnGetPriority() {
        super("txnGetPriority");
      }

      public txnGetPriority_args getEmptyArgsInstance() {
        return new txnGetPriority_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            txnGetPriority_result result = new txnGetPriority_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            txnGetPriority_result result = new txnGetPriority_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, txnGetPriority_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.txnGetPriority(args.txn,resultHandler);
      }
    }

    public static class txnSetPriority<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, txnSetPriority_args, Void> {
      public txnSetPriority() {
        super("txnSetPriority");
      }

      public txnSetPriority_args getEmptyArgsInstance() {
        return new txnSetPriority_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            txnSetPriority_result result = new txnSetPriority_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            txnSetPriority_result result = new txnSetPriority_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, txnSetPriority_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.txnSetPriority(args.txn, args.priority,resultHandler);
      }
    }

    public static class openSequence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openSequence_args, TSequence> {
      public openSequence() {
        super("openSequence");
      }

      public openSequence_args getEmptyArgsInstance() {
        return new openSequence_args();
      }

      public AsyncMethodCallback<TSequence> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TSequence>() { 
          public void onComplete(TSequence o) {
            openSequence_result result = new openSequence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openSequence_result result = new openSequence_result();
            if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openSequence_args args, org.apache.thrift.async.AsyncMethodCallback<TSequence> resultHandler) throws TException {
        iface.openSequence(args.db, args.txn, args.key, args.config,resultHandler);
      }
    }

    public static class closeSequenceHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeSequenceHandle_args, Void> {
      public closeSequenceHandle() {
        super("closeSequenceHandle");
      }

      public closeSequenceHandle_args getEmptyArgsInstance() {
        return new closeSequenceHandle_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeSequenceHandle_result result = new closeSequenceHandle_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeSequenceHandle_result result = new closeSequenceHandle_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeSequenceHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeSequenceHandle(args.seq,resultHandler);
      }
    }

    public static class removeSequence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeSequence_args, Void> {
      public removeSequence() {
        super("removeSequence");
      }

      public removeSequence_args getEmptyArgsInstance() {
        return new removeSequence_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeSequence_result result = new removeSequence_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeSequence_result result = new removeSequence_result();
            if (e instanceof TResourceInUseException) {
                        result.iue = (TResourceInUseException) e;
                        result.setIueIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeSequence_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeSequence(args.db, args.txn, args.key, args.isAutoCommitNoSync, args.force,resultHandler);
      }
    }

    public static class sequenceGet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sequenceGet_args, Long> {
      public sequenceGet() {
        super("sequenceGet");
      }

      public sequenceGet_args getEmptyArgsInstance() {
        return new sequenceGet_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            sequenceGet_result result = new sequenceGet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sequenceGet_result result = new sequenceGet_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sequenceGet_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.sequenceGet(args.seq, args.txn, args.delta,resultHandler);
      }
    }

    public static class getEnvStatistics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEnvStatistics_args, TEnvStatResult> {
      public getEnvStatistics() {
        super("getEnvStatistics");
      }

      public getEnvStatistics_args getEmptyArgsInstance() {
        return new getEnvStatistics_args();
      }

      public AsyncMethodCallback<TEnvStatResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TEnvStatResult>() { 
          public void onComplete(TEnvStatResult o) {
            getEnvStatistics_result result = new getEnvStatistics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEnvStatistics_result result = new getEnvStatistics_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEnvStatistics_args args, org.apache.thrift.async.AsyncMethodCallback<TEnvStatResult> resultHandler) throws TException {
        iface.getEnvStatistics(args.env, args.config,resultHandler);
      }
    }

    public static class getDatabaseStatistics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDatabaseStatistics_args, TDatabaseStatResult> {
      public getDatabaseStatistics() {
        super("getDatabaseStatistics");
      }

      public getDatabaseStatistics_args getEmptyArgsInstance() {
        return new getDatabaseStatistics_args();
      }

      public AsyncMethodCallback<TDatabaseStatResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TDatabaseStatResult>() { 
          public void onComplete(TDatabaseStatResult o) {
            getDatabaseStatistics_result result = new getDatabaseStatistics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDatabaseStatistics_result result = new getDatabaseStatistics_result();
            if (e instanceof TDatabaseException) {
                        result.dbe = (TDatabaseException) e;
                        result.setDbeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TRuntimeException) {
                        result.re = (TRuntimeException) e;
                        result.setReIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDatabaseStatistics_args args, org.apache.thrift.async.AsyncMethodCallback<TDatabaseStatResult> resultHandler) throws TException {
        iface.getDatabaseStatistics(args.db, args.txn, args.fast,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class isProtocolVersionSupported_args implements org.apache.thrift.TBase<isProtocolVersionSupported_args, isProtocolVersionSupported_args._Fields>, java.io.Serializable, Cloneable, Comparable<isProtocolVersionSupported_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isProtocolVersionSupported_args");

    private static final org.apache.thrift.protocol.TField CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clientVersion", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isProtocolVersionSupported_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isProtocolVersionSupported_argsTupleSchemeFactory());
    }

    public String clientVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_VERSION((short)1, "clientVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_VERSION
            return CLIENT_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("clientVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isProtocolVersionSupported_args.class, metaDataMap);
    }

    public isProtocolVersionSupported_args() {
    }

    public isProtocolVersionSupported_args(
      String clientVersion)
    {
      this();
      this.clientVersion = clientVersion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isProtocolVersionSupported_args(isProtocolVersionSupported_args other) {
      if (other.isSetClientVersion()) {
        this.clientVersion = other.clientVersion;
      }
    }

    public isProtocolVersionSupported_args deepCopy() {
      return new isProtocolVersionSupported_args(this);
    }

    @Override
    public void clear() {
      this.clientVersion = null;
    }

    public String getClientVersion() {
      return this.clientVersion;
    }

    public isProtocolVersionSupported_args setClientVersion(String clientVersion) {
      this.clientVersion = clientVersion;
      return this;
    }

    public void unsetClientVersion() {
      this.clientVersion = null;
    }

    /** Returns true if field clientVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetClientVersion() {
      return this.clientVersion != null;
    }

    public void setClientVersionIsSet(boolean value) {
      if (!value) {
        this.clientVersion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_VERSION:
        if (value == null) {
          unsetClientVersion();
        } else {
          setClientVersion((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_VERSION:
        return getClientVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_VERSION:
        return isSetClientVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isProtocolVersionSupported_args)
        return this.equals((isProtocolVersionSupported_args)that);
      return false;
    }

    public boolean equals(isProtocolVersionSupported_args that) {
      if (that == null)
        return false;

      boolean this_present_clientVersion = true && this.isSetClientVersion();
      boolean that_present_clientVersion = true && that.isSetClientVersion();
      if (this_present_clientVersion || that_present_clientVersion) {
        if (!(this_present_clientVersion && that_present_clientVersion))
          return false;
        if (!this.clientVersion.equals(that.clientVersion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientVersion = true && (isSetClientVersion());
      list.add(present_clientVersion);
      if (present_clientVersion)
        list.add(clientVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(isProtocolVersionSupported_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientVersion()).compareTo(other.isSetClientVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientVersion, other.clientVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isProtocolVersionSupported_args(");
      boolean first = true;

      sb.append("clientVersion:");
      if (this.clientVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.clientVersion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isProtocolVersionSupported_argsStandardSchemeFactory implements SchemeFactory {
      public isProtocolVersionSupported_argsStandardScheme getScheme() {
        return new isProtocolVersionSupported_argsStandardScheme();
      }
    }

    private static class isProtocolVersionSupported_argsStandardScheme extends StandardScheme<isProtocolVersionSupported_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isProtocolVersionSupported_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientVersion = iprot.readString();
                struct.setClientVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isProtocolVersionSupported_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientVersion != null) {
          oprot.writeFieldBegin(CLIENT_VERSION_FIELD_DESC);
          oprot.writeString(struct.clientVersion);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isProtocolVersionSupported_argsTupleSchemeFactory implements SchemeFactory {
      public isProtocolVersionSupported_argsTupleScheme getScheme() {
        return new isProtocolVersionSupported_argsTupleScheme();
      }
    }

    private static class isProtocolVersionSupported_argsTupleScheme extends TupleScheme<isProtocolVersionSupported_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isProtocolVersionSupported_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientVersion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientVersion()) {
          oprot.writeString(struct.clientVersion);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isProtocolVersionSupported_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientVersion = iprot.readString();
          struct.setClientVersionIsSet(true);
        }
      }
    }

  }

  public static class isProtocolVersionSupported_result implements org.apache.thrift.TBase<isProtocolVersionSupported_result, isProtocolVersionSupported_result._Fields>, java.io.Serializable, Cloneable, Comparable<isProtocolVersionSupported_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isProtocolVersionSupported_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isProtocolVersionSupported_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isProtocolVersionSupported_resultTupleSchemeFactory());
    }

    public TProtocolVersionTestResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProtocolVersionTestResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isProtocolVersionSupported_result.class, metaDataMap);
    }

    public isProtocolVersionSupported_result() {
    }

    public isProtocolVersionSupported_result(
      TProtocolVersionTestResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isProtocolVersionSupported_result(isProtocolVersionSupported_result other) {
      if (other.isSetSuccess()) {
        this.success = new TProtocolVersionTestResult(other.success);
      }
    }

    public isProtocolVersionSupported_result deepCopy() {
      return new isProtocolVersionSupported_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TProtocolVersionTestResult getSuccess() {
      return this.success;
    }

    public isProtocolVersionSupported_result setSuccess(TProtocolVersionTestResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TProtocolVersionTestResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isProtocolVersionSupported_result)
        return this.equals((isProtocolVersionSupported_result)that);
      return false;
    }

    public boolean equals(isProtocolVersionSupported_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isProtocolVersionSupported_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isProtocolVersionSupported_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isProtocolVersionSupported_resultStandardSchemeFactory implements SchemeFactory {
      public isProtocolVersionSupported_resultStandardScheme getScheme() {
        return new isProtocolVersionSupported_resultStandardScheme();
      }
    }

    private static class isProtocolVersionSupported_resultStandardScheme extends StandardScheme<isProtocolVersionSupported_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isProtocolVersionSupported_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TProtocolVersionTestResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isProtocolVersionSupported_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isProtocolVersionSupported_resultTupleSchemeFactory implements SchemeFactory {
      public isProtocolVersionSupported_resultTupleScheme getScheme() {
        return new isProtocolVersionSupported_resultTupleScheme();
      }
    }

    private static class isProtocolVersionSupported_resultTupleScheme extends TupleScheme<isProtocolVersionSupported_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isProtocolVersionSupported_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isProtocolVersionSupported_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TProtocolVersionTestResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBdbVersion_args implements org.apache.thrift.TBase<getBdbVersion_args, getBdbVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBdbVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBdbVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBdbVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBdbVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBdbVersion_args.class, metaDataMap);
    }

    public getBdbVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBdbVersion_args(getBdbVersion_args other) {
    }

    public getBdbVersion_args deepCopy() {
      return new getBdbVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBdbVersion_args)
        return this.equals((getBdbVersion_args)that);
      return false;
    }

    public boolean equals(getBdbVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getBdbVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBdbVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBdbVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getBdbVersion_argsStandardScheme getScheme() {
        return new getBdbVersion_argsStandardScheme();
      }
    }

    private static class getBdbVersion_argsStandardScheme extends StandardScheme<getBdbVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBdbVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBdbVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBdbVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getBdbVersion_argsTupleScheme getScheme() {
        return new getBdbVersion_argsTupleScheme();
      }
    }

    private static class getBdbVersion_argsTupleScheme extends TupleScheme<getBdbVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBdbVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBdbVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getBdbVersion_result implements org.apache.thrift.TBase<getBdbVersion_result, getBdbVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBdbVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBdbVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBdbVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBdbVersion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBdbVersion_result.class, metaDataMap);
    }

    public getBdbVersion_result() {
    }

    public getBdbVersion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBdbVersion_result(getBdbVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getBdbVersion_result deepCopy() {
      return new getBdbVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBdbVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBdbVersion_result)
        return this.equals((getBdbVersion_result)that);
      return false;
    }

    public boolean equals(getBdbVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBdbVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBdbVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBdbVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getBdbVersion_resultStandardScheme getScheme() {
        return new getBdbVersion_resultStandardScheme();
      }
    }

    private static class getBdbVersion_resultStandardScheme extends StandardScheme<getBdbVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBdbVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBdbVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBdbVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getBdbVersion_resultTupleScheme getScheme() {
        return new getBdbVersion_resultTupleScheme();
      }
    }

    private static class getBdbVersion_resultTupleScheme extends TupleScheme<getBdbVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBdbVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBdbVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class shutdown_args implements org.apache.thrift.TBase<shutdown_args, shutdown_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shutdown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shutdown_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_args.class, metaDataMap);
    }

    public shutdown_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_args(shutdown_args other) {
    }

    public shutdown_args deepCopy() {
      return new shutdown_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_args)
        return this.equals((shutdown_args)that);
      return false;
    }

    public boolean equals(shutdown_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_argsStandardSchemeFactory implements SchemeFactory {
      public shutdown_argsStandardScheme getScheme() {
        return new shutdown_argsStandardScheme();
      }
    }

    private static class shutdown_argsStandardScheme extends StandardScheme<shutdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_argsTupleSchemeFactory implements SchemeFactory {
      public shutdown_argsTupleScheme getScheme() {
        return new shutdown_argsTupleScheme();
      }
    }

    private static class shutdown_argsTupleScheme extends TupleScheme<shutdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class openEnvironment_args implements org.apache.thrift.TBase<openEnvironment_args, openEnvironment_args._Fields>, java.io.Serializable, Cloneable, Comparable<openEnvironment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openEnvironment_args");

    private static final org.apache.thrift.protocol.TField HOME_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("homeDir", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENV_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("envConfig", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openEnvironment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openEnvironment_argsTupleSchemeFactory());
    }

    public String homeDir; // required
    public TEnvironmentConfig envConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOME_DIR((short)1, "homeDir"),
      ENV_CONFIG((short)2, "envConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOME_DIR
            return HOME_DIR;
          case 2: // ENV_CONFIG
            return ENV_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOME_DIR, new org.apache.thrift.meta_data.FieldMetaData("homeDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENV_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("envConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironmentConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openEnvironment_args.class, metaDataMap);
    }

    public openEnvironment_args() {
    }

    public openEnvironment_args(
      String homeDir,
      TEnvironmentConfig envConfig)
    {
      this();
      this.homeDir = homeDir;
      this.envConfig = envConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openEnvironment_args(openEnvironment_args other) {
      if (other.isSetHomeDir()) {
        this.homeDir = other.homeDir;
      }
      if (other.isSetEnvConfig()) {
        this.envConfig = new TEnvironmentConfig(other.envConfig);
      }
    }

    public openEnvironment_args deepCopy() {
      return new openEnvironment_args(this);
    }

    @Override
    public void clear() {
      this.homeDir = null;
      this.envConfig = null;
    }

    public String getHomeDir() {
      return this.homeDir;
    }

    public openEnvironment_args setHomeDir(String homeDir) {
      this.homeDir = homeDir;
      return this;
    }

    public void unsetHomeDir() {
      this.homeDir = null;
    }

    /** Returns true if field homeDir is set (has been assigned a value) and false otherwise */
    public boolean isSetHomeDir() {
      return this.homeDir != null;
    }

    public void setHomeDirIsSet(boolean value) {
      if (!value) {
        this.homeDir = null;
      }
    }

    public TEnvironmentConfig getEnvConfig() {
      return this.envConfig;
    }

    public openEnvironment_args setEnvConfig(TEnvironmentConfig envConfig) {
      this.envConfig = envConfig;
      return this;
    }

    public void unsetEnvConfig() {
      this.envConfig = null;
    }

    /** Returns true if field envConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetEnvConfig() {
      return this.envConfig != null;
    }

    public void setEnvConfigIsSet(boolean value) {
      if (!value) {
        this.envConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOME_DIR:
        if (value == null) {
          unsetHomeDir();
        } else {
          setHomeDir((String)value);
        }
        break;

      case ENV_CONFIG:
        if (value == null) {
          unsetEnvConfig();
        } else {
          setEnvConfig((TEnvironmentConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOME_DIR:
        return getHomeDir();

      case ENV_CONFIG:
        return getEnvConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOME_DIR:
        return isSetHomeDir();
      case ENV_CONFIG:
        return isSetEnvConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openEnvironment_args)
        return this.equals((openEnvironment_args)that);
      return false;
    }

    public boolean equals(openEnvironment_args that) {
      if (that == null)
        return false;

      boolean this_present_homeDir = true && this.isSetHomeDir();
      boolean that_present_homeDir = true && that.isSetHomeDir();
      if (this_present_homeDir || that_present_homeDir) {
        if (!(this_present_homeDir && that_present_homeDir))
          return false;
        if (!this.homeDir.equals(that.homeDir))
          return false;
      }

      boolean this_present_envConfig = true && this.isSetEnvConfig();
      boolean that_present_envConfig = true && that.isSetEnvConfig();
      if (this_present_envConfig || that_present_envConfig) {
        if (!(this_present_envConfig && that_present_envConfig))
          return false;
        if (!this.envConfig.equals(that.envConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_homeDir = true && (isSetHomeDir());
      list.add(present_homeDir);
      if (present_homeDir)
        list.add(homeDir);

      boolean present_envConfig = true && (isSetEnvConfig());
      list.add(present_envConfig);
      if (present_envConfig)
        list.add(envConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(openEnvironment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHomeDir()).compareTo(other.isSetHomeDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHomeDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeDir, other.homeDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnvConfig()).compareTo(other.isSetEnvConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnvConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envConfig, other.envConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openEnvironment_args(");
      boolean first = true;

      sb.append("homeDir:");
      if (this.homeDir == null) {
        sb.append("null");
      } else {
        sb.append(this.homeDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("envConfig:");
      if (this.envConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.envConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (envConfig != null) {
        envConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openEnvironment_argsStandardSchemeFactory implements SchemeFactory {
      public openEnvironment_argsStandardScheme getScheme() {
        return new openEnvironment_argsStandardScheme();
      }
    }

    private static class openEnvironment_argsStandardScheme extends StandardScheme<openEnvironment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openEnvironment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOME_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.homeDir = iprot.readString();
                struct.setHomeDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENV_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.envConfig = new TEnvironmentConfig();
                struct.envConfig.read(iprot);
                struct.setEnvConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openEnvironment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.homeDir != null) {
          oprot.writeFieldBegin(HOME_DIR_FIELD_DESC);
          oprot.writeString(struct.homeDir);
          oprot.writeFieldEnd();
        }
        if (struct.envConfig != null) {
          oprot.writeFieldBegin(ENV_CONFIG_FIELD_DESC);
          struct.envConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openEnvironment_argsTupleSchemeFactory implements SchemeFactory {
      public openEnvironment_argsTupleScheme getScheme() {
        return new openEnvironment_argsTupleScheme();
      }
    }

    private static class openEnvironment_argsTupleScheme extends TupleScheme<openEnvironment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openEnvironment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHomeDir()) {
          optionals.set(0);
        }
        if (struct.isSetEnvConfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHomeDir()) {
          oprot.writeString(struct.homeDir);
        }
        if (struct.isSetEnvConfig()) {
          struct.envConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openEnvironment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.homeDir = iprot.readString();
          struct.setHomeDirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.envConfig = new TEnvironmentConfig();
          struct.envConfig.read(iprot);
          struct.setEnvConfigIsSet(true);
        }
      }
    }

  }

  public static class openEnvironment_result implements org.apache.thrift.TBase<openEnvironment_result, openEnvironment_result._Fields>, java.io.Serializable, Cloneable, Comparable<openEnvironment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openEnvironment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IOE_FIELD_DESC = new org.apache.thrift.protocol.TField("ioe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openEnvironment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openEnvironment_resultTupleSchemeFactory());
    }

    public TEnvironment success; // required
    public TIOException ioe; // required
    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IOE((short)1, "ioe"),
      IUE((short)2, "iue"),
      DBE((short)3, "dbe"),
      RE((short)4, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IOE
            return IOE;
          case 2: // IUE
            return IUE;
          case 3: // DBE
            return DBE;
          case 4: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.IOE, new org.apache.thrift.meta_data.FieldMetaData("ioe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openEnvironment_result.class, metaDataMap);
    }

    public openEnvironment_result() {
    }

    public openEnvironment_result(
      TEnvironment success,
      TIOException ioe,
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.ioe = ioe;
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openEnvironment_result(openEnvironment_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEnvironment(other.success);
      }
      if (other.isSetIoe()) {
        this.ioe = new TIOException(other.ioe);
      }
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public openEnvironment_result deepCopy() {
      return new openEnvironment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ioe = null;
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TEnvironment getSuccess() {
      return this.success;
    }

    public openEnvironment_result setSuccess(TEnvironment success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TIOException getIoe() {
      return this.ioe;
    }

    public openEnvironment_result setIoe(TIOException ioe) {
      this.ioe = ioe;
      return this;
    }

    public void unsetIoe() {
      this.ioe = null;
    }

    /** Returns true if field ioe is set (has been assigned a value) and false otherwise */
    public boolean isSetIoe() {
      return this.ioe != null;
    }

    public void setIoeIsSet(boolean value) {
      if (!value) {
        this.ioe = null;
      }
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public openEnvironment_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public openEnvironment_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public openEnvironment_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEnvironment)value);
        }
        break;

      case IOE:
        if (value == null) {
          unsetIoe();
        } else {
          setIoe((TIOException)value);
        }
        break;

      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IOE:
        return getIoe();

      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IOE:
        return isSetIoe();
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openEnvironment_result)
        return this.equals((openEnvironment_result)that);
      return false;
    }

    public boolean equals(openEnvironment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ioe = true && this.isSetIoe();
      boolean that_present_ioe = true && that.isSetIoe();
      if (this_present_ioe || that_present_ioe) {
        if (!(this_present_ioe && that_present_ioe))
          return false;
        if (!this.ioe.equals(that.ioe))
          return false;
      }

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ioe = true && (isSetIoe());
      list.add(present_ioe);
      if (present_ioe)
        list.add(ioe);

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(openEnvironment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoe()).compareTo(other.isSetIoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioe, other.ioe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openEnvironment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioe:");
      if (this.ioe == null) {
        sb.append("null");
      } else {
        sb.append(this.ioe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openEnvironment_resultStandardSchemeFactory implements SchemeFactory {
      public openEnvironment_resultStandardScheme getScheme() {
        return new openEnvironment_resultStandardScheme();
      }
    }

    private static class openEnvironment_resultStandardScheme extends StandardScheme<openEnvironment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openEnvironment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEnvironment();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioe = new TIOException();
                struct.ioe.read(iprot);
                struct.setIoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openEnvironment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioe != null) {
          oprot.writeFieldBegin(IOE_FIELD_DESC);
          struct.ioe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openEnvironment_resultTupleSchemeFactory implements SchemeFactory {
      public openEnvironment_resultTupleScheme getScheme() {
        return new openEnvironment_resultTupleScheme();
      }
    }

    private static class openEnvironment_resultTupleScheme extends TupleScheme<openEnvironment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openEnvironment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIoe()) {
          optionals.set(1);
        }
        if (struct.isSetIue()) {
          optionals.set(2);
        }
        if (struct.isSetDbe()) {
          optionals.set(3);
        }
        if (struct.isSetRe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIoe()) {
          struct.ioe.write(oprot);
        }
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openEnvironment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TEnvironment();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ioe = new TIOException();
          struct.ioe.read(iprot);
          struct.setIoeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class closeEnvironmentHandle_args implements org.apache.thrift.TBase<closeEnvironmentHandle_args, closeEnvironmentHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeEnvironmentHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeEnvironmentHandle_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeEnvironmentHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeEnvironmentHandle_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeEnvironmentHandle_args.class, metaDataMap);
    }

    public closeEnvironmentHandle_args() {
    }

    public closeEnvironmentHandle_args(
      TEnvironment env)
    {
      this();
      this.env = env;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeEnvironmentHandle_args(closeEnvironmentHandle_args other) {
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
    }

    public closeEnvironmentHandle_args deepCopy() {
      return new closeEnvironmentHandle_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public closeEnvironmentHandle_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeEnvironmentHandle_args)
        return this.equals((closeEnvironmentHandle_args)that);
      return false;
    }

    public boolean equals(closeEnvironmentHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeEnvironmentHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeEnvironmentHandle_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeEnvironmentHandle_argsStandardSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandle_argsStandardScheme getScheme() {
        return new closeEnvironmentHandle_argsStandardScheme();
      }
    }

    private static class closeEnvironmentHandle_argsStandardScheme extends StandardScheme<closeEnvironmentHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeEnvironmentHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeEnvironmentHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeEnvironmentHandle_argsTupleSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandle_argsTupleScheme getScheme() {
        return new closeEnvironmentHandle_argsTupleScheme();
      }
    }

    private static class closeEnvironmentHandle_argsTupleScheme extends TupleScheme<closeEnvironmentHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
      }
    }

  }

  public static class closeEnvironmentHandle_result implements org.apache.thrift.TBase<closeEnvironmentHandle_result, closeEnvironmentHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeEnvironmentHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeEnvironmentHandle_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeEnvironmentHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeEnvironmentHandle_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeEnvironmentHandle_result.class, metaDataMap);
    }

    public closeEnvironmentHandle_result() {
    }

    public closeEnvironmentHandle_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeEnvironmentHandle_result(closeEnvironmentHandle_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public closeEnvironmentHandle_result deepCopy() {
      return new closeEnvironmentHandle_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public closeEnvironmentHandle_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public closeEnvironmentHandle_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeEnvironmentHandle_result)
        return this.equals((closeEnvironmentHandle_result)that);
      return false;
    }

    public boolean equals(closeEnvironmentHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeEnvironmentHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeEnvironmentHandle_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeEnvironmentHandle_resultStandardSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandle_resultStandardScheme getScheme() {
        return new closeEnvironmentHandle_resultStandardScheme();
      }
    }

    private static class closeEnvironmentHandle_resultStandardScheme extends StandardScheme<closeEnvironmentHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeEnvironmentHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeEnvironmentHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeEnvironmentHandle_resultTupleSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandle_resultTupleScheme getScheme() {
        return new closeEnvironmentHandle_resultTupleScheme();
      }
    }

    private static class closeEnvironmentHandle_resultTupleScheme extends TupleScheme<closeEnvironmentHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class closeEnvironmentHandles_args implements org.apache.thrift.TBase<closeEnvironmentHandles_args, closeEnvironmentHandles_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeEnvironmentHandles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeEnvironmentHandles_args");

    private static final org.apache.thrift.protocol.TField HOME_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("homeDir", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MIN_IDLE_IN_MILLI_FIELD_DESC = new org.apache.thrift.protocol.TField("minIdleInMilli", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeEnvironmentHandles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeEnvironmentHandles_argsTupleSchemeFactory());
    }

    public String homeDir; // required
    public long minIdleInMilli; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOME_DIR((short)1, "homeDir"),
      MIN_IDLE_IN_MILLI((short)2, "minIdleInMilli");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOME_DIR
            return HOME_DIR;
          case 2: // MIN_IDLE_IN_MILLI
            return MIN_IDLE_IN_MILLI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINIDLEINMILLI_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOME_DIR, new org.apache.thrift.meta_data.FieldMetaData("homeDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIN_IDLE_IN_MILLI, new org.apache.thrift.meta_data.FieldMetaData("minIdleInMilli", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeEnvironmentHandles_args.class, metaDataMap);
    }

    public closeEnvironmentHandles_args() {
    }

    public closeEnvironmentHandles_args(
      String homeDir,
      long minIdleInMilli)
    {
      this();
      this.homeDir = homeDir;
      this.minIdleInMilli = minIdleInMilli;
      setMinIdleInMilliIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeEnvironmentHandles_args(closeEnvironmentHandles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHomeDir()) {
        this.homeDir = other.homeDir;
      }
      this.minIdleInMilli = other.minIdleInMilli;
    }

    public closeEnvironmentHandles_args deepCopy() {
      return new closeEnvironmentHandles_args(this);
    }

    @Override
    public void clear() {
      this.homeDir = null;
      setMinIdleInMilliIsSet(false);
      this.minIdleInMilli = 0;
    }

    public String getHomeDir() {
      return this.homeDir;
    }

    public closeEnvironmentHandles_args setHomeDir(String homeDir) {
      this.homeDir = homeDir;
      return this;
    }

    public void unsetHomeDir() {
      this.homeDir = null;
    }

    /** Returns true if field homeDir is set (has been assigned a value) and false otherwise */
    public boolean isSetHomeDir() {
      return this.homeDir != null;
    }

    public void setHomeDirIsSet(boolean value) {
      if (!value) {
        this.homeDir = null;
      }
    }

    public long getMinIdleInMilli() {
      return this.minIdleInMilli;
    }

    public closeEnvironmentHandles_args setMinIdleInMilli(long minIdleInMilli) {
      this.minIdleInMilli = minIdleInMilli;
      setMinIdleInMilliIsSet(true);
      return this;
    }

    public void unsetMinIdleInMilli() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINIDLEINMILLI_ISSET_ID);
    }

    /** Returns true if field minIdleInMilli is set (has been assigned a value) and false otherwise */
    public boolean isSetMinIdleInMilli() {
      return EncodingUtils.testBit(__isset_bitfield, __MINIDLEINMILLI_ISSET_ID);
    }

    public void setMinIdleInMilliIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINIDLEINMILLI_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOME_DIR:
        if (value == null) {
          unsetHomeDir();
        } else {
          setHomeDir((String)value);
        }
        break;

      case MIN_IDLE_IN_MILLI:
        if (value == null) {
          unsetMinIdleInMilli();
        } else {
          setMinIdleInMilli((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOME_DIR:
        return getHomeDir();

      case MIN_IDLE_IN_MILLI:
        return Long.valueOf(getMinIdleInMilli());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOME_DIR:
        return isSetHomeDir();
      case MIN_IDLE_IN_MILLI:
        return isSetMinIdleInMilli();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeEnvironmentHandles_args)
        return this.equals((closeEnvironmentHandles_args)that);
      return false;
    }

    public boolean equals(closeEnvironmentHandles_args that) {
      if (that == null)
        return false;

      boolean this_present_homeDir = true && this.isSetHomeDir();
      boolean that_present_homeDir = true && that.isSetHomeDir();
      if (this_present_homeDir || that_present_homeDir) {
        if (!(this_present_homeDir && that_present_homeDir))
          return false;
        if (!this.homeDir.equals(that.homeDir))
          return false;
      }

      boolean this_present_minIdleInMilli = true;
      boolean that_present_minIdleInMilli = true;
      if (this_present_minIdleInMilli || that_present_minIdleInMilli) {
        if (!(this_present_minIdleInMilli && that_present_minIdleInMilli))
          return false;
        if (this.minIdleInMilli != that.minIdleInMilli)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_homeDir = true && (isSetHomeDir());
      list.add(present_homeDir);
      if (present_homeDir)
        list.add(homeDir);

      boolean present_minIdleInMilli = true;
      list.add(present_minIdleInMilli);
      if (present_minIdleInMilli)
        list.add(minIdleInMilli);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeEnvironmentHandles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHomeDir()).compareTo(other.isSetHomeDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHomeDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeDir, other.homeDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinIdleInMilli()).compareTo(other.isSetMinIdleInMilli());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinIdleInMilli()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minIdleInMilli, other.minIdleInMilli);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeEnvironmentHandles_args(");
      boolean first = true;

      sb.append("homeDir:");
      if (this.homeDir == null) {
        sb.append("null");
      } else {
        sb.append(this.homeDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minIdleInMilli:");
      sb.append(this.minIdleInMilli);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeEnvironmentHandles_argsStandardSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandles_argsStandardScheme getScheme() {
        return new closeEnvironmentHandles_argsStandardScheme();
      }
    }

    private static class closeEnvironmentHandles_argsStandardScheme extends StandardScheme<closeEnvironmentHandles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeEnvironmentHandles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOME_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.homeDir = iprot.readString();
                struct.setHomeDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MIN_IDLE_IN_MILLI
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.minIdleInMilli = iprot.readI64();
                struct.setMinIdleInMilliIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeEnvironmentHandles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.homeDir != null) {
          oprot.writeFieldBegin(HOME_DIR_FIELD_DESC);
          oprot.writeString(struct.homeDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MIN_IDLE_IN_MILLI_FIELD_DESC);
        oprot.writeI64(struct.minIdleInMilli);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeEnvironmentHandles_argsTupleSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandles_argsTupleScheme getScheme() {
        return new closeEnvironmentHandles_argsTupleScheme();
      }
    }

    private static class closeEnvironmentHandles_argsTupleScheme extends TupleScheme<closeEnvironmentHandles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHomeDir()) {
          optionals.set(0);
        }
        if (struct.isSetMinIdleInMilli()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHomeDir()) {
          oprot.writeString(struct.homeDir);
        }
        if (struct.isSetMinIdleInMilli()) {
          oprot.writeI64(struct.minIdleInMilli);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.homeDir = iprot.readString();
          struct.setHomeDirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minIdleInMilli = iprot.readI64();
          struct.setMinIdleInMilliIsSet(true);
        }
      }
    }

  }

  public static class closeEnvironmentHandles_result implements org.apache.thrift.TBase<closeEnvironmentHandles_result, closeEnvironmentHandles_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeEnvironmentHandles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeEnvironmentHandles_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeEnvironmentHandles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeEnvironmentHandles_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeEnvironmentHandles_result.class, metaDataMap);
    }

    public closeEnvironmentHandles_result() {
    }

    public closeEnvironmentHandles_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeEnvironmentHandles_result(closeEnvironmentHandles_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public closeEnvironmentHandles_result deepCopy() {
      return new closeEnvironmentHandles_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public closeEnvironmentHandles_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public closeEnvironmentHandles_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeEnvironmentHandles_result)
        return this.equals((closeEnvironmentHandles_result)that);
      return false;
    }

    public boolean equals(closeEnvironmentHandles_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeEnvironmentHandles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeEnvironmentHandles_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeEnvironmentHandles_resultStandardSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandles_resultStandardScheme getScheme() {
        return new closeEnvironmentHandles_resultStandardScheme();
      }
    }

    private static class closeEnvironmentHandles_resultStandardScheme extends StandardScheme<closeEnvironmentHandles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeEnvironmentHandles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeEnvironmentHandles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeEnvironmentHandles_resultTupleSchemeFactory implements SchemeFactory {
      public closeEnvironmentHandles_resultTupleScheme getScheme() {
        return new closeEnvironmentHandles_resultTupleScheme();
      }
    }

    private static class closeEnvironmentHandles_resultTupleScheme extends TupleScheme<closeEnvironmentHandles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeEnvironmentHandles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class deleteEnvironmentAndDatabases_args implements org.apache.thrift.TBase<deleteEnvironmentAndDatabases_args, deleteEnvironmentAndDatabases_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEnvironmentAndDatabases_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEnvironmentAndDatabases_args");

    private static final org.apache.thrift.protocol.TField HOME_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("homeDir", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("force", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEnvironmentAndDatabases_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEnvironmentAndDatabases_argsTupleSchemeFactory());
    }

    public String homeDir; // required
    public boolean force; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOME_DIR((short)1, "homeDir"),
      FORCE((short)2, "force");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOME_DIR
            return HOME_DIR;
          case 2: // FORCE
            return FORCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FORCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOME_DIR, new org.apache.thrift.meta_data.FieldMetaData("homeDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FORCE, new org.apache.thrift.meta_data.FieldMetaData("force", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEnvironmentAndDatabases_args.class, metaDataMap);
    }

    public deleteEnvironmentAndDatabases_args() {
    }

    public deleteEnvironmentAndDatabases_args(
      String homeDir,
      boolean force)
    {
      this();
      this.homeDir = homeDir;
      this.force = force;
      setForceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEnvironmentAndDatabases_args(deleteEnvironmentAndDatabases_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHomeDir()) {
        this.homeDir = other.homeDir;
      }
      this.force = other.force;
    }

    public deleteEnvironmentAndDatabases_args deepCopy() {
      return new deleteEnvironmentAndDatabases_args(this);
    }

    @Override
    public void clear() {
      this.homeDir = null;
      setForceIsSet(false);
      this.force = false;
    }

    public String getHomeDir() {
      return this.homeDir;
    }

    public deleteEnvironmentAndDatabases_args setHomeDir(String homeDir) {
      this.homeDir = homeDir;
      return this;
    }

    public void unsetHomeDir() {
      this.homeDir = null;
    }

    /** Returns true if field homeDir is set (has been assigned a value) and false otherwise */
    public boolean isSetHomeDir() {
      return this.homeDir != null;
    }

    public void setHomeDirIsSet(boolean value) {
      if (!value) {
        this.homeDir = null;
      }
    }

    public boolean isForce() {
      return this.force;
    }

    public deleteEnvironmentAndDatabases_args setForce(boolean force) {
      this.force = force;
      setForceIsSet(true);
      return this;
    }

    public void unsetForce() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    /** Returns true if field force is set (has been assigned a value) and false otherwise */
    public boolean isSetForce() {
      return EncodingUtils.testBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    public void setForceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOME_DIR:
        if (value == null) {
          unsetHomeDir();
        } else {
          setHomeDir((String)value);
        }
        break;

      case FORCE:
        if (value == null) {
          unsetForce();
        } else {
          setForce((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOME_DIR:
        return getHomeDir();

      case FORCE:
        return Boolean.valueOf(isForce());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOME_DIR:
        return isSetHomeDir();
      case FORCE:
        return isSetForce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEnvironmentAndDatabases_args)
        return this.equals((deleteEnvironmentAndDatabases_args)that);
      return false;
    }

    public boolean equals(deleteEnvironmentAndDatabases_args that) {
      if (that == null)
        return false;

      boolean this_present_homeDir = true && this.isSetHomeDir();
      boolean that_present_homeDir = true && that.isSetHomeDir();
      if (this_present_homeDir || that_present_homeDir) {
        if (!(this_present_homeDir && that_present_homeDir))
          return false;
        if (!this.homeDir.equals(that.homeDir))
          return false;
      }

      boolean this_present_force = true;
      boolean that_present_force = true;
      if (this_present_force || that_present_force) {
        if (!(this_present_force && that_present_force))
          return false;
        if (this.force != that.force)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_homeDir = true && (isSetHomeDir());
      list.add(present_homeDir);
      if (present_homeDir)
        list.add(homeDir);

      boolean present_force = true;
      list.add(present_force);
      if (present_force)
        list.add(force);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteEnvironmentAndDatabases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHomeDir()).compareTo(other.isSetHomeDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHomeDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeDir, other.homeDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetForce()).compareTo(other.isSetForce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force, other.force);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEnvironmentAndDatabases_args(");
      boolean first = true;

      sb.append("homeDir:");
      if (this.homeDir == null) {
        sb.append("null");
      } else {
        sb.append(this.homeDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("force:");
      sb.append(this.force);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEnvironmentAndDatabases_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEnvironmentAndDatabases_argsStandardScheme getScheme() {
        return new deleteEnvironmentAndDatabases_argsStandardScheme();
      }
    }

    private static class deleteEnvironmentAndDatabases_argsStandardScheme extends StandardScheme<deleteEnvironmentAndDatabases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEnvironmentAndDatabases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOME_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.homeDir = iprot.readString();
                struct.setHomeDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FORCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.force = iprot.readBool();
                struct.setForceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEnvironmentAndDatabases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.homeDir != null) {
          oprot.writeFieldBegin(HOME_DIR_FIELD_DESC);
          oprot.writeString(struct.homeDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FORCE_FIELD_DESC);
        oprot.writeBool(struct.force);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEnvironmentAndDatabases_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEnvironmentAndDatabases_argsTupleScheme getScheme() {
        return new deleteEnvironmentAndDatabases_argsTupleScheme();
      }
    }

    private static class deleteEnvironmentAndDatabases_argsTupleScheme extends TupleScheme<deleteEnvironmentAndDatabases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEnvironmentAndDatabases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHomeDir()) {
          optionals.set(0);
        }
        if (struct.isSetForce()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHomeDir()) {
          oprot.writeString(struct.homeDir);
        }
        if (struct.isSetForce()) {
          oprot.writeBool(struct.force);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEnvironmentAndDatabases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.homeDir = iprot.readString();
          struct.setHomeDirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.force = iprot.readBool();
          struct.setForceIsSet(true);
        }
      }
    }

  }

  public static class deleteEnvironmentAndDatabases_result implements org.apache.thrift.TBase<deleteEnvironmentAndDatabases_result, deleteEnvironmentAndDatabases_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEnvironmentAndDatabases_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEnvironmentAndDatabases_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IOE_FIELD_DESC = new org.apache.thrift.protocol.TField("ioe", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEnvironmentAndDatabases_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEnvironmentAndDatabases_resultTupleSchemeFactory());
    }

    public TFileNotFoundException fe; // required
    public TIOException ioe; // required
    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe"),
      IOE((short)2, "ioe"),
      IUE((short)3, "iue"),
      DBE((short)4, "dbe"),
      RE((short)5, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          case 2: // IOE
            return IOE;
          case 3: // IUE
            return IUE;
          case 4: // DBE
            return DBE;
          case 5: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IOE, new org.apache.thrift.meta_data.FieldMetaData("ioe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEnvironmentAndDatabases_result.class, metaDataMap);
    }

    public deleteEnvironmentAndDatabases_result() {
    }

    public deleteEnvironmentAndDatabases_result(
      TFileNotFoundException fe,
      TIOException ioe,
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.fe = fe;
      this.ioe = ioe;
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEnvironmentAndDatabases_result(deleteEnvironmentAndDatabases_result other) {
      if (other.isSetFe()) {
        this.fe = new TFileNotFoundException(other.fe);
      }
      if (other.isSetIoe()) {
        this.ioe = new TIOException(other.ioe);
      }
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public deleteEnvironmentAndDatabases_result deepCopy() {
      return new deleteEnvironmentAndDatabases_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
      this.ioe = null;
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TFileNotFoundException getFe() {
      return this.fe;
    }

    public deleteEnvironmentAndDatabases_result setFe(TFileNotFoundException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public TIOException getIoe() {
      return this.ioe;
    }

    public deleteEnvironmentAndDatabases_result setIoe(TIOException ioe) {
      this.ioe = ioe;
      return this;
    }

    public void unsetIoe() {
      this.ioe = null;
    }

    /** Returns true if field ioe is set (has been assigned a value) and false otherwise */
    public boolean isSetIoe() {
      return this.ioe != null;
    }

    public void setIoeIsSet(boolean value) {
      if (!value) {
        this.ioe = null;
      }
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public deleteEnvironmentAndDatabases_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public deleteEnvironmentAndDatabases_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public deleteEnvironmentAndDatabases_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((TFileNotFoundException)value);
        }
        break;

      case IOE:
        if (value == null) {
          unsetIoe();
        } else {
          setIoe((TIOException)value);
        }
        break;

      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      case IOE:
        return getIoe();

      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      case IOE:
        return isSetIoe();
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEnvironmentAndDatabases_result)
        return this.equals((deleteEnvironmentAndDatabases_result)that);
      return false;
    }

    public boolean equals(deleteEnvironmentAndDatabases_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      boolean this_present_ioe = true && this.isSetIoe();
      boolean that_present_ioe = true && that.isSetIoe();
      if (this_present_ioe || that_present_ioe) {
        if (!(this_present_ioe && that_present_ioe))
          return false;
        if (!this.ioe.equals(that.ioe))
          return false;
      }

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fe = true && (isSetFe());
      list.add(present_fe);
      if (present_fe)
        list.add(fe);

      boolean present_ioe = true && (isSetIoe());
      list.add(present_ioe);
      if (present_ioe)
        list.add(ioe);

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteEnvironmentAndDatabases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoe()).compareTo(other.isSetIoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioe, other.ioe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEnvironmentAndDatabases_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioe:");
      if (this.ioe == null) {
        sb.append("null");
      } else {
        sb.append(this.ioe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEnvironmentAndDatabases_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEnvironmentAndDatabases_resultStandardScheme getScheme() {
        return new deleteEnvironmentAndDatabases_resultStandardScheme();
      }
    }

    private static class deleteEnvironmentAndDatabases_resultStandardScheme extends StandardScheme<deleteEnvironmentAndDatabases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEnvironmentAndDatabases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new TFileNotFoundException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioe = new TIOException();
                struct.ioe.read(iprot);
                struct.setIoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEnvironmentAndDatabases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioe != null) {
          oprot.writeFieldBegin(IOE_FIELD_DESC);
          struct.ioe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEnvironmentAndDatabases_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEnvironmentAndDatabases_resultTupleScheme getScheme() {
        return new deleteEnvironmentAndDatabases_resultTupleScheme();
      }
    }

    private static class deleteEnvironmentAndDatabases_resultTupleScheme extends TupleScheme<deleteEnvironmentAndDatabases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEnvironmentAndDatabases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        if (struct.isSetIoe()) {
          optionals.set(1);
        }
        if (struct.isSetIue()) {
          optionals.set(2);
        }
        if (struct.isSetDbe()) {
          optionals.set(3);
        }
        if (struct.isSetRe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
        if (struct.isSetIoe()) {
          struct.ioe.write(oprot);
        }
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEnvironmentAndDatabases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.fe = new TFileNotFoundException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ioe = new TIOException();
          struct.ioe.read(iprot);
          struct.setIoeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getEnvironmentConfig_args implements org.apache.thrift.TBase<getEnvironmentConfig_args, getEnvironmentConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEnvironmentConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEnvironmentConfig_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEnvironmentConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnvironmentConfig_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEnvironmentConfig_args.class, metaDataMap);
    }

    public getEnvironmentConfig_args() {
    }

    public getEnvironmentConfig_args(
      TEnvironment env)
    {
      this();
      this.env = env;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEnvironmentConfig_args(getEnvironmentConfig_args other) {
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
    }

    public getEnvironmentConfig_args deepCopy() {
      return new getEnvironmentConfig_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public getEnvironmentConfig_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEnvironmentConfig_args)
        return this.equals((getEnvironmentConfig_args)that);
      return false;
    }

    public boolean equals(getEnvironmentConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnvironmentConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnvironmentConfig_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnvironmentConfig_argsStandardSchemeFactory implements SchemeFactory {
      public getEnvironmentConfig_argsStandardScheme getScheme() {
        return new getEnvironmentConfig_argsStandardScheme();
      }
    }

    private static class getEnvironmentConfig_argsStandardScheme extends StandardScheme<getEnvironmentConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEnvironmentConfig_argsTupleSchemeFactory implements SchemeFactory {
      public getEnvironmentConfig_argsTupleScheme getScheme() {
        return new getEnvironmentConfig_argsTupleScheme();
      }
    }

    private static class getEnvironmentConfig_argsTupleScheme extends TupleScheme<getEnvironmentConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
      }
    }

  }

  public static class getEnvironmentConfig_result implements org.apache.thrift.TBase<getEnvironmentConfig_result, getEnvironmentConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEnvironmentConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEnvironmentConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEnvironmentConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnvironmentConfig_resultTupleSchemeFactory());
    }

    public TEnvironmentConfig success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironmentConfig.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEnvironmentConfig_result.class, metaDataMap);
    }

    public getEnvironmentConfig_result() {
    }

    public getEnvironmentConfig_result(
      TEnvironmentConfig success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEnvironmentConfig_result(getEnvironmentConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEnvironmentConfig(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public getEnvironmentConfig_result deepCopy() {
      return new getEnvironmentConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TEnvironmentConfig getSuccess() {
      return this.success;
    }

    public getEnvironmentConfig_result setSuccess(TEnvironmentConfig success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public getEnvironmentConfig_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public getEnvironmentConfig_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEnvironmentConfig)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEnvironmentConfig_result)
        return this.equals((getEnvironmentConfig_result)that);
      return false;
    }

    public boolean equals(getEnvironmentConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnvironmentConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnvironmentConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnvironmentConfig_resultStandardSchemeFactory implements SchemeFactory {
      public getEnvironmentConfig_resultStandardScheme getScheme() {
        return new getEnvironmentConfig_resultStandardScheme();
      }
    }

    private static class getEnvironmentConfig_resultStandardScheme extends StandardScheme<getEnvironmentConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEnvironmentConfig();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEnvironmentConfig_resultTupleSchemeFactory implements SchemeFactory {
      public getEnvironmentConfig_resultTupleScheme getScheme() {
        return new getEnvironmentConfig_resultTupleScheme();
      }
    }

    private static class getEnvironmentConfig_resultTupleScheme extends TupleScheme<getEnvironmentConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TEnvironmentConfig();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class setEnvironmentConfig_args implements org.apache.thrift.TBase<setEnvironmentConfig_args, setEnvironmentConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<setEnvironmentConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEnvironmentConfig_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENV_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("envConfig", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEnvironmentConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEnvironmentConfig_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public TEnvironmentConfig envConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      ENV_CONFIG((short)2, "envConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // ENV_CONFIG
            return ENV_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.ENV_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("envConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironmentConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEnvironmentConfig_args.class, metaDataMap);
    }

    public setEnvironmentConfig_args() {
    }

    public setEnvironmentConfig_args(
      TEnvironment env,
      TEnvironmentConfig envConfig)
    {
      this();
      this.env = env;
      this.envConfig = envConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEnvironmentConfig_args(setEnvironmentConfig_args other) {
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      if (other.isSetEnvConfig()) {
        this.envConfig = new TEnvironmentConfig(other.envConfig);
      }
    }

    public setEnvironmentConfig_args deepCopy() {
      return new setEnvironmentConfig_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.envConfig = null;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public setEnvironmentConfig_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public TEnvironmentConfig getEnvConfig() {
      return this.envConfig;
    }

    public setEnvironmentConfig_args setEnvConfig(TEnvironmentConfig envConfig) {
      this.envConfig = envConfig;
      return this;
    }

    public void unsetEnvConfig() {
      this.envConfig = null;
    }

    /** Returns true if field envConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetEnvConfig() {
      return this.envConfig != null;
    }

    public void setEnvConfigIsSet(boolean value) {
      if (!value) {
        this.envConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case ENV_CONFIG:
        if (value == null) {
          unsetEnvConfig();
        } else {
          setEnvConfig((TEnvironmentConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case ENV_CONFIG:
        return getEnvConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case ENV_CONFIG:
        return isSetEnvConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEnvironmentConfig_args)
        return this.equals((setEnvironmentConfig_args)that);
      return false;
    }

    public boolean equals(setEnvironmentConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_envConfig = true && this.isSetEnvConfig();
      boolean that_present_envConfig = true && that.isSetEnvConfig();
      if (this_present_envConfig || that_present_envConfig) {
        if (!(this_present_envConfig && that_present_envConfig))
          return false;
        if (!this.envConfig.equals(that.envConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_envConfig = true && (isSetEnvConfig());
      list.add(present_envConfig);
      if (present_envConfig)
        list.add(envConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(setEnvironmentConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnvConfig()).compareTo(other.isSetEnvConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnvConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envConfig, other.envConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEnvironmentConfig_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("envConfig:");
      if (this.envConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.envConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
      if (envConfig != null) {
        envConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEnvironmentConfig_argsStandardSchemeFactory implements SchemeFactory {
      public setEnvironmentConfig_argsStandardScheme getScheme() {
        return new setEnvironmentConfig_argsStandardScheme();
      }
    }

    private static class setEnvironmentConfig_argsStandardScheme extends StandardScheme<setEnvironmentConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENV_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.envConfig = new TEnvironmentConfig();
                struct.envConfig.read(iprot);
                struct.setEnvConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.envConfig != null) {
          oprot.writeFieldBegin(ENV_CONFIG_FIELD_DESC);
          struct.envConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEnvironmentConfig_argsTupleSchemeFactory implements SchemeFactory {
      public setEnvironmentConfig_argsTupleScheme getScheme() {
        return new setEnvironmentConfig_argsTupleScheme();
      }
    }

    private static class setEnvironmentConfig_argsTupleScheme extends TupleScheme<setEnvironmentConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetEnvConfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetEnvConfig()) {
          struct.envConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEnvironmentConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.envConfig = new TEnvironmentConfig();
          struct.envConfig.read(iprot);
          struct.setEnvConfigIsSet(true);
        }
      }
    }

  }

  public static class setEnvironmentConfig_result implements org.apache.thrift.TBase<setEnvironmentConfig_result, setEnvironmentConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<setEnvironmentConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEnvironmentConfig_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEnvironmentConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEnvironmentConfig_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEnvironmentConfig_result.class, metaDataMap);
    }

    public setEnvironmentConfig_result() {
    }

    public setEnvironmentConfig_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEnvironmentConfig_result(setEnvironmentConfig_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public setEnvironmentConfig_result deepCopy() {
      return new setEnvironmentConfig_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public setEnvironmentConfig_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public setEnvironmentConfig_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEnvironmentConfig_result)
        return this.equals((setEnvironmentConfig_result)that);
      return false;
    }

    public boolean equals(setEnvironmentConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(setEnvironmentConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEnvironmentConfig_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEnvironmentConfig_resultStandardSchemeFactory implements SchemeFactory {
      public setEnvironmentConfig_resultStandardScheme getScheme() {
        return new setEnvironmentConfig_resultStandardScheme();
      }
    }

    private static class setEnvironmentConfig_resultStandardScheme extends StandardScheme<setEnvironmentConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEnvironmentConfig_resultTupleSchemeFactory implements SchemeFactory {
      public setEnvironmentConfig_resultTupleScheme getScheme() {
        return new setEnvironmentConfig_resultTupleScheme();
      }
    }

    private static class setEnvironmentConfig_resultTupleScheme extends TupleScheme<setEnvironmentConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEnvironmentConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class removeDatabase_args implements org.apache.thrift.TBase<removeDatabase_args, removeDatabase_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeDatabase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDatabase_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("force", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDatabase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDatabase_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public TTransaction txn; // required
    public String fileName; // required
    public String databaseName; // required
    public boolean force; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      TXN((short)2, "txn"),
      FILE_NAME((short)3, "fileName"),
      DATABASE_NAME((short)4, "databaseName"),
      FORCE((short)5, "force");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // TXN
            return TXN;
          case 3: // FILE_NAME
            return FILE_NAME;
          case 4: // DATABASE_NAME
            return DATABASE_NAME;
          case 5: // FORCE
            return FORCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FORCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FORCE, new org.apache.thrift.meta_data.FieldMetaData("force", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDatabase_args.class, metaDataMap);
    }

    public removeDatabase_args() {
    }

    public removeDatabase_args(
      TEnvironment env,
      TTransaction txn,
      String fileName,
      String databaseName,
      boolean force)
    {
      this();
      this.env = env;
      this.txn = txn;
      this.fileName = fileName;
      this.databaseName = databaseName;
      this.force = force;
      setForceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDatabase_args(removeDatabase_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetDatabaseName()) {
        this.databaseName = other.databaseName;
      }
      this.force = other.force;
    }

    public removeDatabase_args deepCopy() {
      return new removeDatabase_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.txn = null;
      this.fileName = null;
      this.databaseName = null;
      setForceIsSet(false);
      this.force = false;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public removeDatabase_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public removeDatabase_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public removeDatabase_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getDatabaseName() {
      return this.databaseName;
    }

    public removeDatabase_args setDatabaseName(String databaseName) {
      this.databaseName = databaseName;
      return this;
    }

    public void unsetDatabaseName() {
      this.databaseName = null;
    }

    /** Returns true if field databaseName is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseName() {
      return this.databaseName != null;
    }

    public void setDatabaseNameIsSet(boolean value) {
      if (!value) {
        this.databaseName = null;
      }
    }

    public boolean isForce() {
      return this.force;
    }

    public removeDatabase_args setForce(boolean force) {
      this.force = force;
      setForceIsSet(true);
      return this;
    }

    public void unsetForce() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    /** Returns true if field force is set (has been assigned a value) and false otherwise */
    public boolean isSetForce() {
      return EncodingUtils.testBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    public void setForceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case DATABASE_NAME:
        if (value == null) {
          unsetDatabaseName();
        } else {
          setDatabaseName((String)value);
        }
        break;

      case FORCE:
        if (value == null) {
          unsetForce();
        } else {
          setForce((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case TXN:
        return getTxn();

      case FILE_NAME:
        return getFileName();

      case DATABASE_NAME:
        return getDatabaseName();

      case FORCE:
        return Boolean.valueOf(isForce());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case TXN:
        return isSetTxn();
      case FILE_NAME:
        return isSetFileName();
      case DATABASE_NAME:
        return isSetDatabaseName();
      case FORCE:
        return isSetForce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDatabase_args)
        return this.equals((removeDatabase_args)that);
      return false;
    }

    public boolean equals(removeDatabase_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_databaseName = true && this.isSetDatabaseName();
      boolean that_present_databaseName = true && that.isSetDatabaseName();
      if (this_present_databaseName || that_present_databaseName) {
        if (!(this_present_databaseName && that_present_databaseName))
          return false;
        if (!this.databaseName.equals(that.databaseName))
          return false;
      }

      boolean this_present_force = true;
      boolean that_present_force = true;
      if (this_present_force || that_present_force) {
        if (!(this_present_force && that_present_force))
          return false;
        if (this.force != that.force)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      boolean present_databaseName = true && (isSetDatabaseName());
      list.add(present_databaseName);
      if (present_databaseName)
        list.add(databaseName);

      boolean present_force = true;
      list.add(present_force);
      if (present_force)
        list.add(force);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDatabase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabaseName()).compareTo(other.isSetDatabaseName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseName, other.databaseName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetForce()).compareTo(other.isSetForce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force, other.force);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDatabase_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("databaseName:");
      if (this.databaseName == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("force:");
      sb.append(this.force);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDatabase_argsStandardSchemeFactory implements SchemeFactory {
      public removeDatabase_argsStandardScheme getScheme() {
        return new removeDatabase_argsStandardScheme();
      }
    }

    private static class removeDatabase_argsStandardScheme extends StandardScheme<removeDatabase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDatabase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATABASE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.databaseName = iprot.readString();
                struct.setDatabaseNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FORCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.force = iprot.readBool();
                struct.setForceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDatabase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.databaseName != null) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.databaseName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FORCE_FIELD_DESC);
        oprot.writeBool(struct.force);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDatabase_argsTupleSchemeFactory implements SchemeFactory {
      public removeDatabase_argsTupleScheme getScheme() {
        return new removeDatabase_argsTupleScheme();
      }
    }

    private static class removeDatabase_argsTupleScheme extends TupleScheme<removeDatabase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        if (struct.isSetDatabaseName()) {
          optionals.set(3);
        }
        if (struct.isSetForce()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetDatabaseName()) {
          oprot.writeString(struct.databaseName);
        }
        if (struct.isSetForce()) {
          oprot.writeBool(struct.force);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.databaseName = iprot.readString();
          struct.setDatabaseNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.force = iprot.readBool();
          struct.setForceIsSet(true);
        }
      }
    }

  }

  public static class removeDatabase_result implements org.apache.thrift.TBase<removeDatabase_result, removeDatabase_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeDatabase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDatabase_result");

    private static final org.apache.thrift.protocol.TField IOE_FIELD_DESC = new org.apache.thrift.protocol.TField("ioe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDatabase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDatabase_resultTupleSchemeFactory());
    }

    public TIOException ioe; // required
    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IOE((short)1, "ioe"),
      IUE((short)2, "iue"),
      DBE((short)3, "dbe"),
      RE((short)4, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IOE
            return IOE;
          case 2: // IUE
            return IUE;
          case 3: // DBE
            return DBE;
          case 4: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IOE, new org.apache.thrift.meta_data.FieldMetaData("ioe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDatabase_result.class, metaDataMap);
    }

    public removeDatabase_result() {
    }

    public removeDatabase_result(
      TIOException ioe,
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.ioe = ioe;
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDatabase_result(removeDatabase_result other) {
      if (other.isSetIoe()) {
        this.ioe = new TIOException(other.ioe);
      }
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public removeDatabase_result deepCopy() {
      return new removeDatabase_result(this);
    }

    @Override
    public void clear() {
      this.ioe = null;
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TIOException getIoe() {
      return this.ioe;
    }

    public removeDatabase_result setIoe(TIOException ioe) {
      this.ioe = ioe;
      return this;
    }

    public void unsetIoe() {
      this.ioe = null;
    }

    /** Returns true if field ioe is set (has been assigned a value) and false otherwise */
    public boolean isSetIoe() {
      return this.ioe != null;
    }

    public void setIoeIsSet(boolean value) {
      if (!value) {
        this.ioe = null;
      }
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public removeDatabase_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public removeDatabase_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public removeDatabase_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IOE:
        if (value == null) {
          unsetIoe();
        } else {
          setIoe((TIOException)value);
        }
        break;

      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IOE:
        return getIoe();

      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IOE:
        return isSetIoe();
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDatabase_result)
        return this.equals((removeDatabase_result)that);
      return false;
    }

    public boolean equals(removeDatabase_result that) {
      if (that == null)
        return false;

      boolean this_present_ioe = true && this.isSetIoe();
      boolean that_present_ioe = true && that.isSetIoe();
      if (this_present_ioe || that_present_ioe) {
        if (!(this_present_ioe && that_present_ioe))
          return false;
        if (!this.ioe.equals(that.ioe))
          return false;
      }

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ioe = true && (isSetIoe());
      list.add(present_ioe);
      if (present_ioe)
        list.add(ioe);

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDatabase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIoe()).compareTo(other.isSetIoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioe, other.ioe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDatabase_result(");
      boolean first = true;

      sb.append("ioe:");
      if (this.ioe == null) {
        sb.append("null");
      } else {
        sb.append(this.ioe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDatabase_resultStandardSchemeFactory implements SchemeFactory {
      public removeDatabase_resultStandardScheme getScheme() {
        return new removeDatabase_resultStandardScheme();
      }
    }

    private static class removeDatabase_resultStandardScheme extends StandardScheme<removeDatabase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDatabase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioe = new TIOException();
                struct.ioe.read(iprot);
                struct.setIoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDatabase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ioe != null) {
          oprot.writeFieldBegin(IOE_FIELD_DESC);
          struct.ioe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDatabase_resultTupleSchemeFactory implements SchemeFactory {
      public removeDatabase_resultTupleScheme getScheme() {
        return new removeDatabase_resultTupleScheme();
      }
    }

    private static class removeDatabase_resultTupleScheme extends TupleScheme<removeDatabase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIoe()) {
          optionals.set(0);
        }
        if (struct.isSetIue()) {
          optionals.set(1);
        }
        if (struct.isSetDbe()) {
          optionals.set(2);
        }
        if (struct.isSetRe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIoe()) {
          struct.ioe.write(oprot);
        }
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ioe = new TIOException();
          struct.ioe.read(iprot);
          struct.setIoeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class renameDatabase_args implements org.apache.thrift.TBase<renameDatabase_args, renameDatabase_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameDatabase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameDatabase_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("force", org.apache.thrift.protocol.TType.BOOL, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameDatabase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameDatabase_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public TTransaction txn; // required
    public String fileName; // required
    public String databaseName; // required
    public String newName; // required
    public boolean force; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      TXN((short)2, "txn"),
      FILE_NAME((short)3, "fileName"),
      DATABASE_NAME((short)4, "databaseName"),
      NEW_NAME((short)5, "newName"),
      FORCE((short)6, "force");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // TXN
            return TXN;
          case 3: // FILE_NAME
            return FILE_NAME;
          case 4: // DATABASE_NAME
            return DATABASE_NAME;
          case 5: // NEW_NAME
            return NEW_NAME;
          case 6: // FORCE
            return FORCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FORCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("newName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FORCE, new org.apache.thrift.meta_data.FieldMetaData("force", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameDatabase_args.class, metaDataMap);
    }

    public renameDatabase_args() {
    }

    public renameDatabase_args(
      TEnvironment env,
      TTransaction txn,
      String fileName,
      String databaseName,
      String newName,
      boolean force)
    {
      this();
      this.env = env;
      this.txn = txn;
      this.fileName = fileName;
      this.databaseName = databaseName;
      this.newName = newName;
      this.force = force;
      setForceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameDatabase_args(renameDatabase_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetDatabaseName()) {
        this.databaseName = other.databaseName;
      }
      if (other.isSetNewName()) {
        this.newName = other.newName;
      }
      this.force = other.force;
    }

    public renameDatabase_args deepCopy() {
      return new renameDatabase_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.txn = null;
      this.fileName = null;
      this.databaseName = null;
      this.newName = null;
      setForceIsSet(false);
      this.force = false;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public renameDatabase_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public renameDatabase_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public renameDatabase_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getDatabaseName() {
      return this.databaseName;
    }

    public renameDatabase_args setDatabaseName(String databaseName) {
      this.databaseName = databaseName;
      return this;
    }

    public void unsetDatabaseName() {
      this.databaseName = null;
    }

    /** Returns true if field databaseName is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseName() {
      return this.databaseName != null;
    }

    public void setDatabaseNameIsSet(boolean value) {
      if (!value) {
        this.databaseName = null;
      }
    }

    public String getNewName() {
      return this.newName;
    }

    public renameDatabase_args setNewName(String newName) {
      this.newName = newName;
      return this;
    }

    public void unsetNewName() {
      this.newName = null;
    }

    /** Returns true if field newName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewName() {
      return this.newName != null;
    }

    public void setNewNameIsSet(boolean value) {
      if (!value) {
        this.newName = null;
      }
    }

    public boolean isForce() {
      return this.force;
    }

    public renameDatabase_args setForce(boolean force) {
      this.force = force;
      setForceIsSet(true);
      return this;
    }

    public void unsetForce() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    /** Returns true if field force is set (has been assigned a value) and false otherwise */
    public boolean isSetForce() {
      return EncodingUtils.testBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    public void setForceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case DATABASE_NAME:
        if (value == null) {
          unsetDatabaseName();
        } else {
          setDatabaseName((String)value);
        }
        break;

      case NEW_NAME:
        if (value == null) {
          unsetNewName();
        } else {
          setNewName((String)value);
        }
        break;

      case FORCE:
        if (value == null) {
          unsetForce();
        } else {
          setForce((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case TXN:
        return getTxn();

      case FILE_NAME:
        return getFileName();

      case DATABASE_NAME:
        return getDatabaseName();

      case NEW_NAME:
        return getNewName();

      case FORCE:
        return Boolean.valueOf(isForce());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case TXN:
        return isSetTxn();
      case FILE_NAME:
        return isSetFileName();
      case DATABASE_NAME:
        return isSetDatabaseName();
      case NEW_NAME:
        return isSetNewName();
      case FORCE:
        return isSetForce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameDatabase_args)
        return this.equals((renameDatabase_args)that);
      return false;
    }

    public boolean equals(renameDatabase_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_databaseName = true && this.isSetDatabaseName();
      boolean that_present_databaseName = true && that.isSetDatabaseName();
      if (this_present_databaseName || that_present_databaseName) {
        if (!(this_present_databaseName && that_present_databaseName))
          return false;
        if (!this.databaseName.equals(that.databaseName))
          return false;
      }

      boolean this_present_newName = true && this.isSetNewName();
      boolean that_present_newName = true && that.isSetNewName();
      if (this_present_newName || that_present_newName) {
        if (!(this_present_newName && that_present_newName))
          return false;
        if (!this.newName.equals(that.newName))
          return false;
      }

      boolean this_present_force = true;
      boolean that_present_force = true;
      if (this_present_force || that_present_force) {
        if (!(this_present_force && that_present_force))
          return false;
        if (this.force != that.force)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      boolean present_databaseName = true && (isSetDatabaseName());
      list.add(present_databaseName);
      if (present_databaseName)
        list.add(databaseName);

      boolean present_newName = true && (isSetNewName());
      list.add(present_newName);
      if (present_newName)
        list.add(newName);

      boolean present_force = true;
      list.add(present_force);
      if (present_force)
        list.add(force);

      return list.hashCode();
    }

    @Override
    public int compareTo(renameDatabase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabaseName()).compareTo(other.isSetDatabaseName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseName, other.databaseName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewName()).compareTo(other.isSetNewName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newName, other.newName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetForce()).compareTo(other.isSetForce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force, other.force);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameDatabase_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("databaseName:");
      if (this.databaseName == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newName:");
      if (this.newName == null) {
        sb.append("null");
      } else {
        sb.append(this.newName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("force:");
      sb.append(this.force);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameDatabase_argsStandardSchemeFactory implements SchemeFactory {
      public renameDatabase_argsStandardScheme getScheme() {
        return new renameDatabase_argsStandardScheme();
      }
    }

    private static class renameDatabase_argsStandardScheme extends StandardScheme<renameDatabase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameDatabase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATABASE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.databaseName = iprot.readString();
                struct.setDatabaseNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newName = iprot.readString();
                struct.setNewNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FORCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.force = iprot.readBool();
                struct.setForceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameDatabase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.databaseName != null) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.databaseName);
          oprot.writeFieldEnd();
        }
        if (struct.newName != null) {
          oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
          oprot.writeString(struct.newName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FORCE_FIELD_DESC);
        oprot.writeBool(struct.force);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameDatabase_argsTupleSchemeFactory implements SchemeFactory {
      public renameDatabase_argsTupleScheme getScheme() {
        return new renameDatabase_argsTupleScheme();
      }
    }

    private static class renameDatabase_argsTupleScheme extends TupleScheme<renameDatabase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        if (struct.isSetDatabaseName()) {
          optionals.set(3);
        }
        if (struct.isSetNewName()) {
          optionals.set(4);
        }
        if (struct.isSetForce()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetDatabaseName()) {
          oprot.writeString(struct.databaseName);
        }
        if (struct.isSetNewName()) {
          oprot.writeString(struct.newName);
        }
        if (struct.isSetForce()) {
          oprot.writeBool(struct.force);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.databaseName = iprot.readString();
          struct.setDatabaseNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.newName = iprot.readString();
          struct.setNewNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.force = iprot.readBool();
          struct.setForceIsSet(true);
        }
      }
    }

  }

  public static class renameDatabase_result implements org.apache.thrift.TBase<renameDatabase_result, renameDatabase_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameDatabase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameDatabase_result");

    private static final org.apache.thrift.protocol.TField IOE_FIELD_DESC = new org.apache.thrift.protocol.TField("ioe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameDatabase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameDatabase_resultTupleSchemeFactory());
    }

    public TIOException ioe; // required
    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IOE((short)1, "ioe"),
      IUE((short)2, "iue"),
      DBE((short)3, "dbe"),
      RE((short)4, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IOE
            return IOE;
          case 2: // IUE
            return IUE;
          case 3: // DBE
            return DBE;
          case 4: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IOE, new org.apache.thrift.meta_data.FieldMetaData("ioe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameDatabase_result.class, metaDataMap);
    }

    public renameDatabase_result() {
    }

    public renameDatabase_result(
      TIOException ioe,
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.ioe = ioe;
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameDatabase_result(renameDatabase_result other) {
      if (other.isSetIoe()) {
        this.ioe = new TIOException(other.ioe);
      }
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public renameDatabase_result deepCopy() {
      return new renameDatabase_result(this);
    }

    @Override
    public void clear() {
      this.ioe = null;
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TIOException getIoe() {
      return this.ioe;
    }

    public renameDatabase_result setIoe(TIOException ioe) {
      this.ioe = ioe;
      return this;
    }

    public void unsetIoe() {
      this.ioe = null;
    }

    /** Returns true if field ioe is set (has been assigned a value) and false otherwise */
    public boolean isSetIoe() {
      return this.ioe != null;
    }

    public void setIoeIsSet(boolean value) {
      if (!value) {
        this.ioe = null;
      }
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public renameDatabase_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public renameDatabase_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public renameDatabase_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IOE:
        if (value == null) {
          unsetIoe();
        } else {
          setIoe((TIOException)value);
        }
        break;

      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IOE:
        return getIoe();

      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IOE:
        return isSetIoe();
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameDatabase_result)
        return this.equals((renameDatabase_result)that);
      return false;
    }

    public boolean equals(renameDatabase_result that) {
      if (that == null)
        return false;

      boolean this_present_ioe = true && this.isSetIoe();
      boolean that_present_ioe = true && that.isSetIoe();
      if (this_present_ioe || that_present_ioe) {
        if (!(this_present_ioe && that_present_ioe))
          return false;
        if (!this.ioe.equals(that.ioe))
          return false;
      }

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ioe = true && (isSetIoe());
      list.add(present_ioe);
      if (present_ioe)
        list.add(ioe);

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(renameDatabase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIoe()).compareTo(other.isSetIoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioe, other.ioe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameDatabase_result(");
      boolean first = true;

      sb.append("ioe:");
      if (this.ioe == null) {
        sb.append("null");
      } else {
        sb.append(this.ioe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameDatabase_resultStandardSchemeFactory implements SchemeFactory {
      public renameDatabase_resultStandardScheme getScheme() {
        return new renameDatabase_resultStandardScheme();
      }
    }

    private static class renameDatabase_resultStandardScheme extends StandardScheme<renameDatabase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameDatabase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioe = new TIOException();
                struct.ioe.read(iprot);
                struct.setIoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameDatabase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ioe != null) {
          oprot.writeFieldBegin(IOE_FIELD_DESC);
          struct.ioe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameDatabase_resultTupleSchemeFactory implements SchemeFactory {
      public renameDatabase_resultTupleScheme getScheme() {
        return new renameDatabase_resultTupleScheme();
      }
    }

    private static class renameDatabase_resultTupleScheme extends TupleScheme<renameDatabase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIoe()) {
          optionals.set(0);
        }
        if (struct.isSetIue()) {
          optionals.set(1);
        }
        if (struct.isSetDbe()) {
          optionals.set(2);
        }
        if (struct.isSetRe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIoe()) {
          struct.ioe.write(oprot);
        }
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ioe = new TIOException();
          struct.ioe.read(iprot);
          struct.setIoeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class checkpoint_args implements org.apache.thrift.TBase<checkpoint_args, checkpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkpoint_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField KBYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("kbytes", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("force", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkpoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkpoint_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public int kbytes; // required
    public int min; // required
    public boolean force; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      KBYTES((short)2, "kbytes"),
      MIN((short)3, "min"),
      FORCE((short)4, "force");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // KBYTES
            return KBYTES;
          case 3: // MIN
            return MIN;
          case 4: // FORCE
            return FORCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KBYTES_ISSET_ID = 0;
    private static final int __MIN_ISSET_ID = 1;
    private static final int __FORCE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.KBYTES, new org.apache.thrift.meta_data.FieldMetaData("kbytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FORCE, new org.apache.thrift.meta_data.FieldMetaData("force", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkpoint_args.class, metaDataMap);
    }

    public checkpoint_args() {
    }

    public checkpoint_args(
      TEnvironment env,
      int kbytes,
      int min,
      boolean force)
    {
      this();
      this.env = env;
      this.kbytes = kbytes;
      setKbytesIsSet(true);
      this.min = min;
      setMinIsSet(true);
      this.force = force;
      setForceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkpoint_args(checkpoint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      this.kbytes = other.kbytes;
      this.min = other.min;
      this.force = other.force;
    }

    public checkpoint_args deepCopy() {
      return new checkpoint_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      setKbytesIsSet(false);
      this.kbytes = 0;
      setMinIsSet(false);
      this.min = 0;
      setForceIsSet(false);
      this.force = false;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public checkpoint_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public int getKbytes() {
      return this.kbytes;
    }

    public checkpoint_args setKbytes(int kbytes) {
      this.kbytes = kbytes;
      setKbytesIsSet(true);
      return this;
    }

    public void unsetKbytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KBYTES_ISSET_ID);
    }

    /** Returns true if field kbytes is set (has been assigned a value) and false otherwise */
    public boolean isSetKbytes() {
      return EncodingUtils.testBit(__isset_bitfield, __KBYTES_ISSET_ID);
    }

    public void setKbytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KBYTES_ISSET_ID, value);
    }

    public int getMin() {
      return this.min;
    }

    public checkpoint_args setMin(int min) {
      this.min = min;
      setMinIsSet(true);
      return this;
    }

    public void unsetMin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
    }

    /** Returns true if field min is set (has been assigned a value) and false otherwise */
    public boolean isSetMin() {
      return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
    }

    public void setMinIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
    }

    public boolean isForce() {
      return this.force;
    }

    public checkpoint_args setForce(boolean force) {
      this.force = force;
      setForceIsSet(true);
      return this;
    }

    public void unsetForce() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    /** Returns true if field force is set (has been assigned a value) and false otherwise */
    public boolean isSetForce() {
      return EncodingUtils.testBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    public void setForceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case KBYTES:
        if (value == null) {
          unsetKbytes();
        } else {
          setKbytes((Integer)value);
        }
        break;

      case MIN:
        if (value == null) {
          unsetMin();
        } else {
          setMin((Integer)value);
        }
        break;

      case FORCE:
        if (value == null) {
          unsetForce();
        } else {
          setForce((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case KBYTES:
        return Integer.valueOf(getKbytes());

      case MIN:
        return Integer.valueOf(getMin());

      case FORCE:
        return Boolean.valueOf(isForce());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case KBYTES:
        return isSetKbytes();
      case MIN:
        return isSetMin();
      case FORCE:
        return isSetForce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkpoint_args)
        return this.equals((checkpoint_args)that);
      return false;
    }

    public boolean equals(checkpoint_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_kbytes = true;
      boolean that_present_kbytes = true;
      if (this_present_kbytes || that_present_kbytes) {
        if (!(this_present_kbytes && that_present_kbytes))
          return false;
        if (this.kbytes != that.kbytes)
          return false;
      }

      boolean this_present_min = true;
      boolean that_present_min = true;
      if (this_present_min || that_present_min) {
        if (!(this_present_min && that_present_min))
          return false;
        if (this.min != that.min)
          return false;
      }

      boolean this_present_force = true;
      boolean that_present_force = true;
      if (this_present_force || that_present_force) {
        if (!(this_present_force && that_present_force))
          return false;
        if (this.force != that.force)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_kbytes = true;
      list.add(present_kbytes);
      if (present_kbytes)
        list.add(kbytes);

      boolean present_min = true;
      list.add(present_min);
      if (present_min)
        list.add(min);

      boolean present_force = true;
      list.add(present_force);
      if (present_force)
        list.add(force);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKbytes()).compareTo(other.isSetKbytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKbytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kbytes, other.kbytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetForce()).compareTo(other.isSetForce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force, other.force);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkpoint_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kbytes:");
      sb.append(this.kbytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("min:");
      sb.append(this.min);
      first = false;
      if (!first) sb.append(", ");
      sb.append("force:");
      sb.append(this.force);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkpoint_argsStandardSchemeFactory implements SchemeFactory {
      public checkpoint_argsStandardScheme getScheme() {
        return new checkpoint_argsStandardScheme();
      }
    }

    private static class checkpoint_argsStandardScheme extends StandardScheme<checkpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KBYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.kbytes = iprot.readI32();
                struct.setKbytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.min = iprot.readI32();
                struct.setMinIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FORCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.force = iprot.readBool();
                struct.setForceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(KBYTES_FIELD_DESC);
        oprot.writeI32(struct.kbytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_FIELD_DESC);
        oprot.writeI32(struct.min);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FORCE_FIELD_DESC);
        oprot.writeBool(struct.force);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkpoint_argsTupleSchemeFactory implements SchemeFactory {
      public checkpoint_argsTupleScheme getScheme() {
        return new checkpoint_argsTupleScheme();
      }
    }

    private static class checkpoint_argsTupleScheme extends TupleScheme<checkpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkpoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetKbytes()) {
          optionals.set(1);
        }
        if (struct.isSetMin()) {
          optionals.set(2);
        }
        if (struct.isSetForce()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetKbytes()) {
          oprot.writeI32(struct.kbytes);
        }
        if (struct.isSetMin()) {
          oprot.writeI32(struct.min);
        }
        if (struct.isSetForce()) {
          oprot.writeBool(struct.force);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkpoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kbytes = iprot.readI32();
          struct.setKbytesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.min = iprot.readI32();
          struct.setMinIsSet(true);
        }
        if (incoming.get(3)) {
          struct.force = iprot.readBool();
          struct.setForceIsSet(true);
        }
      }
    }

  }

  public static class checkpoint_result implements org.apache.thrift.TBase<checkpoint_result, checkpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkpoint_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkpoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkpoint_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkpoint_result.class, metaDataMap);
    }

    public checkpoint_result() {
    }

    public checkpoint_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkpoint_result(checkpoint_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public checkpoint_result deepCopy() {
      return new checkpoint_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public checkpoint_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public checkpoint_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkpoint_result)
        return this.equals((checkpoint_result)that);
      return false;
    }

    public boolean equals(checkpoint_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkpoint_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkpoint_resultStandardSchemeFactory implements SchemeFactory {
      public checkpoint_resultStandardScheme getScheme() {
        return new checkpoint_resultStandardScheme();
      }
    }

    private static class checkpoint_resultStandardScheme extends StandardScheme<checkpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkpoint_resultTupleSchemeFactory implements SchemeFactory {
      public checkpoint_resultTupleScheme getScheme() {
        return new checkpoint_resultTupleScheme();
      }
    }

    private static class checkpoint_resultTupleScheme extends TupleScheme<checkpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkpoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkpoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class openDatabase_args implements org.apache.thrift.TBase<openDatabase_args, openDatabase_args._Fields>, java.io.Serializable, Cloneable, Comparable<openDatabase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openDatabase_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DB_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("dbConfig", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openDatabase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openDatabase_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public TTransaction txn; // required
    public String fileName; // required
    public String databaseName; // required
    public TDatabaseConfig dbConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      TXN((short)2, "txn"),
      FILE_NAME((short)3, "fileName"),
      DATABASE_NAME((short)4, "databaseName"),
      DB_CONFIG((short)5, "dbConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // TXN
            return TXN;
          case 3: // FILE_NAME
            return FILE_NAME;
          case 4: // DATABASE_NAME
            return DATABASE_NAME;
          case 5: // DB_CONFIG
            return DB_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DB_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("dbConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabaseConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openDatabase_args.class, metaDataMap);
    }

    public openDatabase_args() {
    }

    public openDatabase_args(
      TEnvironment env,
      TTransaction txn,
      String fileName,
      String databaseName,
      TDatabaseConfig dbConfig)
    {
      this();
      this.env = env;
      this.txn = txn;
      this.fileName = fileName;
      this.databaseName = databaseName;
      this.dbConfig = dbConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openDatabase_args(openDatabase_args other) {
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetDatabaseName()) {
        this.databaseName = other.databaseName;
      }
      if (other.isSetDbConfig()) {
        this.dbConfig = new TDatabaseConfig(other.dbConfig);
      }
    }

    public openDatabase_args deepCopy() {
      return new openDatabase_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.txn = null;
      this.fileName = null;
      this.databaseName = null;
      this.dbConfig = null;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public openDatabase_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public openDatabase_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public openDatabase_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getDatabaseName() {
      return this.databaseName;
    }

    public openDatabase_args setDatabaseName(String databaseName) {
      this.databaseName = databaseName;
      return this;
    }

    public void unsetDatabaseName() {
      this.databaseName = null;
    }

    /** Returns true if field databaseName is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseName() {
      return this.databaseName != null;
    }

    public void setDatabaseNameIsSet(boolean value) {
      if (!value) {
        this.databaseName = null;
      }
    }

    public TDatabaseConfig getDbConfig() {
      return this.dbConfig;
    }

    public openDatabase_args setDbConfig(TDatabaseConfig dbConfig) {
      this.dbConfig = dbConfig;
      return this;
    }

    public void unsetDbConfig() {
      this.dbConfig = null;
    }

    /** Returns true if field dbConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetDbConfig() {
      return this.dbConfig != null;
    }

    public void setDbConfigIsSet(boolean value) {
      if (!value) {
        this.dbConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case DATABASE_NAME:
        if (value == null) {
          unsetDatabaseName();
        } else {
          setDatabaseName((String)value);
        }
        break;

      case DB_CONFIG:
        if (value == null) {
          unsetDbConfig();
        } else {
          setDbConfig((TDatabaseConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case TXN:
        return getTxn();

      case FILE_NAME:
        return getFileName();

      case DATABASE_NAME:
        return getDatabaseName();

      case DB_CONFIG:
        return getDbConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case TXN:
        return isSetTxn();
      case FILE_NAME:
        return isSetFileName();
      case DATABASE_NAME:
        return isSetDatabaseName();
      case DB_CONFIG:
        return isSetDbConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openDatabase_args)
        return this.equals((openDatabase_args)that);
      return false;
    }

    public boolean equals(openDatabase_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_databaseName = true && this.isSetDatabaseName();
      boolean that_present_databaseName = true && that.isSetDatabaseName();
      if (this_present_databaseName || that_present_databaseName) {
        if (!(this_present_databaseName && that_present_databaseName))
          return false;
        if (!this.databaseName.equals(that.databaseName))
          return false;
      }

      boolean this_present_dbConfig = true && this.isSetDbConfig();
      boolean that_present_dbConfig = true && that.isSetDbConfig();
      if (this_present_dbConfig || that_present_dbConfig) {
        if (!(this_present_dbConfig && that_present_dbConfig))
          return false;
        if (!this.dbConfig.equals(that.dbConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      boolean present_databaseName = true && (isSetDatabaseName());
      list.add(present_databaseName);
      if (present_databaseName)
        list.add(databaseName);

      boolean present_dbConfig = true && (isSetDbConfig());
      list.add(present_dbConfig);
      if (present_dbConfig)
        list.add(dbConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(openDatabase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabaseName()).compareTo(other.isSetDatabaseName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseName, other.databaseName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbConfig()).compareTo(other.isSetDbConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbConfig, other.dbConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openDatabase_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("databaseName:");
      if (this.databaseName == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbConfig:");
      if (this.dbConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.dbConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (dbConfig != null) {
        dbConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openDatabase_argsStandardSchemeFactory implements SchemeFactory {
      public openDatabase_argsStandardScheme getScheme() {
        return new openDatabase_argsStandardScheme();
      }
    }

    private static class openDatabase_argsStandardScheme extends StandardScheme<openDatabase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openDatabase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATABASE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.databaseName = iprot.readString();
                struct.setDatabaseNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DB_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbConfig = new TDatabaseConfig();
                struct.dbConfig.read(iprot);
                struct.setDbConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openDatabase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.databaseName != null) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.databaseName);
          oprot.writeFieldEnd();
        }
        if (struct.dbConfig != null) {
          oprot.writeFieldBegin(DB_CONFIG_FIELD_DESC);
          struct.dbConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openDatabase_argsTupleSchemeFactory implements SchemeFactory {
      public openDatabase_argsTupleScheme getScheme() {
        return new openDatabase_argsTupleScheme();
      }
    }

    private static class openDatabase_argsTupleScheme extends TupleScheme<openDatabase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        if (struct.isSetDatabaseName()) {
          optionals.set(3);
        }
        if (struct.isSetDbConfig()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetDatabaseName()) {
          oprot.writeString(struct.databaseName);
        }
        if (struct.isSetDbConfig()) {
          struct.dbConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.databaseName = iprot.readString();
          struct.setDatabaseNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dbConfig = new TDatabaseConfig();
          struct.dbConfig.read(iprot);
          struct.setDbConfigIsSet(true);
        }
      }
    }

  }

  public static class openDatabase_result implements org.apache.thrift.TBase<openDatabase_result, openDatabase_result._Fields>, java.io.Serializable, Cloneable, Comparable<openDatabase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openDatabase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IOE_FIELD_DESC = new org.apache.thrift.protocol.TField("ioe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openDatabase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openDatabase_resultTupleSchemeFactory());
    }

    public TDatabase success; // required
    public TIOException ioe; // required
    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IOE((short)1, "ioe"),
      IUE((short)2, "iue"),
      DBE((short)3, "dbe"),
      RE((short)4, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IOE
            return IOE;
          case 2: // IUE
            return IUE;
          case 3: // DBE
            return DBE;
          case 4: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.IOE, new org.apache.thrift.meta_data.FieldMetaData("ioe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openDatabase_result.class, metaDataMap);
    }

    public openDatabase_result() {
    }

    public openDatabase_result(
      TDatabase success,
      TIOException ioe,
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.ioe = ioe;
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openDatabase_result(openDatabase_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDatabase(other.success);
      }
      if (other.isSetIoe()) {
        this.ioe = new TIOException(other.ioe);
      }
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public openDatabase_result deepCopy() {
      return new openDatabase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ioe = null;
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TDatabase getSuccess() {
      return this.success;
    }

    public openDatabase_result setSuccess(TDatabase success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TIOException getIoe() {
      return this.ioe;
    }

    public openDatabase_result setIoe(TIOException ioe) {
      this.ioe = ioe;
      return this;
    }

    public void unsetIoe() {
      this.ioe = null;
    }

    /** Returns true if field ioe is set (has been assigned a value) and false otherwise */
    public boolean isSetIoe() {
      return this.ioe != null;
    }

    public void setIoeIsSet(boolean value) {
      if (!value) {
        this.ioe = null;
      }
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public openDatabase_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public openDatabase_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public openDatabase_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDatabase)value);
        }
        break;

      case IOE:
        if (value == null) {
          unsetIoe();
        } else {
          setIoe((TIOException)value);
        }
        break;

      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IOE:
        return getIoe();

      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IOE:
        return isSetIoe();
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openDatabase_result)
        return this.equals((openDatabase_result)that);
      return false;
    }

    public boolean equals(openDatabase_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ioe = true && this.isSetIoe();
      boolean that_present_ioe = true && that.isSetIoe();
      if (this_present_ioe || that_present_ioe) {
        if (!(this_present_ioe && that_present_ioe))
          return false;
        if (!this.ioe.equals(that.ioe))
          return false;
      }

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ioe = true && (isSetIoe());
      list.add(present_ioe);
      if (present_ioe)
        list.add(ioe);

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(openDatabase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoe()).compareTo(other.isSetIoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioe, other.ioe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openDatabase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioe:");
      if (this.ioe == null) {
        sb.append("null");
      } else {
        sb.append(this.ioe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openDatabase_resultStandardSchemeFactory implements SchemeFactory {
      public openDatabase_resultStandardScheme getScheme() {
        return new openDatabase_resultStandardScheme();
      }
    }

    private static class openDatabase_resultStandardScheme extends StandardScheme<openDatabase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openDatabase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDatabase();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioe = new TIOException();
                struct.ioe.read(iprot);
                struct.setIoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openDatabase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioe != null) {
          oprot.writeFieldBegin(IOE_FIELD_DESC);
          struct.ioe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openDatabase_resultTupleSchemeFactory implements SchemeFactory {
      public openDatabase_resultTupleScheme getScheme() {
        return new openDatabase_resultTupleScheme();
      }
    }

    private static class openDatabase_resultTupleScheme extends TupleScheme<openDatabase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIoe()) {
          optionals.set(1);
        }
        if (struct.isSetIue()) {
          optionals.set(2);
        }
        if (struct.isSetDbe()) {
          optionals.set(3);
        }
        if (struct.isSetRe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIoe()) {
          struct.ioe.write(oprot);
        }
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TDatabase();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ioe = new TIOException();
          struct.ioe.read(iprot);
          struct.setIoeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class openSecondaryDatabase_args implements org.apache.thrift.TBase<openSecondaryDatabase_args, openSecondaryDatabase_args._Fields>, java.io.Serializable, Cloneable, Comparable<openSecondaryDatabase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSecondaryDatabase_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRIMARY_DB_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryDb", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField SDB_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sdbConfig", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSecondaryDatabase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSecondaryDatabase_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public TTransaction txn; // required
    public String fileName; // required
    public String databaseName; // required
    public TDatabase primaryDb; // required
    public TSecondaryDatabaseConfig sdbConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      TXN((short)2, "txn"),
      FILE_NAME((short)3, "fileName"),
      DATABASE_NAME((short)4, "databaseName"),
      PRIMARY_DB((short)5, "primaryDb"),
      SDB_CONFIG((short)6, "sdbConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // TXN
            return TXN;
          case 3: // FILE_NAME
            return FILE_NAME;
          case 4: // DATABASE_NAME
            return DATABASE_NAME;
          case 5: // PRIMARY_DB
            return PRIMARY_DB;
          case 6: // SDB_CONFIG
            return SDB_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIMARY_DB, new org.apache.thrift.meta_data.FieldMetaData("primaryDb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.SDB_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("sdbConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSecondaryDatabaseConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSecondaryDatabase_args.class, metaDataMap);
    }

    public openSecondaryDatabase_args() {
    }

    public openSecondaryDatabase_args(
      TEnvironment env,
      TTransaction txn,
      String fileName,
      String databaseName,
      TDatabase primaryDb,
      TSecondaryDatabaseConfig sdbConfig)
    {
      this();
      this.env = env;
      this.txn = txn;
      this.fileName = fileName;
      this.databaseName = databaseName;
      this.primaryDb = primaryDb;
      this.sdbConfig = sdbConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSecondaryDatabase_args(openSecondaryDatabase_args other) {
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetDatabaseName()) {
        this.databaseName = other.databaseName;
      }
      if (other.isSetPrimaryDb()) {
        this.primaryDb = new TDatabase(other.primaryDb);
      }
      if (other.isSetSdbConfig()) {
        this.sdbConfig = new TSecondaryDatabaseConfig(other.sdbConfig);
      }
    }

    public openSecondaryDatabase_args deepCopy() {
      return new openSecondaryDatabase_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.txn = null;
      this.fileName = null;
      this.databaseName = null;
      this.primaryDb = null;
      this.sdbConfig = null;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public openSecondaryDatabase_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public openSecondaryDatabase_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public openSecondaryDatabase_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getDatabaseName() {
      return this.databaseName;
    }

    public openSecondaryDatabase_args setDatabaseName(String databaseName) {
      this.databaseName = databaseName;
      return this;
    }

    public void unsetDatabaseName() {
      this.databaseName = null;
    }

    /** Returns true if field databaseName is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseName() {
      return this.databaseName != null;
    }

    public void setDatabaseNameIsSet(boolean value) {
      if (!value) {
        this.databaseName = null;
      }
    }

    public TDatabase getPrimaryDb() {
      return this.primaryDb;
    }

    public openSecondaryDatabase_args setPrimaryDb(TDatabase primaryDb) {
      this.primaryDb = primaryDb;
      return this;
    }

    public void unsetPrimaryDb() {
      this.primaryDb = null;
    }

    /** Returns true if field primaryDb is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryDb() {
      return this.primaryDb != null;
    }

    public void setPrimaryDbIsSet(boolean value) {
      if (!value) {
        this.primaryDb = null;
      }
    }

    public TSecondaryDatabaseConfig getSdbConfig() {
      return this.sdbConfig;
    }

    public openSecondaryDatabase_args setSdbConfig(TSecondaryDatabaseConfig sdbConfig) {
      this.sdbConfig = sdbConfig;
      return this;
    }

    public void unsetSdbConfig() {
      this.sdbConfig = null;
    }

    /** Returns true if field sdbConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetSdbConfig() {
      return this.sdbConfig != null;
    }

    public void setSdbConfigIsSet(boolean value) {
      if (!value) {
        this.sdbConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case DATABASE_NAME:
        if (value == null) {
          unsetDatabaseName();
        } else {
          setDatabaseName((String)value);
        }
        break;

      case PRIMARY_DB:
        if (value == null) {
          unsetPrimaryDb();
        } else {
          setPrimaryDb((TDatabase)value);
        }
        break;

      case SDB_CONFIG:
        if (value == null) {
          unsetSdbConfig();
        } else {
          setSdbConfig((TSecondaryDatabaseConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case TXN:
        return getTxn();

      case FILE_NAME:
        return getFileName();

      case DATABASE_NAME:
        return getDatabaseName();

      case PRIMARY_DB:
        return getPrimaryDb();

      case SDB_CONFIG:
        return getSdbConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case TXN:
        return isSetTxn();
      case FILE_NAME:
        return isSetFileName();
      case DATABASE_NAME:
        return isSetDatabaseName();
      case PRIMARY_DB:
        return isSetPrimaryDb();
      case SDB_CONFIG:
        return isSetSdbConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSecondaryDatabase_args)
        return this.equals((openSecondaryDatabase_args)that);
      return false;
    }

    public boolean equals(openSecondaryDatabase_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_databaseName = true && this.isSetDatabaseName();
      boolean that_present_databaseName = true && that.isSetDatabaseName();
      if (this_present_databaseName || that_present_databaseName) {
        if (!(this_present_databaseName && that_present_databaseName))
          return false;
        if (!this.databaseName.equals(that.databaseName))
          return false;
      }

      boolean this_present_primaryDb = true && this.isSetPrimaryDb();
      boolean that_present_primaryDb = true && that.isSetPrimaryDb();
      if (this_present_primaryDb || that_present_primaryDb) {
        if (!(this_present_primaryDb && that_present_primaryDb))
          return false;
        if (!this.primaryDb.equals(that.primaryDb))
          return false;
      }

      boolean this_present_sdbConfig = true && this.isSetSdbConfig();
      boolean that_present_sdbConfig = true && that.isSetSdbConfig();
      if (this_present_sdbConfig || that_present_sdbConfig) {
        if (!(this_present_sdbConfig && that_present_sdbConfig))
          return false;
        if (!this.sdbConfig.equals(that.sdbConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      boolean present_databaseName = true && (isSetDatabaseName());
      list.add(present_databaseName);
      if (present_databaseName)
        list.add(databaseName);

      boolean present_primaryDb = true && (isSetPrimaryDb());
      list.add(present_primaryDb);
      if (present_primaryDb)
        list.add(primaryDb);

      boolean present_sdbConfig = true && (isSetSdbConfig());
      list.add(present_sdbConfig);
      if (present_sdbConfig)
        list.add(sdbConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(openSecondaryDatabase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabaseName()).compareTo(other.isSetDatabaseName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseName, other.databaseName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrimaryDb()).compareTo(other.isSetPrimaryDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryDb, other.primaryDb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSdbConfig()).compareTo(other.isSetSdbConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdbConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdbConfig, other.sdbConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSecondaryDatabase_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("databaseName:");
      if (this.databaseName == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryDb:");
      if (this.primaryDb == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryDb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sdbConfig:");
      if (this.sdbConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.sdbConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (primaryDb != null) {
        primaryDb.validate();
      }
      if (sdbConfig != null) {
        sdbConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSecondaryDatabase_argsStandardSchemeFactory implements SchemeFactory {
      public openSecondaryDatabase_argsStandardScheme getScheme() {
        return new openSecondaryDatabase_argsStandardScheme();
      }
    }

    private static class openSecondaryDatabase_argsStandardScheme extends StandardScheme<openSecondaryDatabase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSecondaryDatabase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATABASE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.databaseName = iprot.readString();
                struct.setDatabaseNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRIMARY_DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.primaryDb = new TDatabase();
                struct.primaryDb.read(iprot);
                struct.setPrimaryDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SDB_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sdbConfig = new TSecondaryDatabaseConfig();
                struct.sdbConfig.read(iprot);
                struct.setSdbConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSecondaryDatabase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.databaseName != null) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.databaseName);
          oprot.writeFieldEnd();
        }
        if (struct.primaryDb != null) {
          oprot.writeFieldBegin(PRIMARY_DB_FIELD_DESC);
          struct.primaryDb.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sdbConfig != null) {
          oprot.writeFieldBegin(SDB_CONFIG_FIELD_DESC);
          struct.sdbConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSecondaryDatabase_argsTupleSchemeFactory implements SchemeFactory {
      public openSecondaryDatabase_argsTupleScheme getScheme() {
        return new openSecondaryDatabase_argsTupleScheme();
      }
    }

    private static class openSecondaryDatabase_argsTupleScheme extends TupleScheme<openSecondaryDatabase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSecondaryDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        if (struct.isSetDatabaseName()) {
          optionals.set(3);
        }
        if (struct.isSetPrimaryDb()) {
          optionals.set(4);
        }
        if (struct.isSetSdbConfig()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetDatabaseName()) {
          oprot.writeString(struct.databaseName);
        }
        if (struct.isSetPrimaryDb()) {
          struct.primaryDb.write(oprot);
        }
        if (struct.isSetSdbConfig()) {
          struct.sdbConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSecondaryDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.databaseName = iprot.readString();
          struct.setDatabaseNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.primaryDb = new TDatabase();
          struct.primaryDb.read(iprot);
          struct.setPrimaryDbIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sdbConfig = new TSecondaryDatabaseConfig();
          struct.sdbConfig.read(iprot);
          struct.setSdbConfigIsSet(true);
        }
      }
    }

  }

  public static class openSecondaryDatabase_result implements org.apache.thrift.TBase<openSecondaryDatabase_result, openSecondaryDatabase_result._Fields>, java.io.Serializable, Cloneable, Comparable<openSecondaryDatabase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSecondaryDatabase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IOE_FIELD_DESC = new org.apache.thrift.protocol.TField("ioe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSecondaryDatabase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSecondaryDatabase_resultTupleSchemeFactory());
    }

    public TDatabase success; // required
    public TIOException ioe; // required
    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IOE((short)1, "ioe"),
      IUE((short)2, "iue"),
      DBE((short)3, "dbe"),
      RE((short)4, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IOE
            return IOE;
          case 2: // IUE
            return IUE;
          case 3: // DBE
            return DBE;
          case 4: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.IOE, new org.apache.thrift.meta_data.FieldMetaData("ioe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSecondaryDatabase_result.class, metaDataMap);
    }

    public openSecondaryDatabase_result() {
    }

    public openSecondaryDatabase_result(
      TDatabase success,
      TIOException ioe,
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.ioe = ioe;
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSecondaryDatabase_result(openSecondaryDatabase_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDatabase(other.success);
      }
      if (other.isSetIoe()) {
        this.ioe = new TIOException(other.ioe);
      }
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public openSecondaryDatabase_result deepCopy() {
      return new openSecondaryDatabase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ioe = null;
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TDatabase getSuccess() {
      return this.success;
    }

    public openSecondaryDatabase_result setSuccess(TDatabase success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TIOException getIoe() {
      return this.ioe;
    }

    public openSecondaryDatabase_result setIoe(TIOException ioe) {
      this.ioe = ioe;
      return this;
    }

    public void unsetIoe() {
      this.ioe = null;
    }

    /** Returns true if field ioe is set (has been assigned a value) and false otherwise */
    public boolean isSetIoe() {
      return this.ioe != null;
    }

    public void setIoeIsSet(boolean value) {
      if (!value) {
        this.ioe = null;
      }
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public openSecondaryDatabase_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public openSecondaryDatabase_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public openSecondaryDatabase_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDatabase)value);
        }
        break;

      case IOE:
        if (value == null) {
          unsetIoe();
        } else {
          setIoe((TIOException)value);
        }
        break;

      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IOE:
        return getIoe();

      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IOE:
        return isSetIoe();
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSecondaryDatabase_result)
        return this.equals((openSecondaryDatabase_result)that);
      return false;
    }

    public boolean equals(openSecondaryDatabase_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ioe = true && this.isSetIoe();
      boolean that_present_ioe = true && that.isSetIoe();
      if (this_present_ioe || that_present_ioe) {
        if (!(this_present_ioe && that_present_ioe))
          return false;
        if (!this.ioe.equals(that.ioe))
          return false;
      }

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ioe = true && (isSetIoe());
      list.add(present_ioe);
      if (present_ioe)
        list.add(ioe);

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(openSecondaryDatabase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoe()).compareTo(other.isSetIoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioe, other.ioe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSecondaryDatabase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioe:");
      if (this.ioe == null) {
        sb.append("null");
      } else {
        sb.append(this.ioe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSecondaryDatabase_resultStandardSchemeFactory implements SchemeFactory {
      public openSecondaryDatabase_resultStandardScheme getScheme() {
        return new openSecondaryDatabase_resultStandardScheme();
      }
    }

    private static class openSecondaryDatabase_resultStandardScheme extends StandardScheme<openSecondaryDatabase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSecondaryDatabase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDatabase();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioe = new TIOException();
                struct.ioe.read(iprot);
                struct.setIoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSecondaryDatabase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioe != null) {
          oprot.writeFieldBegin(IOE_FIELD_DESC);
          struct.ioe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSecondaryDatabase_resultTupleSchemeFactory implements SchemeFactory {
      public openSecondaryDatabase_resultTupleScheme getScheme() {
        return new openSecondaryDatabase_resultTupleScheme();
      }
    }

    private static class openSecondaryDatabase_resultTupleScheme extends TupleScheme<openSecondaryDatabase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSecondaryDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIoe()) {
          optionals.set(1);
        }
        if (struct.isSetIue()) {
          optionals.set(2);
        }
        if (struct.isSetDbe()) {
          optionals.set(3);
        }
        if (struct.isSetRe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIoe()) {
          struct.ioe.write(oprot);
        }
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSecondaryDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TDatabase();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ioe = new TIOException();
          struct.ioe.read(iprot);
          struct.setIoeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class closeDatabaseHandle_args implements org.apache.thrift.TBase<closeDatabaseHandle_args, closeDatabaseHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeDatabaseHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeDatabaseHandle_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeDatabaseHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeDatabaseHandle_argsTupleSchemeFactory());
    }

    public TDatabase db; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeDatabaseHandle_args.class, metaDataMap);
    }

    public closeDatabaseHandle_args() {
    }

    public closeDatabaseHandle_args(
      TDatabase db)
    {
      this();
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeDatabaseHandle_args(closeDatabaseHandle_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
    }

    public closeDatabaseHandle_args deepCopy() {
      return new closeDatabaseHandle_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public closeDatabaseHandle_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeDatabaseHandle_args)
        return this.equals((closeDatabaseHandle_args)that);
      return false;
    }

    public boolean equals(closeDatabaseHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeDatabaseHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeDatabaseHandle_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeDatabaseHandle_argsStandardSchemeFactory implements SchemeFactory {
      public closeDatabaseHandle_argsStandardScheme getScheme() {
        return new closeDatabaseHandle_argsStandardScheme();
      }
    }

    private static class closeDatabaseHandle_argsStandardScheme extends StandardScheme<closeDatabaseHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeDatabaseHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeDatabaseHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeDatabaseHandle_argsTupleSchemeFactory implements SchemeFactory {
      public closeDatabaseHandle_argsTupleScheme getScheme() {
        return new closeDatabaseHandle_argsTupleScheme();
      }
    }

    private static class closeDatabaseHandle_argsTupleScheme extends TupleScheme<closeDatabaseHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
      }
    }

  }

  public static class closeDatabaseHandle_result implements org.apache.thrift.TBase<closeDatabaseHandle_result, closeDatabaseHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeDatabaseHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeDatabaseHandle_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeDatabaseHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeDatabaseHandle_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeDatabaseHandle_result.class, metaDataMap);
    }

    public closeDatabaseHandle_result() {
    }

    public closeDatabaseHandle_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeDatabaseHandle_result(closeDatabaseHandle_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public closeDatabaseHandle_result deepCopy() {
      return new closeDatabaseHandle_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public closeDatabaseHandle_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public closeDatabaseHandle_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeDatabaseHandle_result)
        return this.equals((closeDatabaseHandle_result)that);
      return false;
    }

    public boolean equals(closeDatabaseHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeDatabaseHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeDatabaseHandle_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeDatabaseHandle_resultStandardSchemeFactory implements SchemeFactory {
      public closeDatabaseHandle_resultStandardScheme getScheme() {
        return new closeDatabaseHandle_resultStandardScheme();
      }
    }

    private static class closeDatabaseHandle_resultStandardScheme extends StandardScheme<closeDatabaseHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeDatabaseHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeDatabaseHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeDatabaseHandle_resultTupleSchemeFactory implements SchemeFactory {
      public closeDatabaseHandle_resultTupleScheme getScheme() {
        return new closeDatabaseHandle_resultTupleScheme();
      }
    }

    private static class closeDatabaseHandle_resultTupleScheme extends TupleScheme<closeDatabaseHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class closeDatabaseHandles_args implements org.apache.thrift.TBase<closeDatabaseHandles_args, closeDatabaseHandles_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeDatabaseHandles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeDatabaseHandles_args");

    private static final org.apache.thrift.protocol.TField ENV_HOME_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("envHomeDir", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MIN_IDLE_IN_MILLI_FIELD_DESC = new org.apache.thrift.protocol.TField("minIdleInMilli", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeDatabaseHandles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeDatabaseHandles_argsTupleSchemeFactory());
    }

    public String envHomeDir; // required
    public String fileName; // required
    public String databaseName; // required
    public long minIdleInMilli; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV_HOME_DIR((short)1, "envHomeDir"),
      FILE_NAME((short)2, "fileName"),
      DATABASE_NAME((short)3, "databaseName"),
      MIN_IDLE_IN_MILLI((short)4, "minIdleInMilli");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV_HOME_DIR
            return ENV_HOME_DIR;
          case 2: // FILE_NAME
            return FILE_NAME;
          case 3: // DATABASE_NAME
            return DATABASE_NAME;
          case 4: // MIN_IDLE_IN_MILLI
            return MIN_IDLE_IN_MILLI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINIDLEINMILLI_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV_HOME_DIR, new org.apache.thrift.meta_data.FieldMetaData("envHomeDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIN_IDLE_IN_MILLI, new org.apache.thrift.meta_data.FieldMetaData("minIdleInMilli", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeDatabaseHandles_args.class, metaDataMap);
    }

    public closeDatabaseHandles_args() {
    }

    public closeDatabaseHandles_args(
      String envHomeDir,
      String fileName,
      String databaseName,
      long minIdleInMilli)
    {
      this();
      this.envHomeDir = envHomeDir;
      this.fileName = fileName;
      this.databaseName = databaseName;
      this.minIdleInMilli = minIdleInMilli;
      setMinIdleInMilliIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeDatabaseHandles_args(closeDatabaseHandles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEnvHomeDir()) {
        this.envHomeDir = other.envHomeDir;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetDatabaseName()) {
        this.databaseName = other.databaseName;
      }
      this.minIdleInMilli = other.minIdleInMilli;
    }

    public closeDatabaseHandles_args deepCopy() {
      return new closeDatabaseHandles_args(this);
    }

    @Override
    public void clear() {
      this.envHomeDir = null;
      this.fileName = null;
      this.databaseName = null;
      setMinIdleInMilliIsSet(false);
      this.minIdleInMilli = 0;
    }

    public String getEnvHomeDir() {
      return this.envHomeDir;
    }

    public closeDatabaseHandles_args setEnvHomeDir(String envHomeDir) {
      this.envHomeDir = envHomeDir;
      return this;
    }

    public void unsetEnvHomeDir() {
      this.envHomeDir = null;
    }

    /** Returns true if field envHomeDir is set (has been assigned a value) and false otherwise */
    public boolean isSetEnvHomeDir() {
      return this.envHomeDir != null;
    }

    public void setEnvHomeDirIsSet(boolean value) {
      if (!value) {
        this.envHomeDir = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public closeDatabaseHandles_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getDatabaseName() {
      return this.databaseName;
    }

    public closeDatabaseHandles_args setDatabaseName(String databaseName) {
      this.databaseName = databaseName;
      return this;
    }

    public void unsetDatabaseName() {
      this.databaseName = null;
    }

    /** Returns true if field databaseName is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseName() {
      return this.databaseName != null;
    }

    public void setDatabaseNameIsSet(boolean value) {
      if (!value) {
        this.databaseName = null;
      }
    }

    public long getMinIdleInMilli() {
      return this.minIdleInMilli;
    }

    public closeDatabaseHandles_args setMinIdleInMilli(long minIdleInMilli) {
      this.minIdleInMilli = minIdleInMilli;
      setMinIdleInMilliIsSet(true);
      return this;
    }

    public void unsetMinIdleInMilli() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINIDLEINMILLI_ISSET_ID);
    }

    /** Returns true if field minIdleInMilli is set (has been assigned a value) and false otherwise */
    public boolean isSetMinIdleInMilli() {
      return EncodingUtils.testBit(__isset_bitfield, __MINIDLEINMILLI_ISSET_ID);
    }

    public void setMinIdleInMilliIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINIDLEINMILLI_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV_HOME_DIR:
        if (value == null) {
          unsetEnvHomeDir();
        } else {
          setEnvHomeDir((String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case DATABASE_NAME:
        if (value == null) {
          unsetDatabaseName();
        } else {
          setDatabaseName((String)value);
        }
        break;

      case MIN_IDLE_IN_MILLI:
        if (value == null) {
          unsetMinIdleInMilli();
        } else {
          setMinIdleInMilli((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV_HOME_DIR:
        return getEnvHomeDir();

      case FILE_NAME:
        return getFileName();

      case DATABASE_NAME:
        return getDatabaseName();

      case MIN_IDLE_IN_MILLI:
        return Long.valueOf(getMinIdleInMilli());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV_HOME_DIR:
        return isSetEnvHomeDir();
      case FILE_NAME:
        return isSetFileName();
      case DATABASE_NAME:
        return isSetDatabaseName();
      case MIN_IDLE_IN_MILLI:
        return isSetMinIdleInMilli();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeDatabaseHandles_args)
        return this.equals((closeDatabaseHandles_args)that);
      return false;
    }

    public boolean equals(closeDatabaseHandles_args that) {
      if (that == null)
        return false;

      boolean this_present_envHomeDir = true && this.isSetEnvHomeDir();
      boolean that_present_envHomeDir = true && that.isSetEnvHomeDir();
      if (this_present_envHomeDir || that_present_envHomeDir) {
        if (!(this_present_envHomeDir && that_present_envHomeDir))
          return false;
        if (!this.envHomeDir.equals(that.envHomeDir))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_databaseName = true && this.isSetDatabaseName();
      boolean that_present_databaseName = true && that.isSetDatabaseName();
      if (this_present_databaseName || that_present_databaseName) {
        if (!(this_present_databaseName && that_present_databaseName))
          return false;
        if (!this.databaseName.equals(that.databaseName))
          return false;
      }

      boolean this_present_minIdleInMilli = true;
      boolean that_present_minIdleInMilli = true;
      if (this_present_minIdleInMilli || that_present_minIdleInMilli) {
        if (!(this_present_minIdleInMilli && that_present_minIdleInMilli))
          return false;
        if (this.minIdleInMilli != that.minIdleInMilli)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_envHomeDir = true && (isSetEnvHomeDir());
      list.add(present_envHomeDir);
      if (present_envHomeDir)
        list.add(envHomeDir);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      boolean present_databaseName = true && (isSetDatabaseName());
      list.add(present_databaseName);
      if (present_databaseName)
        list.add(databaseName);

      boolean present_minIdleInMilli = true;
      list.add(present_minIdleInMilli);
      if (present_minIdleInMilli)
        list.add(minIdleInMilli);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeDatabaseHandles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnvHomeDir()).compareTo(other.isSetEnvHomeDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnvHomeDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envHomeDir, other.envHomeDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabaseName()).compareTo(other.isSetDatabaseName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseName, other.databaseName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinIdleInMilli()).compareTo(other.isSetMinIdleInMilli());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinIdleInMilli()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minIdleInMilli, other.minIdleInMilli);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeDatabaseHandles_args(");
      boolean first = true;

      sb.append("envHomeDir:");
      if (this.envHomeDir == null) {
        sb.append("null");
      } else {
        sb.append(this.envHomeDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("databaseName:");
      if (this.databaseName == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minIdleInMilli:");
      sb.append(this.minIdleInMilli);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeDatabaseHandles_argsStandardSchemeFactory implements SchemeFactory {
      public closeDatabaseHandles_argsStandardScheme getScheme() {
        return new closeDatabaseHandles_argsStandardScheme();
      }
    }

    private static class closeDatabaseHandles_argsStandardScheme extends StandardScheme<closeDatabaseHandles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeDatabaseHandles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV_HOME_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.envHomeDir = iprot.readString();
                struct.setEnvHomeDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATABASE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.databaseName = iprot.readString();
                struct.setDatabaseNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MIN_IDLE_IN_MILLI
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.minIdleInMilli = iprot.readI64();
                struct.setMinIdleInMilliIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeDatabaseHandles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.envHomeDir != null) {
          oprot.writeFieldBegin(ENV_HOME_DIR_FIELD_DESC);
          oprot.writeString(struct.envHomeDir);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.databaseName != null) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.databaseName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MIN_IDLE_IN_MILLI_FIELD_DESC);
        oprot.writeI64(struct.minIdleInMilli);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeDatabaseHandles_argsTupleSchemeFactory implements SchemeFactory {
      public closeDatabaseHandles_argsTupleScheme getScheme() {
        return new closeDatabaseHandles_argsTupleScheme();
      }
    }

    private static class closeDatabaseHandles_argsTupleScheme extends TupleScheme<closeDatabaseHandles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnvHomeDir()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetDatabaseName()) {
          optionals.set(2);
        }
        if (struct.isSetMinIdleInMilli()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetEnvHomeDir()) {
          oprot.writeString(struct.envHomeDir);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetDatabaseName()) {
          oprot.writeString(struct.databaseName);
        }
        if (struct.isSetMinIdleInMilli()) {
          oprot.writeI64(struct.minIdleInMilli);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.envHomeDir = iprot.readString();
          struct.setEnvHomeDirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.databaseName = iprot.readString();
          struct.setDatabaseNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.minIdleInMilli = iprot.readI64();
          struct.setMinIdleInMilliIsSet(true);
        }
      }
    }

  }

  public static class closeDatabaseHandles_result implements org.apache.thrift.TBase<closeDatabaseHandles_result, closeDatabaseHandles_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeDatabaseHandles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeDatabaseHandles_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeDatabaseHandles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeDatabaseHandles_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeDatabaseHandles_result.class, metaDataMap);
    }

    public closeDatabaseHandles_result() {
    }

    public closeDatabaseHandles_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeDatabaseHandles_result(closeDatabaseHandles_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public closeDatabaseHandles_result deepCopy() {
      return new closeDatabaseHandles_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public closeDatabaseHandles_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public closeDatabaseHandles_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeDatabaseHandles_result)
        return this.equals((closeDatabaseHandles_result)that);
      return false;
    }

    public boolean equals(closeDatabaseHandles_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeDatabaseHandles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeDatabaseHandles_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeDatabaseHandles_resultStandardSchemeFactory implements SchemeFactory {
      public closeDatabaseHandles_resultStandardScheme getScheme() {
        return new closeDatabaseHandles_resultStandardScheme();
      }
    }

    private static class closeDatabaseHandles_resultStandardScheme extends StandardScheme<closeDatabaseHandles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeDatabaseHandles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeDatabaseHandles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeDatabaseHandles_resultTupleSchemeFactory implements SchemeFactory {
      public closeDatabaseHandles_resultTupleScheme getScheme() {
        return new closeDatabaseHandles_resultTupleScheme();
      }
    }

    private static class closeDatabaseHandles_resultTupleScheme extends TupleScheme<closeDatabaseHandles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeDatabaseHandles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getDatabaseConfig_args implements org.apache.thrift.TBase<getDatabaseConfig_args, getDatabaseConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDatabaseConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDatabaseConfig_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDatabaseConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDatabaseConfig_argsTupleSchemeFactory());
    }

    public TDatabase db; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatabaseConfig_args.class, metaDataMap);
    }

    public getDatabaseConfig_args() {
    }

    public getDatabaseConfig_args(
      TDatabase db)
    {
      this();
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDatabaseConfig_args(getDatabaseConfig_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
    }

    public getDatabaseConfig_args deepCopy() {
      return new getDatabaseConfig_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public getDatabaseConfig_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDatabaseConfig_args)
        return this.equals((getDatabaseConfig_args)that);
      return false;
    }

    public boolean equals(getDatabaseConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDatabaseConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDatabaseConfig_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDatabaseConfig_argsStandardSchemeFactory implements SchemeFactory {
      public getDatabaseConfig_argsStandardScheme getScheme() {
        return new getDatabaseConfig_argsStandardScheme();
      }
    }

    private static class getDatabaseConfig_argsStandardScheme extends StandardScheme<getDatabaseConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDatabaseConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDatabaseConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDatabaseConfig_argsTupleSchemeFactory implements SchemeFactory {
      public getDatabaseConfig_argsTupleScheme getScheme() {
        return new getDatabaseConfig_argsTupleScheme();
      }
    }

    private static class getDatabaseConfig_argsTupleScheme extends TupleScheme<getDatabaseConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDatabaseConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDatabaseConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
      }
    }

  }

  public static class getDatabaseConfig_result implements org.apache.thrift.TBase<getDatabaseConfig_result, getDatabaseConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDatabaseConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDatabaseConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDatabaseConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDatabaseConfig_resultTupleSchemeFactory());
    }

    public TDatabaseConfig success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabaseConfig.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatabaseConfig_result.class, metaDataMap);
    }

    public getDatabaseConfig_result() {
    }

    public getDatabaseConfig_result(
      TDatabaseConfig success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDatabaseConfig_result(getDatabaseConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDatabaseConfig(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public getDatabaseConfig_result deepCopy() {
      return new getDatabaseConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseConfig getSuccess() {
      return this.success;
    }

    public getDatabaseConfig_result setSuccess(TDatabaseConfig success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public getDatabaseConfig_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public getDatabaseConfig_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDatabaseConfig)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDatabaseConfig_result)
        return this.equals((getDatabaseConfig_result)that);
      return false;
    }

    public boolean equals(getDatabaseConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDatabaseConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDatabaseConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDatabaseConfig_resultStandardSchemeFactory implements SchemeFactory {
      public getDatabaseConfig_resultStandardScheme getScheme() {
        return new getDatabaseConfig_resultStandardScheme();
      }
    }

    private static class getDatabaseConfig_resultStandardScheme extends StandardScheme<getDatabaseConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDatabaseConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDatabaseConfig();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDatabaseConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDatabaseConfig_resultTupleSchemeFactory implements SchemeFactory {
      public getDatabaseConfig_resultTupleScheme getScheme() {
        return new getDatabaseConfig_resultTupleScheme();
      }
    }

    private static class getDatabaseConfig_resultTupleScheme extends TupleScheme<getDatabaseConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDatabaseConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDatabaseConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TDatabaseConfig();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class setDatabaseConfig_args implements org.apache.thrift.TBase<setDatabaseConfig_args, setDatabaseConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<setDatabaseConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDatabaseConfig_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("dbConfig", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDatabaseConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDatabaseConfig_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TDatabaseConfig dbConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      DB_CONFIG((short)2, "dbConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // DB_CONFIG
            return DB_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.DB_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("dbConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabaseConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDatabaseConfig_args.class, metaDataMap);
    }

    public setDatabaseConfig_args() {
    }

    public setDatabaseConfig_args(
      TDatabase db,
      TDatabaseConfig dbConfig)
    {
      this();
      this.db = db;
      this.dbConfig = dbConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDatabaseConfig_args(setDatabaseConfig_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetDbConfig()) {
        this.dbConfig = new TDatabaseConfig(other.dbConfig);
      }
    }

    public setDatabaseConfig_args deepCopy() {
      return new setDatabaseConfig_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.dbConfig = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public setDatabaseConfig_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TDatabaseConfig getDbConfig() {
      return this.dbConfig;
    }

    public setDatabaseConfig_args setDbConfig(TDatabaseConfig dbConfig) {
      this.dbConfig = dbConfig;
      return this;
    }

    public void unsetDbConfig() {
      this.dbConfig = null;
    }

    /** Returns true if field dbConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetDbConfig() {
      return this.dbConfig != null;
    }

    public void setDbConfigIsSet(boolean value) {
      if (!value) {
        this.dbConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case DB_CONFIG:
        if (value == null) {
          unsetDbConfig();
        } else {
          setDbConfig((TDatabaseConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case DB_CONFIG:
        return getDbConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case DB_CONFIG:
        return isSetDbConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDatabaseConfig_args)
        return this.equals((setDatabaseConfig_args)that);
      return false;
    }

    public boolean equals(setDatabaseConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_dbConfig = true && this.isSetDbConfig();
      boolean that_present_dbConfig = true && that.isSetDbConfig();
      if (this_present_dbConfig || that_present_dbConfig) {
        if (!(this_present_dbConfig && that_present_dbConfig))
          return false;
        if (!this.dbConfig.equals(that.dbConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_dbConfig = true && (isSetDbConfig());
      list.add(present_dbConfig);
      if (present_dbConfig)
        list.add(dbConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(setDatabaseConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbConfig()).compareTo(other.isSetDbConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbConfig, other.dbConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDatabaseConfig_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbConfig:");
      if (this.dbConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.dbConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (dbConfig != null) {
        dbConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDatabaseConfig_argsStandardSchemeFactory implements SchemeFactory {
      public setDatabaseConfig_argsStandardScheme getScheme() {
        return new setDatabaseConfig_argsStandardScheme();
      }
    }

    private static class setDatabaseConfig_argsStandardScheme extends StandardScheme<setDatabaseConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDatabaseConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbConfig = new TDatabaseConfig();
                struct.dbConfig.read(iprot);
                struct.setDbConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDatabaseConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbConfig != null) {
          oprot.writeFieldBegin(DB_CONFIG_FIELD_DESC);
          struct.dbConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDatabaseConfig_argsTupleSchemeFactory implements SchemeFactory {
      public setDatabaseConfig_argsTupleScheme getScheme() {
        return new setDatabaseConfig_argsTupleScheme();
      }
    }

    private static class setDatabaseConfig_argsTupleScheme extends TupleScheme<setDatabaseConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDatabaseConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetDbConfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetDbConfig()) {
          struct.dbConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDatabaseConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbConfig = new TDatabaseConfig();
          struct.dbConfig.read(iprot);
          struct.setDbConfigIsSet(true);
        }
      }
    }

  }

  public static class setDatabaseConfig_result implements org.apache.thrift.TBase<setDatabaseConfig_result, setDatabaseConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<setDatabaseConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDatabaseConfig_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDatabaseConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDatabaseConfig_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDatabaseConfig_result.class, metaDataMap);
    }

    public setDatabaseConfig_result() {
    }

    public setDatabaseConfig_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDatabaseConfig_result(setDatabaseConfig_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public setDatabaseConfig_result deepCopy() {
      return new setDatabaseConfig_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public setDatabaseConfig_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public setDatabaseConfig_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDatabaseConfig_result)
        return this.equals((setDatabaseConfig_result)that);
      return false;
    }

    public boolean equals(setDatabaseConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(setDatabaseConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDatabaseConfig_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDatabaseConfig_resultStandardSchemeFactory implements SchemeFactory {
      public setDatabaseConfig_resultStandardScheme getScheme() {
        return new setDatabaseConfig_resultStandardScheme();
      }
    }

    private static class setDatabaseConfig_resultStandardScheme extends StandardScheme<setDatabaseConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDatabaseConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDatabaseConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDatabaseConfig_resultTupleSchemeFactory implements SchemeFactory {
      public setDatabaseConfig_resultTupleScheme getScheme() {
        return new setDatabaseConfig_resultTupleScheme();
      }
    }

    private static class setDatabaseConfig_resultTupleScheme extends TupleScheme<setDatabaseConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDatabaseConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDatabaseConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbGet_args implements org.apache.thrift.TBase<dbGet_args, dbGet_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbGet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbGet_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("keyData", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbGet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbGet_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public TKeyData keyData; // required
    public TDbGetConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      KEY_DATA((short)3, "keyData"),
      CONFIG((short)4, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // KEY_DATA
            return KEY_DATA;
          case 4: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.KEY_DATA, new org.apache.thrift.meta_data.FieldMetaData("keyData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyData.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbGetConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbGet_args.class, metaDataMap);
    }

    public dbGet_args() {
    }

    public dbGet_args(
      TDatabase db,
      TTransaction txn,
      TKeyData keyData,
      TDbGetConfig config)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.keyData = keyData;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbGet_args(dbGet_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetKeyData()) {
        this.keyData = new TKeyData(other.keyData);
      }
      if (other.isSetConfig()) {
        this.config = new TDbGetConfig(other.config);
      }
    }

    public dbGet_args deepCopy() {
      return new dbGet_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.keyData = null;
      this.config = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public dbGet_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbGet_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TKeyData getKeyData() {
      return this.keyData;
    }

    public dbGet_args setKeyData(TKeyData keyData) {
      this.keyData = keyData;
      return this;
    }

    public void unsetKeyData() {
      this.keyData = null;
    }

    /** Returns true if field keyData is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyData() {
      return this.keyData != null;
    }

    public void setKeyDataIsSet(boolean value) {
      if (!value) {
        this.keyData = null;
      }
    }

    public TDbGetConfig getConfig() {
      return this.config;
    }

    public dbGet_args setConfig(TDbGetConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case KEY_DATA:
        if (value == null) {
          unsetKeyData();
        } else {
          setKeyData((TKeyData)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TDbGetConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case KEY_DATA:
        return getKeyData();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case KEY_DATA:
        return isSetKeyData();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbGet_args)
        return this.equals((dbGet_args)that);
      return false;
    }

    public boolean equals(dbGet_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_keyData = true && this.isSetKeyData();
      boolean that_present_keyData = true && that.isSetKeyData();
      if (this_present_keyData || that_present_keyData) {
        if (!(this_present_keyData && that_present_keyData))
          return false;
        if (!this.keyData.equals(that.keyData))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_keyData = true && (isSetKeyData());
      list.add(present_keyData);
      if (present_keyData)
        list.add(keyData);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyData()).compareTo(other.isSetKeyData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyData, other.keyData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbGet_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyData:");
      if (this.keyData == null) {
        sb.append("null");
      } else {
        sb.append(this.keyData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (keyData != null) {
        keyData.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbGet_argsStandardSchemeFactory implements SchemeFactory {
      public dbGet_argsStandardScheme getScheme() {
        return new dbGet_argsStandardScheme();
      }
    }

    private static class dbGet_argsStandardScheme extends StandardScheme<dbGet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbGet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.keyData = new TKeyData();
                struct.keyData.read(iprot);
                struct.setKeyDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TDbGetConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbGet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.keyData != null) {
          oprot.writeFieldBegin(KEY_DATA_FIELD_DESC);
          struct.keyData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbGet_argsTupleSchemeFactory implements SchemeFactory {
      public dbGet_argsTupleScheme getScheme() {
        return new dbGet_argsTupleScheme();
      }
    }

    private static class dbGet_argsTupleScheme extends TupleScheme<dbGet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetKeyData()) {
          optionals.set(2);
        }
        if (struct.isSetConfig()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetKeyData()) {
          struct.keyData.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.keyData = new TKeyData();
          struct.keyData.read(iprot);
          struct.setKeyDataIsSet(true);
        }
        if (incoming.get(3)) {
          struct.config = new TDbGetConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class dbGet_result implements org.apache.thrift.TBase<dbGet_result, dbGet_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbGet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbGet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbGet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbGet_resultTupleSchemeFactory());
    }

    public TGetResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbGet_result.class, metaDataMap);
    }

    public dbGet_result() {
    }

    public dbGet_result(
      TGetResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbGet_result(dbGet_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbGet_result deepCopy() {
      return new dbGet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TGetResult getSuccess() {
      return this.success;
    }

    public dbGet_result setSuccess(TGetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbGet_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbGet_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbGet_result)
        return this.equals((dbGet_result)that);
      return false;
    }

    public boolean equals(dbGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbGet_resultStandardSchemeFactory implements SchemeFactory {
      public dbGet_resultStandardScheme getScheme() {
        return new dbGet_resultStandardScheme();
      }
    }

    private static class dbGet_resultStandardScheme extends StandardScheme<dbGet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbGet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbGet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbGet_resultTupleSchemeFactory implements SchemeFactory {
      public dbGet_resultTupleScheme getScheme() {
        return new dbGet_resultTupleScheme();
      }
    }

    private static class dbGet_resultTupleScheme extends TupleScheme<dbGet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TGetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbGetWithPKey_args implements org.apache.thrift.TBase<dbGetWithPKey_args, dbGetWithPKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbGetWithPKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbGetWithPKey_args");

    private static final org.apache.thrift.protocol.TField SDB_FIELD_DESC = new org.apache.thrift.protocol.TField("sdb", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_PKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("keyPKey", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbGetWithPKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbGetWithPKey_argsTupleSchemeFactory());
    }

    public TDatabase sdb; // required
    public TTransaction txn; // required
    public TKeyDataWithPKey keyPKey; // required
    public TDbGetConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SDB((short)1, "sdb"),
      TXN((short)2, "txn"),
      KEY_PKEY((short)3, "keyPKey"),
      CONFIG((short)4, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SDB
            return SDB;
          case 2: // TXN
            return TXN;
          case 3: // KEY_PKEY
            return KEY_PKEY;
          case 4: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SDB, new org.apache.thrift.meta_data.FieldMetaData("sdb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.KEY_PKEY, new org.apache.thrift.meta_data.FieldMetaData("keyPKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyDataWithPKey.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbGetConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbGetWithPKey_args.class, metaDataMap);
    }

    public dbGetWithPKey_args() {
    }

    public dbGetWithPKey_args(
      TDatabase sdb,
      TTransaction txn,
      TKeyDataWithPKey keyPKey,
      TDbGetConfig config)
    {
      this();
      this.sdb = sdb;
      this.txn = txn;
      this.keyPKey = keyPKey;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbGetWithPKey_args(dbGetWithPKey_args other) {
      if (other.isSetSdb()) {
        this.sdb = new TDatabase(other.sdb);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetKeyPKey()) {
        this.keyPKey = new TKeyDataWithPKey(other.keyPKey);
      }
      if (other.isSetConfig()) {
        this.config = new TDbGetConfig(other.config);
      }
    }

    public dbGetWithPKey_args deepCopy() {
      return new dbGetWithPKey_args(this);
    }

    @Override
    public void clear() {
      this.sdb = null;
      this.txn = null;
      this.keyPKey = null;
      this.config = null;
    }

    public TDatabase getSdb() {
      return this.sdb;
    }

    public dbGetWithPKey_args setSdb(TDatabase sdb) {
      this.sdb = sdb;
      return this;
    }

    public void unsetSdb() {
      this.sdb = null;
    }

    /** Returns true if field sdb is set (has been assigned a value) and false otherwise */
    public boolean isSetSdb() {
      return this.sdb != null;
    }

    public void setSdbIsSet(boolean value) {
      if (!value) {
        this.sdb = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbGetWithPKey_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TKeyDataWithPKey getKeyPKey() {
      return this.keyPKey;
    }

    public dbGetWithPKey_args setKeyPKey(TKeyDataWithPKey keyPKey) {
      this.keyPKey = keyPKey;
      return this;
    }

    public void unsetKeyPKey() {
      this.keyPKey = null;
    }

    /** Returns true if field keyPKey is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyPKey() {
      return this.keyPKey != null;
    }

    public void setKeyPKeyIsSet(boolean value) {
      if (!value) {
        this.keyPKey = null;
      }
    }

    public TDbGetConfig getConfig() {
      return this.config;
    }

    public dbGetWithPKey_args setConfig(TDbGetConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SDB:
        if (value == null) {
          unsetSdb();
        } else {
          setSdb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case KEY_PKEY:
        if (value == null) {
          unsetKeyPKey();
        } else {
          setKeyPKey((TKeyDataWithPKey)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TDbGetConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SDB:
        return getSdb();

      case TXN:
        return getTxn();

      case KEY_PKEY:
        return getKeyPKey();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SDB:
        return isSetSdb();
      case TXN:
        return isSetTxn();
      case KEY_PKEY:
        return isSetKeyPKey();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbGetWithPKey_args)
        return this.equals((dbGetWithPKey_args)that);
      return false;
    }

    public boolean equals(dbGetWithPKey_args that) {
      if (that == null)
        return false;

      boolean this_present_sdb = true && this.isSetSdb();
      boolean that_present_sdb = true && that.isSetSdb();
      if (this_present_sdb || that_present_sdb) {
        if (!(this_present_sdb && that_present_sdb))
          return false;
        if (!this.sdb.equals(that.sdb))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_keyPKey = true && this.isSetKeyPKey();
      boolean that_present_keyPKey = true && that.isSetKeyPKey();
      if (this_present_keyPKey || that_present_keyPKey) {
        if (!(this_present_keyPKey && that_present_keyPKey))
          return false;
        if (!this.keyPKey.equals(that.keyPKey))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sdb = true && (isSetSdb());
      list.add(present_sdb);
      if (present_sdb)
        list.add(sdb);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_keyPKey = true && (isSetKeyPKey());
      list.add(present_keyPKey);
      if (present_keyPKey)
        list.add(keyPKey);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbGetWithPKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSdb()).compareTo(other.isSetSdb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdb, other.sdb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyPKey()).compareTo(other.isSetKeyPKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyPKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyPKey, other.keyPKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbGetWithPKey_args(");
      boolean first = true;

      sb.append("sdb:");
      if (this.sdb == null) {
        sb.append("null");
      } else {
        sb.append(this.sdb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyPKey:");
      if (this.keyPKey == null) {
        sb.append("null");
      } else {
        sb.append(this.keyPKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sdb != null) {
        sdb.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (keyPKey != null) {
        keyPKey.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbGetWithPKey_argsStandardSchemeFactory implements SchemeFactory {
      public dbGetWithPKey_argsStandardScheme getScheme() {
        return new dbGetWithPKey_argsStandardScheme();
      }
    }

    private static class dbGetWithPKey_argsStandardScheme extends StandardScheme<dbGetWithPKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbGetWithPKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SDB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sdb = new TDatabase();
                struct.sdb.read(iprot);
                struct.setSdbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY_PKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.keyPKey = new TKeyDataWithPKey();
                struct.keyPKey.read(iprot);
                struct.setKeyPKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TDbGetConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbGetWithPKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sdb != null) {
          oprot.writeFieldBegin(SDB_FIELD_DESC);
          struct.sdb.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.keyPKey != null) {
          oprot.writeFieldBegin(KEY_PKEY_FIELD_DESC);
          struct.keyPKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbGetWithPKey_argsTupleSchemeFactory implements SchemeFactory {
      public dbGetWithPKey_argsTupleScheme getScheme() {
        return new dbGetWithPKey_argsTupleScheme();
      }
    }

    private static class dbGetWithPKey_argsTupleScheme extends TupleScheme<dbGetWithPKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbGetWithPKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSdb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetKeyPKey()) {
          optionals.set(2);
        }
        if (struct.isSetConfig()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSdb()) {
          struct.sdb.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetKeyPKey()) {
          struct.keyPKey.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbGetWithPKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.sdb = new TDatabase();
          struct.sdb.read(iprot);
          struct.setSdbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.keyPKey = new TKeyDataWithPKey();
          struct.keyPKey.read(iprot);
          struct.setKeyPKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.config = new TDbGetConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class dbGetWithPKey_result implements org.apache.thrift.TBase<dbGetWithPKey_result, dbGetWithPKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbGetWithPKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbGetWithPKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbGetWithPKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbGetWithPKey_resultTupleSchemeFactory());
    }

    public TGetWithPKeyResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetWithPKeyResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbGetWithPKey_result.class, metaDataMap);
    }

    public dbGetWithPKey_result() {
    }

    public dbGetWithPKey_result(
      TGetWithPKeyResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbGetWithPKey_result(dbGetWithPKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetWithPKeyResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbGetWithPKey_result deepCopy() {
      return new dbGetWithPKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TGetWithPKeyResult getSuccess() {
      return this.success;
    }

    public dbGetWithPKey_result setSuccess(TGetWithPKeyResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbGetWithPKey_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbGetWithPKey_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetWithPKeyResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbGetWithPKey_result)
        return this.equals((dbGetWithPKey_result)that);
      return false;
    }

    public boolean equals(dbGetWithPKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbGetWithPKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbGetWithPKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbGetWithPKey_resultStandardSchemeFactory implements SchemeFactory {
      public dbGetWithPKey_resultStandardScheme getScheme() {
        return new dbGetWithPKey_resultStandardScheme();
      }
    }

    private static class dbGetWithPKey_resultStandardScheme extends StandardScheme<dbGetWithPKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbGetWithPKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetWithPKeyResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbGetWithPKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbGetWithPKey_resultTupleSchemeFactory implements SchemeFactory {
      public dbGetWithPKey_resultTupleScheme getScheme() {
        return new dbGetWithPKey_resultTupleScheme();
      }
    }

    private static class dbGetWithPKey_resultTupleScheme extends TupleScheme<dbGetWithPKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbGetWithPKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbGetWithPKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TGetWithPKeyResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbPut_args implements org.apache.thrift.TBase<dbPut_args, dbPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbPut_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbPut_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("pairs", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbPut_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbPut_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public List<TKeyDataWithSecondaryKeys> pairs; // required
    /**
     * 
     * @see TDbPutConfig
     */
    public TDbPutConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      PAIRS((short)3, "pairs"),
      /**
       * 
       * @see TDbPutConfig
       */
      CONFIG((short)4, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // PAIRS
            return PAIRS;
          case 4: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.PAIRS, new org.apache.thrift.meta_data.FieldMetaData("pairs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyDataWithSecondaryKeys.class))));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDbPutConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbPut_args.class, metaDataMap);
    }

    public dbPut_args() {
    }

    public dbPut_args(
      TDatabase db,
      TTransaction txn,
      List<TKeyDataWithSecondaryKeys> pairs,
      TDbPutConfig config)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.pairs = pairs;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbPut_args(dbPut_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetPairs()) {
        List<TKeyDataWithSecondaryKeys> __this__pairs = new ArrayList<TKeyDataWithSecondaryKeys>(other.pairs.size());
        for (TKeyDataWithSecondaryKeys other_element : other.pairs) {
          __this__pairs.add(new TKeyDataWithSecondaryKeys(other_element));
        }
        this.pairs = __this__pairs;
      }
      if (other.isSetConfig()) {
        this.config = other.config;
      }
    }

    public dbPut_args deepCopy() {
      return new dbPut_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.pairs = null;
      this.config = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public dbPut_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbPut_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public int getPairsSize() {
      return (this.pairs == null) ? 0 : this.pairs.size();
    }

    public java.util.Iterator<TKeyDataWithSecondaryKeys> getPairsIterator() {
      return (this.pairs == null) ? null : this.pairs.iterator();
    }

    public void addToPairs(TKeyDataWithSecondaryKeys elem) {
      if (this.pairs == null) {
        this.pairs = new ArrayList<TKeyDataWithSecondaryKeys>();
      }
      this.pairs.add(elem);
    }

    public List<TKeyDataWithSecondaryKeys> getPairs() {
      return this.pairs;
    }

    public dbPut_args setPairs(List<TKeyDataWithSecondaryKeys> pairs) {
      this.pairs = pairs;
      return this;
    }

    public void unsetPairs() {
      this.pairs = null;
    }

    /** Returns true if field pairs is set (has been assigned a value) and false otherwise */
    public boolean isSetPairs() {
      return this.pairs != null;
    }

    public void setPairsIsSet(boolean value) {
      if (!value) {
        this.pairs = null;
      }
    }

    /**
     * 
     * @see TDbPutConfig
     */
    public TDbPutConfig getConfig() {
      return this.config;
    }

    /**
     * 
     * @see TDbPutConfig
     */
    public dbPut_args setConfig(TDbPutConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case PAIRS:
        if (value == null) {
          unsetPairs();
        } else {
          setPairs((List<TKeyDataWithSecondaryKeys>)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TDbPutConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case PAIRS:
        return getPairs();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case PAIRS:
        return isSetPairs();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbPut_args)
        return this.equals((dbPut_args)that);
      return false;
    }

    public boolean equals(dbPut_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_pairs = true && this.isSetPairs();
      boolean that_present_pairs = true && that.isSetPairs();
      if (this_present_pairs || that_present_pairs) {
        if (!(this_present_pairs && that_present_pairs))
          return false;
        if (!this.pairs.equals(that.pairs))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_pairs = true && (isSetPairs());
      list.add(present_pairs);
      if (present_pairs)
        list.add(pairs);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(dbPut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPairs()).compareTo(other.isSetPairs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPairs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pairs, other.pairs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbPut_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pairs:");
      if (this.pairs == null) {
        sb.append("null");
      } else {
        sb.append(this.pairs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbPut_argsStandardSchemeFactory implements SchemeFactory {
      public dbPut_argsStandardScheme getScheme() {
        return new dbPut_argsStandardScheme();
      }
    }

    private static class dbPut_argsStandardScheme extends StandardScheme<dbPut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAIRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.pairs = new ArrayList<TKeyDataWithSecondaryKeys>(_list42.size);
                  TKeyDataWithSecondaryKeys _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = new TKeyDataWithSecondaryKeys();
                    _elem43.read(iprot);
                    struct.pairs.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setPairsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.config = com.sleepycat.thrift.TDbPutConfig.findByValue(iprot.readI32());
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbPut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pairs != null) {
          oprot.writeFieldBegin(PAIRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pairs.size()));
            for (TKeyDataWithSecondaryKeys _iter45 : struct.pairs)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          oprot.writeI32(struct.config.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbPut_argsTupleSchemeFactory implements SchemeFactory {
      public dbPut_argsTupleScheme getScheme() {
        return new dbPut_argsTupleScheme();
      }
    }

    private static class dbPut_argsTupleScheme extends TupleScheme<dbPut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbPut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetPairs()) {
          optionals.set(2);
        }
        if (struct.isSetConfig()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetPairs()) {
          {
            oprot.writeI32(struct.pairs.size());
            for (TKeyDataWithSecondaryKeys _iter46 : struct.pairs)
            {
              _iter46.write(oprot);
            }
          }
        }
        if (struct.isSetConfig()) {
          oprot.writeI32(struct.config.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbPut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.pairs = new ArrayList<TKeyDataWithSecondaryKeys>(_list47.size);
            TKeyDataWithSecondaryKeys _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = new TKeyDataWithSecondaryKeys();
              _elem48.read(iprot);
              struct.pairs.add(_elem48);
            }
          }
          struct.setPairsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.config = com.sleepycat.thrift.TDbPutConfig.findByValue(iprot.readI32());
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class dbPut_result implements org.apache.thrift.TBase<dbPut_result, dbPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbPut_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbPut_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbPut_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbPut_resultTupleSchemeFactory());
    }

    public TPutResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPutResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbPut_result.class, metaDataMap);
    }

    public dbPut_result() {
    }

    public dbPut_result(
      TPutResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbPut_result(dbPut_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPutResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbPut_result deepCopy() {
      return new dbPut_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TPutResult getSuccess() {
      return this.success;
    }

    public dbPut_result setSuccess(TPutResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbPut_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbPut_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPutResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbPut_result)
        return this.equals((dbPut_result)that);
      return false;
    }

    public boolean equals(dbPut_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbPut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbPut_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbPut_resultStandardSchemeFactory implements SchemeFactory {
      public dbPut_resultStandardScheme getScheme() {
        return new dbPut_resultStandardScheme();
      }
    }

    private static class dbPut_resultStandardScheme extends StandardScheme<dbPut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPutResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbPut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbPut_resultTupleSchemeFactory implements SchemeFactory {
      public dbPut_resultTupleScheme getScheme() {
        return new dbPut_resultTupleScheme();
      }
    }

    private static class dbPut_resultTupleScheme extends TupleScheme<dbPut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbPut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbPut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TPutResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbDelete_args implements org.apache.thrift.TBase<dbDelete_args, dbDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbDelete_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_OR_PAIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyOrPairs", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbDelete_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public List<TKeyData> keyOrPairs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      KEY_OR_PAIRS((short)3, "keyOrPairs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // KEY_OR_PAIRS
            return KEY_OR_PAIRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.KEY_OR_PAIRS, new org.apache.thrift.meta_data.FieldMetaData("keyOrPairs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbDelete_args.class, metaDataMap);
    }

    public dbDelete_args() {
    }

    public dbDelete_args(
      TDatabase db,
      TTransaction txn,
      List<TKeyData> keyOrPairs)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.keyOrPairs = keyOrPairs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbDelete_args(dbDelete_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetKeyOrPairs()) {
        List<TKeyData> __this__keyOrPairs = new ArrayList<TKeyData>(other.keyOrPairs.size());
        for (TKeyData other_element : other.keyOrPairs) {
          __this__keyOrPairs.add(new TKeyData(other_element));
        }
        this.keyOrPairs = __this__keyOrPairs;
      }
    }

    public dbDelete_args deepCopy() {
      return new dbDelete_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.keyOrPairs = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public dbDelete_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbDelete_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public int getKeyOrPairsSize() {
      return (this.keyOrPairs == null) ? 0 : this.keyOrPairs.size();
    }

    public java.util.Iterator<TKeyData> getKeyOrPairsIterator() {
      return (this.keyOrPairs == null) ? null : this.keyOrPairs.iterator();
    }

    public void addToKeyOrPairs(TKeyData elem) {
      if (this.keyOrPairs == null) {
        this.keyOrPairs = new ArrayList<TKeyData>();
      }
      this.keyOrPairs.add(elem);
    }

    public List<TKeyData> getKeyOrPairs() {
      return this.keyOrPairs;
    }

    public dbDelete_args setKeyOrPairs(List<TKeyData> keyOrPairs) {
      this.keyOrPairs = keyOrPairs;
      return this;
    }

    public void unsetKeyOrPairs() {
      this.keyOrPairs = null;
    }

    /** Returns true if field keyOrPairs is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyOrPairs() {
      return this.keyOrPairs != null;
    }

    public void setKeyOrPairsIsSet(boolean value) {
      if (!value) {
        this.keyOrPairs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case KEY_OR_PAIRS:
        if (value == null) {
          unsetKeyOrPairs();
        } else {
          setKeyOrPairs((List<TKeyData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case KEY_OR_PAIRS:
        return getKeyOrPairs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case KEY_OR_PAIRS:
        return isSetKeyOrPairs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbDelete_args)
        return this.equals((dbDelete_args)that);
      return false;
    }

    public boolean equals(dbDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_keyOrPairs = true && this.isSetKeyOrPairs();
      boolean that_present_keyOrPairs = true && that.isSetKeyOrPairs();
      if (this_present_keyOrPairs || that_present_keyOrPairs) {
        if (!(this_present_keyOrPairs && that_present_keyOrPairs))
          return false;
        if (!this.keyOrPairs.equals(that.keyOrPairs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_keyOrPairs = true && (isSetKeyOrPairs());
      list.add(present_keyOrPairs);
      if (present_keyOrPairs)
        list.add(keyOrPairs);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyOrPairs()).compareTo(other.isSetKeyOrPairs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyOrPairs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyOrPairs, other.keyOrPairs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbDelete_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyOrPairs:");
      if (this.keyOrPairs == null) {
        sb.append("null");
      } else {
        sb.append(this.keyOrPairs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbDelete_argsStandardSchemeFactory implements SchemeFactory {
      public dbDelete_argsStandardScheme getScheme() {
        return new dbDelete_argsStandardScheme();
      }
    }

    private static class dbDelete_argsStandardScheme extends StandardScheme<dbDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY_OR_PAIRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.keyOrPairs = new ArrayList<TKeyData>(_list50.size);
                  TKeyData _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = new TKeyData();
                    _elem51.read(iprot);
                    struct.keyOrPairs.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setKeyOrPairsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.keyOrPairs != null) {
          oprot.writeFieldBegin(KEY_OR_PAIRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.keyOrPairs.size()));
            for (TKeyData _iter53 : struct.keyOrPairs)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbDelete_argsTupleSchemeFactory implements SchemeFactory {
      public dbDelete_argsTupleScheme getScheme() {
        return new dbDelete_argsTupleScheme();
      }
    }

    private static class dbDelete_argsTupleScheme extends TupleScheme<dbDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetKeyOrPairs()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetKeyOrPairs()) {
          {
            oprot.writeI32(struct.keyOrPairs.size());
            for (TKeyData _iter54 : struct.keyOrPairs)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.keyOrPairs = new ArrayList<TKeyData>(_list55.size);
            TKeyData _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = new TKeyData();
              _elem56.read(iprot);
              struct.keyOrPairs.add(_elem56);
            }
          }
          struct.setKeyOrPairsIsSet(true);
        }
      }
    }

  }

  public static class dbDelete_result implements org.apache.thrift.TBase<dbDelete_result, dbDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbDelete_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TOperationStatus
     */
    public TOperationStatus success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TOperationStatus
       */
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TOperationStatus.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbDelete_result.class, metaDataMap);
    }

    public dbDelete_result() {
    }

    public dbDelete_result(
      TOperationStatus success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbDelete_result(dbDelete_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbDelete_result deepCopy() {
      return new dbDelete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    /**
     * 
     * @see TOperationStatus
     */
    public TOperationStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TOperationStatus
     */
    public dbDelete_result setSuccess(TOperationStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbDelete_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbDelete_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOperationStatus)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbDelete_result)
        return this.equals((dbDelete_result)that);
      return false;
    }

    public boolean equals(dbDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbDelete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbDelete_resultStandardSchemeFactory implements SchemeFactory {
      public dbDelete_resultStandardScheme getScheme() {
        return new dbDelete_resultStandardScheme();
      }
    }

    private static class dbDelete_resultStandardScheme extends StandardScheme<dbDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.sleepycat.thrift.TOperationStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbDelete_resultTupleSchemeFactory implements SchemeFactory {
      public dbDelete_resultTupleScheme getScheme() {
        return new dbDelete_resultTupleScheme();
      }
    }

    private static class dbDelete_resultTupleScheme extends TupleScheme<dbDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.sleepycat.thrift.TOperationStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbKeyExists_args implements org.apache.thrift.TBase<dbKeyExists_args, dbKeyExists_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbKeyExists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbKeyExists_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbKeyExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbKeyExists_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public TDbt key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      KEY((short)3, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbKeyExists_args.class, metaDataMap);
    }

    public dbKeyExists_args() {
    }

    public dbKeyExists_args(
      TDatabase db,
      TTransaction txn,
      TDbt key)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbKeyExists_args(dbKeyExists_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetKey()) {
        this.key = new TDbt(other.key);
      }
    }

    public dbKeyExists_args deepCopy() {
      return new dbKeyExists_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.key = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public dbKeyExists_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbKeyExists_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TDbt getKey() {
      return this.key;
    }

    public dbKeyExists_args setKey(TDbt key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((TDbt)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbKeyExists_args)
        return this.equals((dbKeyExists_args)that);
      return false;
    }

    public boolean equals(dbKeyExists_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbKeyExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbKeyExists_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (key != null) {
        key.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbKeyExists_argsStandardSchemeFactory implements SchemeFactory {
      public dbKeyExists_argsStandardScheme getScheme() {
        return new dbKeyExists_argsStandardScheme();
      }
    }

    private static class dbKeyExists_argsStandardScheme extends StandardScheme<dbKeyExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbKeyExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.key = new TDbt();
                struct.key.read(iprot);
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbKeyExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          struct.key.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbKeyExists_argsTupleSchemeFactory implements SchemeFactory {
      public dbKeyExists_argsTupleScheme getScheme() {
        return new dbKeyExists_argsTupleScheme();
      }
    }

    private static class dbKeyExists_argsTupleScheme extends TupleScheme<dbKeyExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbKeyExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetKey()) {
          struct.key.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbKeyExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = new TDbt();
          struct.key.read(iprot);
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class dbKeyExists_result implements org.apache.thrift.TBase<dbKeyExists_result, dbKeyExists_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbKeyExists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbKeyExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbKeyExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbKeyExists_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TOperationStatus
     */
    public TOperationStatus success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TOperationStatus
       */
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TOperationStatus.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbKeyExists_result.class, metaDataMap);
    }

    public dbKeyExists_result() {
    }

    public dbKeyExists_result(
      TOperationStatus success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbKeyExists_result(dbKeyExists_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbKeyExists_result deepCopy() {
      return new dbKeyExists_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    /**
     * 
     * @see TOperationStatus
     */
    public TOperationStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TOperationStatus
     */
    public dbKeyExists_result setSuccess(TOperationStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbKeyExists_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbKeyExists_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOperationStatus)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbKeyExists_result)
        return this.equals((dbKeyExists_result)that);
      return false;
    }

    public boolean equals(dbKeyExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbKeyExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbKeyExists_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbKeyExists_resultStandardSchemeFactory implements SchemeFactory {
      public dbKeyExists_resultStandardScheme getScheme() {
        return new dbKeyExists_resultStandardScheme();
      }
    }

    private static class dbKeyExists_resultStandardScheme extends StandardScheme<dbKeyExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbKeyExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.sleepycat.thrift.TOperationStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbKeyExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbKeyExists_resultTupleSchemeFactory implements SchemeFactory {
      public dbKeyExists_resultTupleScheme getScheme() {
        return new dbKeyExists_resultTupleScheme();
      }
    }

    private static class dbKeyExists_resultTupleScheme extends TupleScheme<dbKeyExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbKeyExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbKeyExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.sleepycat.thrift.TOperationStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbKeyRange_args implements org.apache.thrift.TBase<dbKeyRange_args, dbKeyRange_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbKeyRange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbKeyRange_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbKeyRange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbKeyRange_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public TDbt key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      KEY((short)3, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbKeyRange_args.class, metaDataMap);
    }

    public dbKeyRange_args() {
    }

    public dbKeyRange_args(
      TDatabase db,
      TTransaction txn,
      TDbt key)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbKeyRange_args(dbKeyRange_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetKey()) {
        this.key = new TDbt(other.key);
      }
    }

    public dbKeyRange_args deepCopy() {
      return new dbKeyRange_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.key = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public dbKeyRange_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbKeyRange_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TDbt getKey() {
      return this.key;
    }

    public dbKeyRange_args setKey(TDbt key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((TDbt)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbKeyRange_args)
        return this.equals((dbKeyRange_args)that);
      return false;
    }

    public boolean equals(dbKeyRange_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbKeyRange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbKeyRange_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (key != null) {
        key.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbKeyRange_argsStandardSchemeFactory implements SchemeFactory {
      public dbKeyRange_argsStandardScheme getScheme() {
        return new dbKeyRange_argsStandardScheme();
      }
    }

    private static class dbKeyRange_argsStandardScheme extends StandardScheme<dbKeyRange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbKeyRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.key = new TDbt();
                struct.key.read(iprot);
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbKeyRange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          struct.key.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbKeyRange_argsTupleSchemeFactory implements SchemeFactory {
      public dbKeyRange_argsTupleScheme getScheme() {
        return new dbKeyRange_argsTupleScheme();
      }
    }

    private static class dbKeyRange_argsTupleScheme extends TupleScheme<dbKeyRange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbKeyRange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetKey()) {
          struct.key.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbKeyRange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = new TDbt();
          struct.key.read(iprot);
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class dbKeyRange_result implements org.apache.thrift.TBase<dbKeyRange_result, dbKeyRange_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbKeyRange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbKeyRange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbKeyRange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbKeyRange_resultTupleSchemeFactory());
    }

    public TKeyRangeResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyRangeResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbKeyRange_result.class, metaDataMap);
    }

    public dbKeyRange_result() {
    }

    public dbKeyRange_result(
      TKeyRangeResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbKeyRange_result(dbKeyRange_result other) {
      if (other.isSetSuccess()) {
        this.success = new TKeyRangeResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbKeyRange_result deepCopy() {
      return new dbKeyRange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TKeyRangeResult getSuccess() {
      return this.success;
    }

    public dbKeyRange_result setSuccess(TKeyRangeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbKeyRange_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbKeyRange_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TKeyRangeResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbKeyRange_result)
        return this.equals((dbKeyRange_result)that);
      return false;
    }

    public boolean equals(dbKeyRange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbKeyRange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbKeyRange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbKeyRange_resultStandardSchemeFactory implements SchemeFactory {
      public dbKeyRange_resultStandardScheme getScheme() {
        return new dbKeyRange_resultStandardScheme();
      }
    }

    private static class dbKeyRange_resultStandardScheme extends StandardScheme<dbKeyRange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbKeyRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TKeyRangeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbKeyRange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbKeyRange_resultTupleSchemeFactory implements SchemeFactory {
      public dbKeyRange_resultTupleScheme getScheme() {
        return new dbKeyRange_resultTupleScheme();
      }
    }

    private static class dbKeyRange_resultTupleScheme extends TupleScheme<dbKeyRange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbKeyRange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbKeyRange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TKeyRangeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbCompact_args implements org.apache.thrift.TBase<dbCompact_args, dbCompact_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbCompact_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbCompact_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField STOP_FIELD_DESC = new org.apache.thrift.protocol.TField("stop", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbCompact_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbCompact_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public TDbt start; // required
    public TDbt stop; // required
    public TCompactConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      START((short)3, "start"),
      STOP((short)4, "stop"),
      CONFIG((short)5, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // START
            return START;
          case 4: // STOP
            return STOP;
          case 5: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
      tmpMap.put(_Fields.STOP, new org.apache.thrift.meta_data.FieldMetaData("stop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompactConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbCompact_args.class, metaDataMap);
    }

    public dbCompact_args() {
    }

    public dbCompact_args(
      TDatabase db,
      TTransaction txn,
      TDbt start,
      TDbt stop,
      TCompactConfig config)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.start = start;
      this.stop = stop;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbCompact_args(dbCompact_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetStart()) {
        this.start = new TDbt(other.start);
      }
      if (other.isSetStop()) {
        this.stop = new TDbt(other.stop);
      }
      if (other.isSetConfig()) {
        this.config = new TCompactConfig(other.config);
      }
    }

    public dbCompact_args deepCopy() {
      return new dbCompact_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.start = null;
      this.stop = null;
      this.config = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public dbCompact_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbCompact_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TDbt getStart() {
      return this.start;
    }

    public dbCompact_args setStart(TDbt start) {
      this.start = start;
      return this;
    }

    public void unsetStart() {
      this.start = null;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return this.start != null;
    }

    public void setStartIsSet(boolean value) {
      if (!value) {
        this.start = null;
      }
    }

    public TDbt getStop() {
      return this.stop;
    }

    public dbCompact_args setStop(TDbt stop) {
      this.stop = stop;
      return this;
    }

    public void unsetStop() {
      this.stop = null;
    }

    /** Returns true if field stop is set (has been assigned a value) and false otherwise */
    public boolean isSetStop() {
      return this.stop != null;
    }

    public void setStopIsSet(boolean value) {
      if (!value) {
        this.stop = null;
      }
    }

    public TCompactConfig getConfig() {
      return this.config;
    }

    public dbCompact_args setConfig(TCompactConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((TDbt)value);
        }
        break;

      case STOP:
        if (value == null) {
          unsetStop();
        } else {
          setStop((TDbt)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TCompactConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case START:
        return getStart();

      case STOP:
        return getStop();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case START:
        return isSetStart();
      case STOP:
        return isSetStop();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbCompact_args)
        return this.equals((dbCompact_args)that);
      return false;
    }

    public boolean equals(dbCompact_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_start = true && this.isSetStart();
      boolean that_present_start = true && that.isSetStart();
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (!this.start.equals(that.start))
          return false;
      }

      boolean this_present_stop = true && this.isSetStop();
      boolean that_present_stop = true && that.isSetStop();
      if (this_present_stop || that_present_stop) {
        if (!(this_present_stop && that_present_stop))
          return false;
        if (!this.stop.equals(that.stop))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_start = true && (isSetStart());
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_stop = true && (isSetStop());
      list.add(present_stop);
      if (present_stop)
        list.add(stop);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbCompact_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStop()).compareTo(other.isSetStop());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStop()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop, other.stop);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbCompact_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      if (this.start == null) {
        sb.append("null");
      } else {
        sb.append(this.start);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stop:");
      if (this.stop == null) {
        sb.append("null");
      } else {
        sb.append(this.stop);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (start != null) {
        start.validate();
      }
      if (stop != null) {
        stop.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbCompact_argsStandardSchemeFactory implements SchemeFactory {
      public dbCompact_argsStandardScheme getScheme() {
        return new dbCompact_argsStandardScheme();
      }
    }

    private static class dbCompact_argsStandardScheme extends StandardScheme<dbCompact_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbCompact_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.start = new TDbt();
                struct.start.read(iprot);
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STOP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stop = new TDbt();
                struct.stop.read(iprot);
                struct.setStopIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TCompactConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbCompact_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.start != null) {
          oprot.writeFieldBegin(START_FIELD_DESC);
          struct.start.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.stop != null) {
          oprot.writeFieldBegin(STOP_FIELD_DESC);
          struct.stop.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbCompact_argsTupleSchemeFactory implements SchemeFactory {
      public dbCompact_argsTupleScheme getScheme() {
        return new dbCompact_argsTupleScheme();
      }
    }

    private static class dbCompact_argsTupleScheme extends TupleScheme<dbCompact_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbCompact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetStop()) {
          optionals.set(3);
        }
        if (struct.isSetConfig()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetStart()) {
          struct.start.write(oprot);
        }
        if (struct.isSetStop()) {
          struct.stop.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbCompact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = new TDbt();
          struct.start.read(iprot);
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stop = new TDbt();
          struct.stop.read(iprot);
          struct.setStopIsSet(true);
        }
        if (incoming.get(4)) {
          struct.config = new TCompactConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class dbCompact_result implements org.apache.thrift.TBase<dbCompact_result, dbCompact_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbCompact_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbCompact_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbCompact_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbCompact_resultTupleSchemeFactory());
    }

    public TCompactResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompactResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbCompact_result.class, metaDataMap);
    }

    public dbCompact_result() {
    }

    public dbCompact_result(
      TCompactResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbCompact_result(dbCompact_result other) {
      if (other.isSetSuccess()) {
        this.success = new TCompactResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbCompact_result deepCopy() {
      return new dbCompact_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TCompactResult getSuccess() {
      return this.success;
    }

    public dbCompact_result setSuccess(TCompactResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbCompact_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbCompact_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCompactResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbCompact_result)
        return this.equals((dbCompact_result)that);
      return false;
    }

    public boolean equals(dbCompact_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbCompact_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbCompact_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbCompact_resultStandardSchemeFactory implements SchemeFactory {
      public dbCompact_resultStandardScheme getScheme() {
        return new dbCompact_resultStandardScheme();
      }
    }

    private static class dbCompact_resultStandardScheme extends StandardScheme<dbCompact_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbCompact_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TCompactResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbCompact_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbCompact_resultTupleSchemeFactory implements SchemeFactory {
      public dbCompact_resultTupleScheme getScheme() {
        return new dbCompact_resultTupleScheme();
      }
    }

    private static class dbCompact_resultTupleScheme extends TupleScheme<dbCompact_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbCompact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbCompact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TCompactResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class dbTruncate_args implements org.apache.thrift.TBase<dbTruncate_args, dbTruncate_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbTruncate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbTruncate_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("countRecords", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbTruncate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbTruncate_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public boolean countRecords; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      COUNT_RECORDS((short)3, "countRecords");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // COUNT_RECORDS
            return COUNT_RECORDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNTRECORDS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.COUNT_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("countRecords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbTruncate_args.class, metaDataMap);
    }

    public dbTruncate_args() {
    }

    public dbTruncate_args(
      TDatabase db,
      TTransaction txn,
      boolean countRecords)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.countRecords = countRecords;
      setCountRecordsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbTruncate_args(dbTruncate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      this.countRecords = other.countRecords;
    }

    public dbTruncate_args deepCopy() {
      return new dbTruncate_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      setCountRecordsIsSet(false);
      this.countRecords = false;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public dbTruncate_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public dbTruncate_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public boolean isCountRecords() {
      return this.countRecords;
    }

    public dbTruncate_args setCountRecords(boolean countRecords) {
      this.countRecords = countRecords;
      setCountRecordsIsSet(true);
      return this;
    }

    public void unsetCountRecords() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRECORDS_ISSET_ID);
    }

    /** Returns true if field countRecords is set (has been assigned a value) and false otherwise */
    public boolean isSetCountRecords() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTRECORDS_ISSET_ID);
    }

    public void setCountRecordsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRECORDS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case COUNT_RECORDS:
        if (value == null) {
          unsetCountRecords();
        } else {
          setCountRecords((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case COUNT_RECORDS:
        return Boolean.valueOf(isCountRecords());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case COUNT_RECORDS:
        return isSetCountRecords();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbTruncate_args)
        return this.equals((dbTruncate_args)that);
      return false;
    }

    public boolean equals(dbTruncate_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_countRecords = true;
      boolean that_present_countRecords = true;
      if (this_present_countRecords || that_present_countRecords) {
        if (!(this_present_countRecords && that_present_countRecords))
          return false;
        if (this.countRecords != that.countRecords)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_countRecords = true;
      list.add(present_countRecords);
      if (present_countRecords)
        list.add(countRecords);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbTruncate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCountRecords()).compareTo(other.isSetCountRecords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountRecords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countRecords, other.countRecords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbTruncate_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countRecords:");
      sb.append(this.countRecords);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbTruncate_argsStandardSchemeFactory implements SchemeFactory {
      public dbTruncate_argsStandardScheme getScheme() {
        return new dbTruncate_argsStandardScheme();
      }
    }

    private static class dbTruncate_argsStandardScheme extends StandardScheme<dbTruncate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbTruncate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT_RECORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.countRecords = iprot.readBool();
                struct.setCountRecordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbTruncate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_RECORDS_FIELD_DESC);
        oprot.writeBool(struct.countRecords);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbTruncate_argsTupleSchemeFactory implements SchemeFactory {
      public dbTruncate_argsTupleScheme getScheme() {
        return new dbTruncate_argsTupleScheme();
      }
    }

    private static class dbTruncate_argsTupleScheme extends TupleScheme<dbTruncate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbTruncate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetCountRecords()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetCountRecords()) {
          oprot.writeBool(struct.countRecords);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbTruncate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.countRecords = iprot.readBool();
          struct.setCountRecordsIsSet(true);
        }
      }
    }

  }

  public static class dbTruncate_result implements org.apache.thrift.TBase<dbTruncate_result, dbTruncate_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbTruncate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbTruncate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dbTruncate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dbTruncate_resultTupleSchemeFactory());
    }

    public int success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbTruncate_result.class, metaDataMap);
    }

    public dbTruncate_result() {
    }

    public dbTruncate_result(
      int success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbTruncate_result(dbTruncate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public dbTruncate_result deepCopy() {
      return new dbTruncate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.dbe = null;
      this.re = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public dbTruncate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public dbTruncate_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public dbTruncate_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dbTruncate_result)
        return this.equals((dbTruncate_result)that);
      return false;
    }

    public boolean equals(dbTruncate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(dbTruncate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dbTruncate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbTruncate_resultStandardSchemeFactory implements SchemeFactory {
      public dbTruncate_resultStandardScheme getScheme() {
        return new dbTruncate_resultStandardScheme();
      }
    }

    private static class dbTruncate_resultStandardScheme extends StandardScheme<dbTruncate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbTruncate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbTruncate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbTruncate_resultTupleSchemeFactory implements SchemeFactory {
      public dbTruncate_resultTupleScheme getScheme() {
        return new dbTruncate_resultTupleScheme();
      }
    }

    private static class dbTruncate_resultTupleScheme extends TupleScheme<dbTruncate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbTruncate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbTruncate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class openCursor_args implements org.apache.thrift.TBase<openCursor_args, openCursor_args._Fields>, java.io.Serializable, Cloneable, Comparable<openCursor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openCursor_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CURSOR_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("cursorConfig", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openCursor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openCursor_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public TCursorConfig cursorConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      CURSOR_CONFIG((short)3, "cursorConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // CURSOR_CONFIG
            return CURSOR_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.CURSOR_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("cursorConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursorConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openCursor_args.class, metaDataMap);
    }

    public openCursor_args() {
    }

    public openCursor_args(
      TDatabase db,
      TTransaction txn,
      TCursorConfig cursorConfig)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.cursorConfig = cursorConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openCursor_args(openCursor_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetCursorConfig()) {
        this.cursorConfig = new TCursorConfig(other.cursorConfig);
      }
    }

    public openCursor_args deepCopy() {
      return new openCursor_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.cursorConfig = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public openCursor_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public openCursor_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TCursorConfig getCursorConfig() {
      return this.cursorConfig;
    }

    public openCursor_args setCursorConfig(TCursorConfig cursorConfig) {
      this.cursorConfig = cursorConfig;
      return this;
    }

    public void unsetCursorConfig() {
      this.cursorConfig = null;
    }

    /** Returns true if field cursorConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetCursorConfig() {
      return this.cursorConfig != null;
    }

    public void setCursorConfigIsSet(boolean value) {
      if (!value) {
        this.cursorConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case CURSOR_CONFIG:
        if (value == null) {
          unsetCursorConfig();
        } else {
          setCursorConfig((TCursorConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case CURSOR_CONFIG:
        return getCursorConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case CURSOR_CONFIG:
        return isSetCursorConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openCursor_args)
        return this.equals((openCursor_args)that);
      return false;
    }

    public boolean equals(openCursor_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_cursorConfig = true && this.isSetCursorConfig();
      boolean that_present_cursorConfig = true && that.isSetCursorConfig();
      if (this_present_cursorConfig || that_present_cursorConfig) {
        if (!(this_present_cursorConfig && that_present_cursorConfig))
          return false;
        if (!this.cursorConfig.equals(that.cursorConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_cursorConfig = true && (isSetCursorConfig());
      list.add(present_cursorConfig);
      if (present_cursorConfig)
        list.add(cursorConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(openCursor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCursorConfig()).compareTo(other.isSetCursorConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursorConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursorConfig, other.cursorConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openCursor_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cursorConfig:");
      if (this.cursorConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.cursorConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (cursorConfig != null) {
        cursorConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openCursor_argsStandardSchemeFactory implements SchemeFactory {
      public openCursor_argsStandardScheme getScheme() {
        return new openCursor_argsStandardScheme();
      }
    }

    private static class openCursor_argsStandardScheme extends StandardScheme<openCursor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openCursor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CURSOR_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursorConfig = new TCursorConfig();
                struct.cursorConfig.read(iprot);
                struct.setCursorConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openCursor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cursorConfig != null) {
          oprot.writeFieldBegin(CURSOR_CONFIG_FIELD_DESC);
          struct.cursorConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openCursor_argsTupleSchemeFactory implements SchemeFactory {
      public openCursor_argsTupleScheme getScheme() {
        return new openCursor_argsTupleScheme();
      }
    }

    private static class openCursor_argsTupleScheme extends TupleScheme<openCursor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openCursor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetCursorConfig()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetCursorConfig()) {
          struct.cursorConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openCursor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cursorConfig = new TCursorConfig();
          struct.cursorConfig.read(iprot);
          struct.setCursorConfigIsSet(true);
        }
      }
    }

  }

  public static class openCursor_result implements org.apache.thrift.TBase<openCursor_result, openCursor_result._Fields>, java.io.Serializable, Cloneable, Comparable<openCursor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openCursor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openCursor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openCursor_resultTupleSchemeFactory());
    }

    public TCursor success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openCursor_result.class, metaDataMap);
    }

    public openCursor_result() {
    }

    public openCursor_result(
      TCursor success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openCursor_result(openCursor_result other) {
      if (other.isSetSuccess()) {
        this.success = new TCursor(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public openCursor_result deepCopy() {
      return new openCursor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TCursor getSuccess() {
      return this.success;
    }

    public openCursor_result setSuccess(TCursor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public openCursor_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public openCursor_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCursor)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openCursor_result)
        return this.equals((openCursor_result)that);
      return false;
    }

    public boolean equals(openCursor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(openCursor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openCursor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openCursor_resultStandardSchemeFactory implements SchemeFactory {
      public openCursor_resultStandardScheme getScheme() {
        return new openCursor_resultStandardScheme();
      }
    }

    private static class openCursor_resultStandardScheme extends StandardScheme<openCursor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openCursor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TCursor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openCursor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openCursor_resultTupleSchemeFactory implements SchemeFactory {
      public openCursor_resultTupleScheme getScheme() {
        return new openCursor_resultTupleScheme();
      }
    }

    private static class openCursor_resultTupleScheme extends TupleScheme<openCursor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openCursor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openCursor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TCursor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class closeCursorHandle_args implements org.apache.thrift.TBase<closeCursorHandle_args, closeCursorHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeCursorHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeCursorHandle_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeCursorHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeCursorHandle_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeCursorHandle_args.class, metaDataMap);
    }

    public closeCursorHandle_args() {
    }

    public closeCursorHandle_args(
      TCursor cursor)
    {
      this();
      this.cursor = cursor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeCursorHandle_args(closeCursorHandle_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
    }

    public closeCursorHandle_args deepCopy() {
      return new closeCursorHandle_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public closeCursorHandle_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeCursorHandle_args)
        return this.equals((closeCursorHandle_args)that);
      return false;
    }

    public boolean equals(closeCursorHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeCursorHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeCursorHandle_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeCursorHandle_argsStandardSchemeFactory implements SchemeFactory {
      public closeCursorHandle_argsStandardScheme getScheme() {
        return new closeCursorHandle_argsStandardScheme();
      }
    }

    private static class closeCursorHandle_argsStandardScheme extends StandardScheme<closeCursorHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeCursorHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeCursorHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeCursorHandle_argsTupleSchemeFactory implements SchemeFactory {
      public closeCursorHandle_argsTupleScheme getScheme() {
        return new closeCursorHandle_argsTupleScheme();
      }
    }

    private static class closeCursorHandle_argsTupleScheme extends TupleScheme<closeCursorHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeCursorHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeCursorHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
      }
    }

  }

  public static class closeCursorHandle_result implements org.apache.thrift.TBase<closeCursorHandle_result, closeCursorHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeCursorHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeCursorHandle_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeCursorHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeCursorHandle_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeCursorHandle_result.class, metaDataMap);
    }

    public closeCursorHandle_result() {
    }

    public closeCursorHandle_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeCursorHandle_result(closeCursorHandle_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public closeCursorHandle_result deepCopy() {
      return new closeCursorHandle_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public closeCursorHandle_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public closeCursorHandle_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeCursorHandle_result)
        return this.equals((closeCursorHandle_result)that);
      return false;
    }

    public boolean equals(closeCursorHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeCursorHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeCursorHandle_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeCursorHandle_resultStandardSchemeFactory implements SchemeFactory {
      public closeCursorHandle_resultStandardScheme getScheme() {
        return new closeCursorHandle_resultStandardScheme();
      }
    }

    private static class closeCursorHandle_resultStandardScheme extends StandardScheme<closeCursorHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeCursorHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeCursorHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeCursorHandle_resultTupleSchemeFactory implements SchemeFactory {
      public closeCursorHandle_resultTupleScheme getScheme() {
        return new closeCursorHandle_resultTupleScheme();
      }
    }

    private static class closeCursorHandle_resultTupleScheme extends TupleScheme<closeCursorHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeCursorHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeCursorHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getCursorConfig_args implements org.apache.thrift.TBase<getCursorConfig_args, getCursorConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCursorConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCursorConfig_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCursorConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCursorConfig_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCursorConfig_args.class, metaDataMap);
    }

    public getCursorConfig_args() {
    }

    public getCursorConfig_args(
      TCursor cursor)
    {
      this();
      this.cursor = cursor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCursorConfig_args(getCursorConfig_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
    }

    public getCursorConfig_args deepCopy() {
      return new getCursorConfig_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public getCursorConfig_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCursorConfig_args)
        return this.equals((getCursorConfig_args)that);
      return false;
    }

    public boolean equals(getCursorConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCursorConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCursorConfig_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCursorConfig_argsStandardSchemeFactory implements SchemeFactory {
      public getCursorConfig_argsStandardScheme getScheme() {
        return new getCursorConfig_argsStandardScheme();
      }
    }

    private static class getCursorConfig_argsStandardScheme extends StandardScheme<getCursorConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCursorConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCursorConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCursorConfig_argsTupleSchemeFactory implements SchemeFactory {
      public getCursorConfig_argsTupleScheme getScheme() {
        return new getCursorConfig_argsTupleScheme();
      }
    }

    private static class getCursorConfig_argsTupleScheme extends TupleScheme<getCursorConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCursorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCursorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
      }
    }

  }

  public static class getCursorConfig_result implements org.apache.thrift.TBase<getCursorConfig_result, getCursorConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCursorConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCursorConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCursorConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCursorConfig_resultTupleSchemeFactory());
    }

    public TCursorConfig success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursorConfig.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCursorConfig_result.class, metaDataMap);
    }

    public getCursorConfig_result() {
    }

    public getCursorConfig_result(
      TCursorConfig success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCursorConfig_result(getCursorConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = new TCursorConfig(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public getCursorConfig_result deepCopy() {
      return new getCursorConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TCursorConfig getSuccess() {
      return this.success;
    }

    public getCursorConfig_result setSuccess(TCursorConfig success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public getCursorConfig_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public getCursorConfig_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCursorConfig)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCursorConfig_result)
        return this.equals((getCursorConfig_result)that);
      return false;
    }

    public boolean equals(getCursorConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCursorConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCursorConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCursorConfig_resultStandardSchemeFactory implements SchemeFactory {
      public getCursorConfig_resultStandardScheme getScheme() {
        return new getCursorConfig_resultStandardScheme();
      }
    }

    private static class getCursorConfig_resultStandardScheme extends StandardScheme<getCursorConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCursorConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TCursorConfig();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCursorConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCursorConfig_resultTupleSchemeFactory implements SchemeFactory {
      public getCursorConfig_resultTupleScheme getScheme() {
        return new getCursorConfig_resultTupleScheme();
      }
    }

    private static class getCursorConfig_resultTupleScheme extends TupleScheme<getCursorConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCursorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCursorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TCursorConfig();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getCursorCachePriority_args implements org.apache.thrift.TBase<getCursorCachePriority_args, getCursorCachePriority_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCursorCachePriority_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCursorCachePriority_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCursorCachePriority_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCursorCachePriority_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCursorCachePriority_args.class, metaDataMap);
    }

    public getCursorCachePriority_args() {
    }

    public getCursorCachePriority_args(
      TCursor cursor)
    {
      this();
      this.cursor = cursor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCursorCachePriority_args(getCursorCachePriority_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
    }

    public getCursorCachePriority_args deepCopy() {
      return new getCursorCachePriority_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public getCursorCachePriority_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCursorCachePriority_args)
        return this.equals((getCursorCachePriority_args)that);
      return false;
    }

    public boolean equals(getCursorCachePriority_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCursorCachePriority_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCursorCachePriority_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCursorCachePriority_argsStandardSchemeFactory implements SchemeFactory {
      public getCursorCachePriority_argsStandardScheme getScheme() {
        return new getCursorCachePriority_argsStandardScheme();
      }
    }

    private static class getCursorCachePriority_argsStandardScheme extends StandardScheme<getCursorCachePriority_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCursorCachePriority_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCursorCachePriority_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCursorCachePriority_argsTupleSchemeFactory implements SchemeFactory {
      public getCursorCachePriority_argsTupleScheme getScheme() {
        return new getCursorCachePriority_argsTupleScheme();
      }
    }

    private static class getCursorCachePriority_argsTupleScheme extends TupleScheme<getCursorCachePriority_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCursorCachePriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCursorCachePriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
      }
    }

  }

  public static class getCursorCachePriority_result implements org.apache.thrift.TBase<getCursorCachePriority_result, getCursorCachePriority_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCursorCachePriority_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCursorCachePriority_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCursorCachePriority_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCursorCachePriority_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TCachePriority
     */
    public TCachePriority success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TCachePriority
       */
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCachePriority.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCursorCachePriority_result.class, metaDataMap);
    }

    public getCursorCachePriority_result() {
    }

    public getCursorCachePriority_result(
      TCachePriority success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCursorCachePriority_result(getCursorCachePriority_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public getCursorCachePriority_result deepCopy() {
      return new getCursorCachePriority_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    /**
     * 
     * @see TCachePriority
     */
    public TCachePriority getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TCachePriority
     */
    public getCursorCachePriority_result setSuccess(TCachePriority success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public getCursorCachePriority_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public getCursorCachePriority_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCachePriority)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCursorCachePriority_result)
        return this.equals((getCursorCachePriority_result)that);
      return false;
    }

    public boolean equals(getCursorCachePriority_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCursorCachePriority_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCursorCachePriority_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCursorCachePriority_resultStandardSchemeFactory implements SchemeFactory {
      public getCursorCachePriority_resultStandardScheme getScheme() {
        return new getCursorCachePriority_resultStandardScheme();
      }
    }

    private static class getCursorCachePriority_resultStandardScheme extends StandardScheme<getCursorCachePriority_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCursorCachePriority_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.sleepycat.thrift.TCachePriority.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCursorCachePriority_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCursorCachePriority_resultTupleSchemeFactory implements SchemeFactory {
      public getCursorCachePriority_resultTupleScheme getScheme() {
        return new getCursorCachePriority_resultTupleScheme();
      }
    }

    private static class getCursorCachePriority_resultTupleScheme extends TupleScheme<getCursorCachePriority_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCursorCachePriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCursorCachePriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.sleepycat.thrift.TCachePriority.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class setCursorCachePriority_args implements org.apache.thrift.TBase<setCursorCachePriority_args, setCursorCachePriority_args._Fields>, java.io.Serializable, Cloneable, Comparable<setCursorCachePriority_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCursorCachePriority_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCursorCachePriority_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCursorCachePriority_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required
    /**
     * 
     * @see TCachePriority
     */
    public TCachePriority priority; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor"),
      /**
       * 
       * @see TCachePriority
       */
      PRIORITY((short)2, "priority");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          case 2: // PRIORITY
            return PRIORITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCachePriority.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCursorCachePriority_args.class, metaDataMap);
    }

    public setCursorCachePriority_args() {
    }

    public setCursorCachePriority_args(
      TCursor cursor,
      TCachePriority priority)
    {
      this();
      this.cursor = cursor;
      this.priority = priority;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCursorCachePriority_args(setCursorCachePriority_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
      if (other.isSetPriority()) {
        this.priority = other.priority;
      }
    }

    public setCursorCachePriority_args deepCopy() {
      return new setCursorCachePriority_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
      this.priority = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public setCursorCachePriority_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    /**
     * 
     * @see TCachePriority
     */
    public TCachePriority getPriority() {
      return this.priority;
    }

    /**
     * 
     * @see TCachePriority
     */
    public setCursorCachePriority_args setPriority(TCachePriority priority) {
      this.priority = priority;
      return this;
    }

    public void unsetPriority() {
      this.priority = null;
    }

    /** Returns true if field priority is set (has been assigned a value) and false otherwise */
    public boolean isSetPriority() {
      return this.priority != null;
    }

    public void setPriorityIsSet(boolean value) {
      if (!value) {
        this.priority = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      case PRIORITY:
        if (value == null) {
          unsetPriority();
        } else {
          setPriority((TCachePriority)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      case PRIORITY:
        return getPriority();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      case PRIORITY:
        return isSetPriority();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCursorCachePriority_args)
        return this.equals((setCursorCachePriority_args)that);
      return false;
    }

    public boolean equals(setCursorCachePriority_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      boolean this_present_priority = true && this.isSetPriority();
      boolean that_present_priority = true && that.isSetPriority();
      if (this_present_priority || that_present_priority) {
        if (!(this_present_priority && that_present_priority))
          return false;
        if (!this.priority.equals(that.priority))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      boolean present_priority = true && (isSetPriority());
      list.add(present_priority);
      if (present_priority)
        list.add(priority.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(setCursorCachePriority_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriority()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCursorCachePriority_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCursorCachePriority_argsStandardSchemeFactory implements SchemeFactory {
      public setCursorCachePriority_argsStandardScheme getScheme() {
        return new setCursorCachePriority_argsStandardScheme();
      }
    }

    private static class setCursorCachePriority_argsStandardScheme extends StandardScheme<setCursorCachePriority_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCursorCachePriority_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIORITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priority = com.sleepycat.thrift.TCachePriority.findByValue(iprot.readI32());
                struct.setPriorityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCursorCachePriority_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.priority != null) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeI32(struct.priority.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCursorCachePriority_argsTupleSchemeFactory implements SchemeFactory {
      public setCursorCachePriority_argsTupleScheme getScheme() {
        return new setCursorCachePriority_argsTupleScheme();
      }
    }

    private static class setCursorCachePriority_argsTupleScheme extends TupleScheme<setCursorCachePriority_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCursorCachePriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        if (struct.isSetPriority()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
        if (struct.isSetPriority()) {
          oprot.writeI32(struct.priority.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCursorCachePriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.priority = com.sleepycat.thrift.TCachePriority.findByValue(iprot.readI32());
          struct.setPriorityIsSet(true);
        }
      }
    }

  }

  public static class setCursorCachePriority_result implements org.apache.thrift.TBase<setCursorCachePriority_result, setCursorCachePriority_result._Fields>, java.io.Serializable, Cloneable, Comparable<setCursorCachePriority_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCursorCachePriority_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCursorCachePriority_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCursorCachePriority_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCursorCachePriority_result.class, metaDataMap);
    }

    public setCursorCachePriority_result() {
    }

    public setCursorCachePriority_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCursorCachePriority_result(setCursorCachePriority_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public setCursorCachePriority_result deepCopy() {
      return new setCursorCachePriority_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public setCursorCachePriority_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public setCursorCachePriority_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCursorCachePriority_result)
        return this.equals((setCursorCachePriority_result)that);
      return false;
    }

    public boolean equals(setCursorCachePriority_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(setCursorCachePriority_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCursorCachePriority_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCursorCachePriority_resultStandardSchemeFactory implements SchemeFactory {
      public setCursorCachePriority_resultStandardScheme getScheme() {
        return new setCursorCachePriority_resultStandardScheme();
      }
    }

    private static class setCursorCachePriority_resultStandardScheme extends StandardScheme<setCursorCachePriority_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCursorCachePriority_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCursorCachePriority_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCursorCachePriority_resultTupleSchemeFactory implements SchemeFactory {
      public setCursorCachePriority_resultTupleScheme getScheme() {
        return new setCursorCachePriority_resultTupleScheme();
      }
    }

    private static class setCursorCachePriority_resultTupleScheme extends TupleScheme<setCursorCachePriority_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCursorCachePriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCursorCachePriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class cursorGet_args implements org.apache.thrift.TBase<cursorGet_args, cursorGet_args._Fields>, java.io.Serializable, Cloneable, Comparable<cursorGet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorGet_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("keyData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorGet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorGet_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required
    public TKeyData keyData; // required
    public TCursorGetConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor"),
      KEY_DATA((short)2, "keyData"),
      CONFIG((short)3, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          case 2: // KEY_DATA
            return KEY_DATA;
          case 3: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.KEY_DATA, new org.apache.thrift.meta_data.FieldMetaData("keyData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyData.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursorGetConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorGet_args.class, metaDataMap);
    }

    public cursorGet_args() {
    }

    public cursorGet_args(
      TCursor cursor,
      TKeyData keyData,
      TCursorGetConfig config)
    {
      this();
      this.cursor = cursor;
      this.keyData = keyData;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorGet_args(cursorGet_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
      if (other.isSetKeyData()) {
        this.keyData = new TKeyData(other.keyData);
      }
      if (other.isSetConfig()) {
        this.config = new TCursorGetConfig(other.config);
      }
    }

    public cursorGet_args deepCopy() {
      return new cursorGet_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
      this.keyData = null;
      this.config = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public cursorGet_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public TKeyData getKeyData() {
      return this.keyData;
    }

    public cursorGet_args setKeyData(TKeyData keyData) {
      this.keyData = keyData;
      return this;
    }

    public void unsetKeyData() {
      this.keyData = null;
    }

    /** Returns true if field keyData is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyData() {
      return this.keyData != null;
    }

    public void setKeyDataIsSet(boolean value) {
      if (!value) {
        this.keyData = null;
      }
    }

    public TCursorGetConfig getConfig() {
      return this.config;
    }

    public cursorGet_args setConfig(TCursorGetConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      case KEY_DATA:
        if (value == null) {
          unsetKeyData();
        } else {
          setKeyData((TKeyData)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TCursorGetConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      case KEY_DATA:
        return getKeyData();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      case KEY_DATA:
        return isSetKeyData();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorGet_args)
        return this.equals((cursorGet_args)that);
      return false;
    }

    public boolean equals(cursorGet_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      boolean this_present_keyData = true && this.isSetKeyData();
      boolean that_present_keyData = true && that.isSetKeyData();
      if (this_present_keyData || that_present_keyData) {
        if (!(this_present_keyData && that_present_keyData))
          return false;
        if (!this.keyData.equals(that.keyData))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      boolean present_keyData = true && (isSetKeyData());
      list.add(present_keyData);
      if (present_keyData)
        list.add(keyData);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyData()).compareTo(other.isSetKeyData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyData, other.keyData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorGet_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyData:");
      if (this.keyData == null) {
        sb.append("null");
      } else {
        sb.append(this.keyData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
      if (keyData != null) {
        keyData.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorGet_argsStandardSchemeFactory implements SchemeFactory {
      public cursorGet_argsStandardScheme getScheme() {
        return new cursorGet_argsStandardScheme();
      }
    }

    private static class cursorGet_argsStandardScheme extends StandardScheme<cursorGet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorGet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.keyData = new TKeyData();
                struct.keyData.read(iprot);
                struct.setKeyDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TCursorGetConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorGet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.keyData != null) {
          oprot.writeFieldBegin(KEY_DATA_FIELD_DESC);
          struct.keyData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorGet_argsTupleSchemeFactory implements SchemeFactory {
      public cursorGet_argsTupleScheme getScheme() {
        return new cursorGet_argsTupleScheme();
      }
    }

    private static class cursorGet_argsTupleScheme extends TupleScheme<cursorGet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        if (struct.isSetKeyData()) {
          optionals.set(1);
        }
        if (struct.isSetConfig()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
        if (struct.isSetKeyData()) {
          struct.keyData.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.keyData = new TKeyData();
          struct.keyData.read(iprot);
          struct.setKeyDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.config = new TCursorGetConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class cursorGet_result implements org.apache.thrift.TBase<cursorGet_result, cursorGet_result._Fields>, java.io.Serializable, Cloneable, Comparable<cursorGet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorGet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorGet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorGet_resultTupleSchemeFactory());
    }

    public TGetResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorGet_result.class, metaDataMap);
    }

    public cursorGet_result() {
    }

    public cursorGet_result(
      TGetResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorGet_result(cursorGet_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public cursorGet_result deepCopy() {
      return new cursorGet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TGetResult getSuccess() {
      return this.success;
    }

    public cursorGet_result setSuccess(TGetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public cursorGet_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public cursorGet_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorGet_result)
        return this.equals((cursorGet_result)that);
      return false;
    }

    public boolean equals(cursorGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorGet_resultStandardSchemeFactory implements SchemeFactory {
      public cursorGet_resultStandardScheme getScheme() {
        return new cursorGet_resultStandardScheme();
      }
    }

    private static class cursorGet_resultStandardScheme extends StandardScheme<cursorGet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorGet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorGet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorGet_resultTupleSchemeFactory implements SchemeFactory {
      public cursorGet_resultTupleScheme getScheme() {
        return new cursorGet_resultTupleScheme();
      }
    }

    private static class cursorGet_resultTupleScheme extends TupleScheme<cursorGet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TGetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class cursorGetWithPKey_args implements org.apache.thrift.TBase<cursorGetWithPKey_args, cursorGetWithPKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<cursorGetWithPKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorGetWithPKey_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_PKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("keyPKey", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorGetWithPKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorGetWithPKey_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required
    public TKeyDataWithPKey keyPKey; // required
    public TCursorGetConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor"),
      KEY_PKEY((short)2, "keyPKey"),
      CONFIG((short)3, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          case 2: // KEY_PKEY
            return KEY_PKEY;
          case 3: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.KEY_PKEY, new org.apache.thrift.meta_data.FieldMetaData("keyPKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyDataWithPKey.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursorGetConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorGetWithPKey_args.class, metaDataMap);
    }

    public cursorGetWithPKey_args() {
    }

    public cursorGetWithPKey_args(
      TCursor cursor,
      TKeyDataWithPKey keyPKey,
      TCursorGetConfig config)
    {
      this();
      this.cursor = cursor;
      this.keyPKey = keyPKey;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorGetWithPKey_args(cursorGetWithPKey_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
      if (other.isSetKeyPKey()) {
        this.keyPKey = new TKeyDataWithPKey(other.keyPKey);
      }
      if (other.isSetConfig()) {
        this.config = new TCursorGetConfig(other.config);
      }
    }

    public cursorGetWithPKey_args deepCopy() {
      return new cursorGetWithPKey_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
      this.keyPKey = null;
      this.config = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public cursorGetWithPKey_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public TKeyDataWithPKey getKeyPKey() {
      return this.keyPKey;
    }

    public cursorGetWithPKey_args setKeyPKey(TKeyDataWithPKey keyPKey) {
      this.keyPKey = keyPKey;
      return this;
    }

    public void unsetKeyPKey() {
      this.keyPKey = null;
    }

    /** Returns true if field keyPKey is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyPKey() {
      return this.keyPKey != null;
    }

    public void setKeyPKeyIsSet(boolean value) {
      if (!value) {
        this.keyPKey = null;
      }
    }

    public TCursorGetConfig getConfig() {
      return this.config;
    }

    public cursorGetWithPKey_args setConfig(TCursorGetConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      case KEY_PKEY:
        if (value == null) {
          unsetKeyPKey();
        } else {
          setKeyPKey((TKeyDataWithPKey)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TCursorGetConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      case KEY_PKEY:
        return getKeyPKey();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      case KEY_PKEY:
        return isSetKeyPKey();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorGetWithPKey_args)
        return this.equals((cursorGetWithPKey_args)that);
      return false;
    }

    public boolean equals(cursorGetWithPKey_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      boolean this_present_keyPKey = true && this.isSetKeyPKey();
      boolean that_present_keyPKey = true && that.isSetKeyPKey();
      if (this_present_keyPKey || that_present_keyPKey) {
        if (!(this_present_keyPKey && that_present_keyPKey))
          return false;
        if (!this.keyPKey.equals(that.keyPKey))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      boolean present_keyPKey = true && (isSetKeyPKey());
      list.add(present_keyPKey);
      if (present_keyPKey)
        list.add(keyPKey);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorGetWithPKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyPKey()).compareTo(other.isSetKeyPKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyPKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyPKey, other.keyPKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorGetWithPKey_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyPKey:");
      if (this.keyPKey == null) {
        sb.append("null");
      } else {
        sb.append(this.keyPKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
      if (keyPKey != null) {
        keyPKey.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorGetWithPKey_argsStandardSchemeFactory implements SchemeFactory {
      public cursorGetWithPKey_argsStandardScheme getScheme() {
        return new cursorGetWithPKey_argsStandardScheme();
      }
    }

    private static class cursorGetWithPKey_argsStandardScheme extends StandardScheme<cursorGetWithPKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorGetWithPKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_PKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.keyPKey = new TKeyDataWithPKey();
                struct.keyPKey.read(iprot);
                struct.setKeyPKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TCursorGetConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorGetWithPKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.keyPKey != null) {
          oprot.writeFieldBegin(KEY_PKEY_FIELD_DESC);
          struct.keyPKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorGetWithPKey_argsTupleSchemeFactory implements SchemeFactory {
      public cursorGetWithPKey_argsTupleScheme getScheme() {
        return new cursorGetWithPKey_argsTupleScheme();
      }
    }

    private static class cursorGetWithPKey_argsTupleScheme extends TupleScheme<cursorGetWithPKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorGetWithPKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        if (struct.isSetKeyPKey()) {
          optionals.set(1);
        }
        if (struct.isSetConfig()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
        if (struct.isSetKeyPKey()) {
          struct.keyPKey.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorGetWithPKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.keyPKey = new TKeyDataWithPKey();
          struct.keyPKey.read(iprot);
          struct.setKeyPKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.config = new TCursorGetConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class cursorGetWithPKey_result implements org.apache.thrift.TBase<cursorGetWithPKey_result, cursorGetWithPKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<cursorGetWithPKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorGetWithPKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorGetWithPKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorGetWithPKey_resultTupleSchemeFactory());
    }

    public TGetWithPKeyResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetWithPKeyResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorGetWithPKey_result.class, metaDataMap);
    }

    public cursorGetWithPKey_result() {
    }

    public cursorGetWithPKey_result(
      TGetWithPKeyResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorGetWithPKey_result(cursorGetWithPKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetWithPKeyResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public cursorGetWithPKey_result deepCopy() {
      return new cursorGetWithPKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TGetWithPKeyResult getSuccess() {
      return this.success;
    }

    public cursorGetWithPKey_result setSuccess(TGetWithPKeyResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public cursorGetWithPKey_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public cursorGetWithPKey_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetWithPKeyResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorGetWithPKey_result)
        return this.equals((cursorGetWithPKey_result)that);
      return false;
    }

    public boolean equals(cursorGetWithPKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorGetWithPKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorGetWithPKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorGetWithPKey_resultStandardSchemeFactory implements SchemeFactory {
      public cursorGetWithPKey_resultStandardScheme getScheme() {
        return new cursorGetWithPKey_resultStandardScheme();
      }
    }

    private static class cursorGetWithPKey_resultStandardScheme extends StandardScheme<cursorGetWithPKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorGetWithPKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetWithPKeyResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorGetWithPKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorGetWithPKey_resultTupleSchemeFactory implements SchemeFactory {
      public cursorGetWithPKey_resultTupleScheme getScheme() {
        return new cursorGetWithPKey_resultTupleScheme();
      }
    }

    private static class cursorGetWithPKey_resultTupleScheme extends TupleScheme<cursorGetWithPKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorGetWithPKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorGetWithPKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TGetWithPKeyResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class cursorPut_args implements org.apache.thrift.TBase<cursorPut_args, cursorPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<cursorPut_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorPut_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAIR_FIELD_DESC = new org.apache.thrift.protocol.TField("pair", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorPut_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorPut_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required
    public TKeyDataWithSecondaryKeys pair; // required
    /**
     * 
     * @see TCursorPutConfig
     */
    public TCursorPutConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor"),
      PAIR((short)2, "pair"),
      /**
       * 
       * @see TCursorPutConfig
       */
      CONFIG((short)3, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          case 2: // PAIR
            return PAIR;
          case 3: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.PAIR, new org.apache.thrift.meta_data.FieldMetaData("pair", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyDataWithSecondaryKeys.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCursorPutConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorPut_args.class, metaDataMap);
    }

    public cursorPut_args() {
    }

    public cursorPut_args(
      TCursor cursor,
      TKeyDataWithSecondaryKeys pair,
      TCursorPutConfig config)
    {
      this();
      this.cursor = cursor;
      this.pair = pair;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorPut_args(cursorPut_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
      if (other.isSetPair()) {
        this.pair = new TKeyDataWithSecondaryKeys(other.pair);
      }
      if (other.isSetConfig()) {
        this.config = other.config;
      }
    }

    public cursorPut_args deepCopy() {
      return new cursorPut_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
      this.pair = null;
      this.config = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public cursorPut_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public TKeyDataWithSecondaryKeys getPair() {
      return this.pair;
    }

    public cursorPut_args setPair(TKeyDataWithSecondaryKeys pair) {
      this.pair = pair;
      return this;
    }

    public void unsetPair() {
      this.pair = null;
    }

    /** Returns true if field pair is set (has been assigned a value) and false otherwise */
    public boolean isSetPair() {
      return this.pair != null;
    }

    public void setPairIsSet(boolean value) {
      if (!value) {
        this.pair = null;
      }
    }

    /**
     * 
     * @see TCursorPutConfig
     */
    public TCursorPutConfig getConfig() {
      return this.config;
    }

    /**
     * 
     * @see TCursorPutConfig
     */
    public cursorPut_args setConfig(TCursorPutConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      case PAIR:
        if (value == null) {
          unsetPair();
        } else {
          setPair((TKeyDataWithSecondaryKeys)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TCursorPutConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      case PAIR:
        return getPair();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      case PAIR:
        return isSetPair();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorPut_args)
        return this.equals((cursorPut_args)that);
      return false;
    }

    public boolean equals(cursorPut_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      boolean this_present_pair = true && this.isSetPair();
      boolean that_present_pair = true && that.isSetPair();
      if (this_present_pair || that_present_pair) {
        if (!(this_present_pair && that_present_pair))
          return false;
        if (!this.pair.equals(that.pair))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      boolean present_pair = true && (isSetPair());
      list.add(present_pair);
      if (present_pair)
        list.add(pair);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorPut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPair()).compareTo(other.isSetPair());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPair()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pair, other.pair);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorPut_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pair:");
      if (this.pair == null) {
        sb.append("null");
      } else {
        sb.append(this.pair);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
      if (pair != null) {
        pair.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorPut_argsStandardSchemeFactory implements SchemeFactory {
      public cursorPut_argsStandardScheme getScheme() {
        return new cursorPut_argsStandardScheme();
      }
    }

    private static class cursorPut_argsStandardScheme extends StandardScheme<cursorPut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pair = new TKeyDataWithSecondaryKeys();
                struct.pair.read(iprot);
                struct.setPairIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.config = com.sleepycat.thrift.TCursorPutConfig.findByValue(iprot.readI32());
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorPut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pair != null) {
          oprot.writeFieldBegin(PAIR_FIELD_DESC);
          struct.pair.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          oprot.writeI32(struct.config.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorPut_argsTupleSchemeFactory implements SchemeFactory {
      public cursorPut_argsTupleScheme getScheme() {
        return new cursorPut_argsTupleScheme();
      }
    }

    private static class cursorPut_argsTupleScheme extends TupleScheme<cursorPut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorPut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        if (struct.isSetPair()) {
          optionals.set(1);
        }
        if (struct.isSetConfig()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
        if (struct.isSetPair()) {
          struct.pair.write(oprot);
        }
        if (struct.isSetConfig()) {
          oprot.writeI32(struct.config.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorPut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pair = new TKeyDataWithSecondaryKeys();
          struct.pair.read(iprot);
          struct.setPairIsSet(true);
        }
        if (incoming.get(2)) {
          struct.config = com.sleepycat.thrift.TCursorPutConfig.findByValue(iprot.readI32());
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class cursorPut_result implements org.apache.thrift.TBase<cursorPut_result, cursorPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<cursorPut_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorPut_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorPut_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorPut_resultTupleSchemeFactory());
    }

    public TPutResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPutResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorPut_result.class, metaDataMap);
    }

    public cursorPut_result() {
    }

    public cursorPut_result(
      TPutResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorPut_result(cursorPut_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPutResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public cursorPut_result deepCopy() {
      return new cursorPut_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TPutResult getSuccess() {
      return this.success;
    }

    public cursorPut_result setSuccess(TPutResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public cursorPut_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public cursorPut_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPutResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorPut_result)
        return this.equals((cursorPut_result)that);
      return false;
    }

    public boolean equals(cursorPut_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorPut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorPut_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorPut_resultStandardSchemeFactory implements SchemeFactory {
      public cursorPut_resultStandardScheme getScheme() {
        return new cursorPut_resultStandardScheme();
      }
    }

    private static class cursorPut_resultStandardScheme extends StandardScheme<cursorPut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPutResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorPut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorPut_resultTupleSchemeFactory implements SchemeFactory {
      public cursorPut_resultTupleScheme getScheme() {
        return new cursorPut_resultTupleScheme();
      }
    }

    private static class cursorPut_resultTupleScheme extends TupleScheme<cursorPut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorPut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorPut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TPutResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class cursorDelete_args implements org.apache.thrift.TBase<cursorDelete_args, cursorDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<cursorDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorDelete_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorDelete_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorDelete_args.class, metaDataMap);
    }

    public cursorDelete_args() {
    }

    public cursorDelete_args(
      TCursor cursor)
    {
      this();
      this.cursor = cursor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorDelete_args(cursorDelete_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
    }

    public cursorDelete_args deepCopy() {
      return new cursorDelete_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public cursorDelete_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorDelete_args)
        return this.equals((cursorDelete_args)that);
      return false;
    }

    public boolean equals(cursorDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorDelete_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorDelete_argsStandardSchemeFactory implements SchemeFactory {
      public cursorDelete_argsStandardScheme getScheme() {
        return new cursorDelete_argsStandardScheme();
      }
    }

    private static class cursorDelete_argsStandardScheme extends StandardScheme<cursorDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorDelete_argsTupleSchemeFactory implements SchemeFactory {
      public cursorDelete_argsTupleScheme getScheme() {
        return new cursorDelete_argsTupleScheme();
      }
    }

    private static class cursorDelete_argsTupleScheme extends TupleScheme<cursorDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
      }
    }

  }

  public static class cursorDelete_result implements org.apache.thrift.TBase<cursorDelete_result, cursorDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<cursorDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorDelete_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TOperationStatus
     */
    public TOperationStatus success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TOperationStatus
       */
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TOperationStatus.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorDelete_result.class, metaDataMap);
    }

    public cursorDelete_result() {
    }

    public cursorDelete_result(
      TOperationStatus success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorDelete_result(cursorDelete_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public cursorDelete_result deepCopy() {
      return new cursorDelete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    /**
     * 
     * @see TOperationStatus
     */
    public TOperationStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TOperationStatus
     */
    public cursorDelete_result setSuccess(TOperationStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public cursorDelete_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public cursorDelete_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOperationStatus)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorDelete_result)
        return this.equals((cursorDelete_result)that);
      return false;
    }

    public boolean equals(cursorDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorDelete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorDelete_resultStandardSchemeFactory implements SchemeFactory {
      public cursorDelete_resultStandardScheme getScheme() {
        return new cursorDelete_resultStandardScheme();
      }
    }

    private static class cursorDelete_resultStandardScheme extends StandardScheme<cursorDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.sleepycat.thrift.TOperationStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorDelete_resultTupleSchemeFactory implements SchemeFactory {
      public cursorDelete_resultTupleScheme getScheme() {
        return new cursorDelete_resultTupleScheme();
      }
    }

    private static class cursorDelete_resultTupleScheme extends TupleScheme<cursorDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.sleepycat.thrift.TOperationStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class cursorDup_args implements org.apache.thrift.TBase<cursorDup_args, cursorDup_args._Fields>, java.io.Serializable, Cloneable, Comparable<cursorDup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorDup_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SAME_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("samePos", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorDup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorDup_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required
    public boolean samePos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor"),
      SAME_POS((short)2, "samePos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          case 2: // SAME_POS
            return SAME_POS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SAMEPOS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.SAME_POS, new org.apache.thrift.meta_data.FieldMetaData("samePos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorDup_args.class, metaDataMap);
    }

    public cursorDup_args() {
    }

    public cursorDup_args(
      TCursor cursor,
      boolean samePos)
    {
      this();
      this.cursor = cursor;
      this.samePos = samePos;
      setSamePosIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorDup_args(cursorDup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
      this.samePos = other.samePos;
    }

    public cursorDup_args deepCopy() {
      return new cursorDup_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
      setSamePosIsSet(false);
      this.samePos = false;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public cursorDup_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public boolean isSamePos() {
      return this.samePos;
    }

    public cursorDup_args setSamePos(boolean samePos) {
      this.samePos = samePos;
      setSamePosIsSet(true);
      return this;
    }

    public void unsetSamePos() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAMEPOS_ISSET_ID);
    }

    /** Returns true if field samePos is set (has been assigned a value) and false otherwise */
    public boolean isSetSamePos() {
      return EncodingUtils.testBit(__isset_bitfield, __SAMEPOS_ISSET_ID);
    }

    public void setSamePosIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAMEPOS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      case SAME_POS:
        if (value == null) {
          unsetSamePos();
        } else {
          setSamePos((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      case SAME_POS:
        return Boolean.valueOf(isSamePos());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      case SAME_POS:
        return isSetSamePos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorDup_args)
        return this.equals((cursorDup_args)that);
      return false;
    }

    public boolean equals(cursorDup_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      boolean this_present_samePos = true;
      boolean that_present_samePos = true;
      if (this_present_samePos || that_present_samePos) {
        if (!(this_present_samePos && that_present_samePos))
          return false;
        if (this.samePos != that.samePos)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      boolean present_samePos = true;
      list.add(present_samePos);
      if (present_samePos)
        list.add(samePos);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorDup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSamePos()).compareTo(other.isSetSamePos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSamePos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samePos, other.samePos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorDup_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("samePos:");
      sb.append(this.samePos);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorDup_argsStandardSchemeFactory implements SchemeFactory {
      public cursorDup_argsStandardScheme getScheme() {
        return new cursorDup_argsStandardScheme();
      }
    }

    private static class cursorDup_argsStandardScheme extends StandardScheme<cursorDup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorDup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SAME_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.samePos = iprot.readBool();
                struct.setSamePosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorDup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SAME_POS_FIELD_DESC);
        oprot.writeBool(struct.samePos);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorDup_argsTupleSchemeFactory implements SchemeFactory {
      public cursorDup_argsTupleScheme getScheme() {
        return new cursorDup_argsTupleScheme();
      }
    }

    private static class cursorDup_argsTupleScheme extends TupleScheme<cursorDup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorDup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        if (struct.isSetSamePos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
        if (struct.isSetSamePos()) {
          oprot.writeBool(struct.samePos);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorDup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.samePos = iprot.readBool();
          struct.setSamePosIsSet(true);
        }
      }
    }

  }

  public static class cursorDup_result implements org.apache.thrift.TBase<cursorDup_result, cursorDup_result._Fields>, java.io.Serializable, Cloneable, Comparable<cursorDup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorDup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorDup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorDup_resultTupleSchemeFactory());
    }

    public TCursor success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorDup_result.class, metaDataMap);
    }

    public cursorDup_result() {
    }

    public cursorDup_result(
      TCursor success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorDup_result(cursorDup_result other) {
      if (other.isSetSuccess()) {
        this.success = new TCursor(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public cursorDup_result deepCopy() {
      return new cursorDup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TCursor getSuccess() {
      return this.success;
    }

    public cursorDup_result setSuccess(TCursor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public cursorDup_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public cursorDup_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCursor)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorDup_result)
        return this.equals((cursorDup_result)that);
      return false;
    }

    public boolean equals(cursorDup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorDup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorDup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorDup_resultStandardSchemeFactory implements SchemeFactory {
      public cursorDup_resultStandardScheme getScheme() {
        return new cursorDup_resultStandardScheme();
      }
    }

    private static class cursorDup_resultStandardScheme extends StandardScheme<cursorDup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorDup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TCursor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorDup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorDup_resultTupleSchemeFactory implements SchemeFactory {
      public cursorDup_resultTupleScheme getScheme() {
        return new cursorDup_resultTupleScheme();
      }
    }

    private static class cursorDup_resultTupleScheme extends TupleScheme<cursorDup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorDup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorDup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TCursor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class cursorCompare_args implements org.apache.thrift.TBase<cursorCompare_args, cursorCompare_args._Fields>, java.io.Serializable, Cloneable, Comparable<cursorCompare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorCompare_args");

    private static final org.apache.thrift.protocol.TField CURSOR1_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURSOR2_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorCompare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorCompare_argsTupleSchemeFactory());
    }

    public TCursor cursor1; // required
    public TCursor cursor2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR1((short)1, "cursor1"),
      CURSOR2((short)2, "cursor2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR1
            return CURSOR1;
          case 2: // CURSOR2
            return CURSOR2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR1, new org.apache.thrift.meta_data.FieldMetaData("cursor1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      tmpMap.put(_Fields.CURSOR2, new org.apache.thrift.meta_data.FieldMetaData("cursor2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorCompare_args.class, metaDataMap);
    }

    public cursorCompare_args() {
    }

    public cursorCompare_args(
      TCursor cursor1,
      TCursor cursor2)
    {
      this();
      this.cursor1 = cursor1;
      this.cursor2 = cursor2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorCompare_args(cursorCompare_args other) {
      if (other.isSetCursor1()) {
        this.cursor1 = new TCursor(other.cursor1);
      }
      if (other.isSetCursor2()) {
        this.cursor2 = new TCursor(other.cursor2);
      }
    }

    public cursorCompare_args deepCopy() {
      return new cursorCompare_args(this);
    }

    @Override
    public void clear() {
      this.cursor1 = null;
      this.cursor2 = null;
    }

    public TCursor getCursor1() {
      return this.cursor1;
    }

    public cursorCompare_args setCursor1(TCursor cursor1) {
      this.cursor1 = cursor1;
      return this;
    }

    public void unsetCursor1() {
      this.cursor1 = null;
    }

    /** Returns true if field cursor1 is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor1() {
      return this.cursor1 != null;
    }

    public void setCursor1IsSet(boolean value) {
      if (!value) {
        this.cursor1 = null;
      }
    }

    public TCursor getCursor2() {
      return this.cursor2;
    }

    public cursorCompare_args setCursor2(TCursor cursor2) {
      this.cursor2 = cursor2;
      return this;
    }

    public void unsetCursor2() {
      this.cursor2 = null;
    }

    /** Returns true if field cursor2 is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor2() {
      return this.cursor2 != null;
    }

    public void setCursor2IsSet(boolean value) {
      if (!value) {
        this.cursor2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR1:
        if (value == null) {
          unsetCursor1();
        } else {
          setCursor1((TCursor)value);
        }
        break;

      case CURSOR2:
        if (value == null) {
          unsetCursor2();
        } else {
          setCursor2((TCursor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR1:
        return getCursor1();

      case CURSOR2:
        return getCursor2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR1:
        return isSetCursor1();
      case CURSOR2:
        return isSetCursor2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorCompare_args)
        return this.equals((cursorCompare_args)that);
      return false;
    }

    public boolean equals(cursorCompare_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor1 = true && this.isSetCursor1();
      boolean that_present_cursor1 = true && that.isSetCursor1();
      if (this_present_cursor1 || that_present_cursor1) {
        if (!(this_present_cursor1 && that_present_cursor1))
          return false;
        if (!this.cursor1.equals(that.cursor1))
          return false;
      }

      boolean this_present_cursor2 = true && this.isSetCursor2();
      boolean that_present_cursor2 = true && that.isSetCursor2();
      if (this_present_cursor2 || that_present_cursor2) {
        if (!(this_present_cursor2 && that_present_cursor2))
          return false;
        if (!this.cursor2.equals(that.cursor2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor1 = true && (isSetCursor1());
      list.add(present_cursor1);
      if (present_cursor1)
        list.add(cursor1);

      boolean present_cursor2 = true && (isSetCursor2());
      list.add(present_cursor2);
      if (present_cursor2)
        list.add(cursor2);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorCompare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor1()).compareTo(other.isSetCursor1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor1, other.cursor1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCursor2()).compareTo(other.isSetCursor2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor2, other.cursor2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorCompare_args(");
      boolean first = true;

      sb.append("cursor1:");
      if (this.cursor1 == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cursor2:");
      if (this.cursor2 == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor1 != null) {
        cursor1.validate();
      }
      if (cursor2 != null) {
        cursor2.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorCompare_argsStandardSchemeFactory implements SchemeFactory {
      public cursorCompare_argsStandardScheme getScheme() {
        return new cursorCompare_argsStandardScheme();
      }
    }

    private static class cursorCompare_argsStandardScheme extends StandardScheme<cursorCompare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorCompare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor1 = new TCursor();
                struct.cursor1.read(iprot);
                struct.setCursor1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURSOR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor2 = new TCursor();
                struct.cursor2.read(iprot);
                struct.setCursor2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorCompare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor1 != null) {
          oprot.writeFieldBegin(CURSOR1_FIELD_DESC);
          struct.cursor1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cursor2 != null) {
          oprot.writeFieldBegin(CURSOR2_FIELD_DESC);
          struct.cursor2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorCompare_argsTupleSchemeFactory implements SchemeFactory {
      public cursorCompare_argsTupleScheme getScheme() {
        return new cursorCompare_argsTupleScheme();
      }
    }

    private static class cursorCompare_argsTupleScheme extends TupleScheme<cursorCompare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorCompare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor1()) {
          optionals.set(0);
        }
        if (struct.isSetCursor2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCursor1()) {
          struct.cursor1.write(oprot);
        }
        if (struct.isSetCursor2()) {
          struct.cursor2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorCompare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cursor1 = new TCursor();
          struct.cursor1.read(iprot);
          struct.setCursor1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.cursor2 = new TCursor();
          struct.cursor2.read(iprot);
          struct.setCursor2IsSet(true);
        }
      }
    }

  }

  public static class cursorCompare_result implements org.apache.thrift.TBase<cursorCompare_result, cursorCompare_result._Fields>, java.io.Serializable, Cloneable, Comparable<cursorCompare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorCompare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I16, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorCompare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorCompare_resultTupleSchemeFactory());
    }

    public short success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorCompare_result.class, metaDataMap);
    }

    public cursorCompare_result() {
    }

    public cursorCompare_result(
      short success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorCompare_result(cursorCompare_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public cursorCompare_result deepCopy() {
      return new cursorCompare_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.dbe = null;
      this.re = null;
    }

    public short getSuccess() {
      return this.success;
    }

    public cursorCompare_result setSuccess(short success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public cursorCompare_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public cursorCompare_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Short)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Short.valueOf(getSuccess());

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorCompare_result)
        return this.equals((cursorCompare_result)that);
      return false;
    }

    public boolean equals(cursorCompare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorCompare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorCompare_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorCompare_resultStandardSchemeFactory implements SchemeFactory {
      public cursorCompare_resultStandardScheme getScheme() {
        return new cursorCompare_resultStandardScheme();
      }
    }

    private static class cursorCompare_resultStandardScheme extends StandardScheme<cursorCompare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorCompare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.success = iprot.readI16();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorCompare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI16(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorCompare_resultTupleSchemeFactory implements SchemeFactory {
      public cursorCompare_resultTupleScheme getScheme() {
        return new cursorCompare_resultTupleScheme();
      }
    }

    private static class cursorCompare_resultTupleScheme extends TupleScheme<cursorCompare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorCompare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI16(struct.success);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorCompare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI16();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class cursorCount_args implements org.apache.thrift.TBase<cursorCount_args, cursorCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<cursorCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorCount_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorCount_argsTupleSchemeFactory());
    }

    public TCursor cursor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorCount_args.class, metaDataMap);
    }

    public cursorCount_args() {
    }

    public cursorCount_args(
      TCursor cursor)
    {
      this();
      this.cursor = cursor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorCount_args(cursorCount_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TCursor(other.cursor);
      }
    }

    public cursorCount_args deepCopy() {
      return new cursorCount_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
    }

    public TCursor getCursor() {
      return this.cursor;
    }

    public cursorCount_args setCursor(TCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TCursor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorCount_args)
        return this.equals((cursorCount_args)that);
      return false;
    }

    public boolean equals(cursorCount_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorCount_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorCount_argsStandardSchemeFactory implements SchemeFactory {
      public cursorCount_argsStandardScheme getScheme() {
        return new cursorCount_argsStandardScheme();
      }
    }

    private static class cursorCount_argsStandardScheme extends StandardScheme<cursorCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorCount_argsTupleSchemeFactory implements SchemeFactory {
      public cursorCount_argsTupleScheme getScheme() {
        return new cursorCount_argsTupleScheme();
      }
    }

    private static class cursorCount_argsTupleScheme extends TupleScheme<cursorCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cursor = new TCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
      }
    }

  }

  public static class cursorCount_result implements org.apache.thrift.TBase<cursorCount_result, cursorCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<cursorCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cursorCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cursorCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cursorCount_resultTupleSchemeFactory());
    }

    public int success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cursorCount_result.class, metaDataMap);
    }

    public cursorCount_result() {
    }

    public cursorCount_result(
      int success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cursorCount_result(cursorCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public cursorCount_result deepCopy() {
      return new cursorCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.dbe = null;
      this.re = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public cursorCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public cursorCount_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public cursorCount_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cursorCount_result)
        return this.equals((cursorCount_result)that);
      return false;
    }

    public boolean equals(cursorCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(cursorCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cursorCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cursorCount_resultStandardSchemeFactory implements SchemeFactory {
      public cursorCount_resultStandardScheme getScheme() {
        return new cursorCount_resultStandardScheme();
      }
    }

    private static class cursorCount_resultStandardScheme extends StandardScheme<cursorCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cursorCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cursorCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cursorCount_resultTupleSchemeFactory implements SchemeFactory {
      public cursorCount_resultTupleScheme getScheme() {
        return new cursorCount_resultTupleScheme();
      }
    }

    private static class cursorCount_resultTupleScheme extends TupleScheme<cursorCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cursorCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cursorCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class openJoinCursor_args implements org.apache.thrift.TBase<openJoinCursor_args, openJoinCursor_args._Fields>, java.io.Serializable, Cloneable, Comparable<openJoinCursor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openJoinCursor_args");

    private static final org.apache.thrift.protocol.TField PDB_FIELD_DESC = new org.apache.thrift.protocol.TField("pdb", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SCURSORS_FIELD_DESC = new org.apache.thrift.protocol.TField("scursors", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField SORT_CURSORS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortCursors", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openJoinCursor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openJoinCursor_argsTupleSchemeFactory());
    }

    public TDatabase pdb; // required
    public List<TCursor> scursors; // required
    public boolean sortCursors; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PDB((short)1, "pdb"),
      SCURSORS((short)2, "scursors"),
      SORT_CURSORS((short)3, "sortCursors");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PDB
            return PDB;
          case 2: // SCURSORS
            return SCURSORS;
          case 3: // SORT_CURSORS
            return SORT_CURSORS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SORTCURSORS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PDB, new org.apache.thrift.meta_data.FieldMetaData("pdb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.SCURSORS, new org.apache.thrift.meta_data.FieldMetaData("scursors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCursor.class))));
      tmpMap.put(_Fields.SORT_CURSORS, new org.apache.thrift.meta_data.FieldMetaData("sortCursors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openJoinCursor_args.class, metaDataMap);
    }

    public openJoinCursor_args() {
    }

    public openJoinCursor_args(
      TDatabase pdb,
      List<TCursor> scursors,
      boolean sortCursors)
    {
      this();
      this.pdb = pdb;
      this.scursors = scursors;
      this.sortCursors = sortCursors;
      setSortCursorsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openJoinCursor_args(openJoinCursor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPdb()) {
        this.pdb = new TDatabase(other.pdb);
      }
      if (other.isSetScursors()) {
        List<TCursor> __this__scursors = new ArrayList<TCursor>(other.scursors.size());
        for (TCursor other_element : other.scursors) {
          __this__scursors.add(new TCursor(other_element));
        }
        this.scursors = __this__scursors;
      }
      this.sortCursors = other.sortCursors;
    }

    public openJoinCursor_args deepCopy() {
      return new openJoinCursor_args(this);
    }

    @Override
    public void clear() {
      this.pdb = null;
      this.scursors = null;
      setSortCursorsIsSet(false);
      this.sortCursors = false;
    }

    public TDatabase getPdb() {
      return this.pdb;
    }

    public openJoinCursor_args setPdb(TDatabase pdb) {
      this.pdb = pdb;
      return this;
    }

    public void unsetPdb() {
      this.pdb = null;
    }

    /** Returns true if field pdb is set (has been assigned a value) and false otherwise */
    public boolean isSetPdb() {
      return this.pdb != null;
    }

    public void setPdbIsSet(boolean value) {
      if (!value) {
        this.pdb = null;
      }
    }

    public int getScursorsSize() {
      return (this.scursors == null) ? 0 : this.scursors.size();
    }

    public java.util.Iterator<TCursor> getScursorsIterator() {
      return (this.scursors == null) ? null : this.scursors.iterator();
    }

    public void addToScursors(TCursor elem) {
      if (this.scursors == null) {
        this.scursors = new ArrayList<TCursor>();
      }
      this.scursors.add(elem);
    }

    public List<TCursor> getScursors() {
      return this.scursors;
    }

    public openJoinCursor_args setScursors(List<TCursor> scursors) {
      this.scursors = scursors;
      return this;
    }

    public void unsetScursors() {
      this.scursors = null;
    }

    /** Returns true if field scursors is set (has been assigned a value) and false otherwise */
    public boolean isSetScursors() {
      return this.scursors != null;
    }

    public void setScursorsIsSet(boolean value) {
      if (!value) {
        this.scursors = null;
      }
    }

    public boolean isSortCursors() {
      return this.sortCursors;
    }

    public openJoinCursor_args setSortCursors(boolean sortCursors) {
      this.sortCursors = sortCursors;
      setSortCursorsIsSet(true);
      return this;
    }

    public void unsetSortCursors() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTCURSORS_ISSET_ID);
    }

    /** Returns true if field sortCursors is set (has been assigned a value) and false otherwise */
    public boolean isSetSortCursors() {
      return EncodingUtils.testBit(__isset_bitfield, __SORTCURSORS_ISSET_ID);
    }

    public void setSortCursorsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTCURSORS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PDB:
        if (value == null) {
          unsetPdb();
        } else {
          setPdb((TDatabase)value);
        }
        break;

      case SCURSORS:
        if (value == null) {
          unsetScursors();
        } else {
          setScursors((List<TCursor>)value);
        }
        break;

      case SORT_CURSORS:
        if (value == null) {
          unsetSortCursors();
        } else {
          setSortCursors((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PDB:
        return getPdb();

      case SCURSORS:
        return getScursors();

      case SORT_CURSORS:
        return Boolean.valueOf(isSortCursors());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PDB:
        return isSetPdb();
      case SCURSORS:
        return isSetScursors();
      case SORT_CURSORS:
        return isSetSortCursors();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openJoinCursor_args)
        return this.equals((openJoinCursor_args)that);
      return false;
    }

    public boolean equals(openJoinCursor_args that) {
      if (that == null)
        return false;

      boolean this_present_pdb = true && this.isSetPdb();
      boolean that_present_pdb = true && that.isSetPdb();
      if (this_present_pdb || that_present_pdb) {
        if (!(this_present_pdb && that_present_pdb))
          return false;
        if (!this.pdb.equals(that.pdb))
          return false;
      }

      boolean this_present_scursors = true && this.isSetScursors();
      boolean that_present_scursors = true && that.isSetScursors();
      if (this_present_scursors || that_present_scursors) {
        if (!(this_present_scursors && that_present_scursors))
          return false;
        if (!this.scursors.equals(that.scursors))
          return false;
      }

      boolean this_present_sortCursors = true;
      boolean that_present_sortCursors = true;
      if (this_present_sortCursors || that_present_sortCursors) {
        if (!(this_present_sortCursors && that_present_sortCursors))
          return false;
        if (this.sortCursors != that.sortCursors)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pdb = true && (isSetPdb());
      list.add(present_pdb);
      if (present_pdb)
        list.add(pdb);

      boolean present_scursors = true && (isSetScursors());
      list.add(present_scursors);
      if (present_scursors)
        list.add(scursors);

      boolean present_sortCursors = true;
      list.add(present_sortCursors);
      if (present_sortCursors)
        list.add(sortCursors);

      return list.hashCode();
    }

    @Override
    public int compareTo(openJoinCursor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPdb()).compareTo(other.isSetPdb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPdb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pdb, other.pdb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScursors()).compareTo(other.isSetScursors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScursors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scursors, other.scursors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortCursors()).compareTo(other.isSetSortCursors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortCursors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortCursors, other.sortCursors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openJoinCursor_args(");
      boolean first = true;

      sb.append("pdb:");
      if (this.pdb == null) {
        sb.append("null");
      } else {
        sb.append(this.pdb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scursors:");
      if (this.scursors == null) {
        sb.append("null");
      } else {
        sb.append(this.scursors);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortCursors:");
      sb.append(this.sortCursors);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pdb != null) {
        pdb.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openJoinCursor_argsStandardSchemeFactory implements SchemeFactory {
      public openJoinCursor_argsStandardScheme getScheme() {
        return new openJoinCursor_argsStandardScheme();
      }
    }

    private static class openJoinCursor_argsStandardScheme extends StandardScheme<openJoinCursor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openJoinCursor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PDB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pdb = new TDatabase();
                struct.pdb.read(iprot);
                struct.setPdbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCURSORS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.scursors = new ArrayList<TCursor>(_list58.size);
                  TCursor _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new TCursor();
                    _elem59.read(iprot);
                    struct.scursors.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setScursorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SORT_CURSORS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.sortCursors = iprot.readBool();
                struct.setSortCursorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openJoinCursor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pdb != null) {
          oprot.writeFieldBegin(PDB_FIELD_DESC);
          struct.pdb.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.scursors != null) {
          oprot.writeFieldBegin(SCURSORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.scursors.size()));
            for (TCursor _iter61 : struct.scursors)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SORT_CURSORS_FIELD_DESC);
        oprot.writeBool(struct.sortCursors);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openJoinCursor_argsTupleSchemeFactory implements SchemeFactory {
      public openJoinCursor_argsTupleScheme getScheme() {
        return new openJoinCursor_argsTupleScheme();
      }
    }

    private static class openJoinCursor_argsTupleScheme extends TupleScheme<openJoinCursor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openJoinCursor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPdb()) {
          optionals.set(0);
        }
        if (struct.isSetScursors()) {
          optionals.set(1);
        }
        if (struct.isSetSortCursors()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPdb()) {
          struct.pdb.write(oprot);
        }
        if (struct.isSetScursors()) {
          {
            oprot.writeI32(struct.scursors.size());
            for (TCursor _iter62 : struct.scursors)
            {
              _iter62.write(oprot);
            }
          }
        }
        if (struct.isSetSortCursors()) {
          oprot.writeBool(struct.sortCursors);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openJoinCursor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pdb = new TDatabase();
          struct.pdb.read(iprot);
          struct.setPdbIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.scursors = new ArrayList<TCursor>(_list63.size);
            TCursor _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = new TCursor();
              _elem64.read(iprot);
              struct.scursors.add(_elem64);
            }
          }
          struct.setScursorsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sortCursors = iprot.readBool();
          struct.setSortCursorsIsSet(true);
        }
      }
    }

  }

  public static class openJoinCursor_result implements org.apache.thrift.TBase<openJoinCursor_result, openJoinCursor_result._Fields>, java.io.Serializable, Cloneable, Comparable<openJoinCursor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openJoinCursor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openJoinCursor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openJoinCursor_resultTupleSchemeFactory());
    }

    public TJoinCursor success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJoinCursor.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openJoinCursor_result.class, metaDataMap);
    }

    public openJoinCursor_result() {
    }

    public openJoinCursor_result(
      TJoinCursor success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openJoinCursor_result(openJoinCursor_result other) {
      if (other.isSetSuccess()) {
        this.success = new TJoinCursor(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public openJoinCursor_result deepCopy() {
      return new openJoinCursor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TJoinCursor getSuccess() {
      return this.success;
    }

    public openJoinCursor_result setSuccess(TJoinCursor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public openJoinCursor_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public openJoinCursor_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TJoinCursor)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openJoinCursor_result)
        return this.equals((openJoinCursor_result)that);
      return false;
    }

    public boolean equals(openJoinCursor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(openJoinCursor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openJoinCursor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openJoinCursor_resultStandardSchemeFactory implements SchemeFactory {
      public openJoinCursor_resultStandardScheme getScheme() {
        return new openJoinCursor_resultStandardScheme();
      }
    }

    private static class openJoinCursor_resultStandardScheme extends StandardScheme<openJoinCursor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openJoinCursor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TJoinCursor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openJoinCursor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openJoinCursor_resultTupleSchemeFactory implements SchemeFactory {
      public openJoinCursor_resultTupleScheme getScheme() {
        return new openJoinCursor_resultTupleScheme();
      }
    }

    private static class openJoinCursor_resultTupleScheme extends TupleScheme<openJoinCursor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openJoinCursor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openJoinCursor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TJoinCursor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class closeJoinCursorHandle_args implements org.apache.thrift.TBase<closeJoinCursorHandle_args, closeJoinCursorHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeJoinCursorHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeJoinCursorHandle_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeJoinCursorHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeJoinCursorHandle_argsTupleSchemeFactory());
    }

    public TJoinCursor cursor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJoinCursor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeJoinCursorHandle_args.class, metaDataMap);
    }

    public closeJoinCursorHandle_args() {
    }

    public closeJoinCursorHandle_args(
      TJoinCursor cursor)
    {
      this();
      this.cursor = cursor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeJoinCursorHandle_args(closeJoinCursorHandle_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TJoinCursor(other.cursor);
      }
    }

    public closeJoinCursorHandle_args deepCopy() {
      return new closeJoinCursorHandle_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
    }

    public TJoinCursor getCursor() {
      return this.cursor;
    }

    public closeJoinCursorHandle_args setCursor(TJoinCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TJoinCursor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeJoinCursorHandle_args)
        return this.equals((closeJoinCursorHandle_args)that);
      return false;
    }

    public boolean equals(closeJoinCursorHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeJoinCursorHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeJoinCursorHandle_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeJoinCursorHandle_argsStandardSchemeFactory implements SchemeFactory {
      public closeJoinCursorHandle_argsStandardScheme getScheme() {
        return new closeJoinCursorHandle_argsStandardScheme();
      }
    }

    private static class closeJoinCursorHandle_argsStandardScheme extends StandardScheme<closeJoinCursorHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeJoinCursorHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TJoinCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeJoinCursorHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeJoinCursorHandle_argsTupleSchemeFactory implements SchemeFactory {
      public closeJoinCursorHandle_argsTupleScheme getScheme() {
        return new closeJoinCursorHandle_argsTupleScheme();
      }
    }

    private static class closeJoinCursorHandle_argsTupleScheme extends TupleScheme<closeJoinCursorHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeJoinCursorHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeJoinCursorHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cursor = new TJoinCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
      }
    }

  }

  public static class closeJoinCursorHandle_result implements org.apache.thrift.TBase<closeJoinCursorHandle_result, closeJoinCursorHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeJoinCursorHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeJoinCursorHandle_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeJoinCursorHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeJoinCursorHandle_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeJoinCursorHandle_result.class, metaDataMap);
    }

    public closeJoinCursorHandle_result() {
    }

    public closeJoinCursorHandle_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeJoinCursorHandle_result(closeJoinCursorHandle_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public closeJoinCursorHandle_result deepCopy() {
      return new closeJoinCursorHandle_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public closeJoinCursorHandle_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public closeJoinCursorHandle_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeJoinCursorHandle_result)
        return this.equals((closeJoinCursorHandle_result)that);
      return false;
    }

    public boolean equals(closeJoinCursorHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeJoinCursorHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeJoinCursorHandle_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeJoinCursorHandle_resultStandardSchemeFactory implements SchemeFactory {
      public closeJoinCursorHandle_resultStandardScheme getScheme() {
        return new closeJoinCursorHandle_resultStandardScheme();
      }
    }

    private static class closeJoinCursorHandle_resultStandardScheme extends StandardScheme<closeJoinCursorHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeJoinCursorHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeJoinCursorHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeJoinCursorHandle_resultTupleSchemeFactory implements SchemeFactory {
      public closeJoinCursorHandle_resultTupleScheme getScheme() {
        return new closeJoinCursorHandle_resultTupleScheme();
      }
    }

    private static class closeJoinCursorHandle_resultTupleScheme extends TupleScheme<closeJoinCursorHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeJoinCursorHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeJoinCursorHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class joinCursorGet_args implements org.apache.thrift.TBase<joinCursorGet_args, joinCursorGet_args._Fields>, java.io.Serializable, Cloneable, Comparable<joinCursorGet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinCursorGet_args");

    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinCursorGet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinCursorGet_argsTupleSchemeFactory());
    }

    public TJoinCursor cursor; // required
    public TJoinCursorGetConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR((short)1, "cursor"),
      CONFIG((short)2, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR
            return CURSOR;
          case 2: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJoinCursor.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJoinCursorGetConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinCursorGet_args.class, metaDataMap);
    }

    public joinCursorGet_args() {
    }

    public joinCursorGet_args(
      TJoinCursor cursor,
      TJoinCursorGetConfig config)
    {
      this();
      this.cursor = cursor;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinCursorGet_args(joinCursorGet_args other) {
      if (other.isSetCursor()) {
        this.cursor = new TJoinCursor(other.cursor);
      }
      if (other.isSetConfig()) {
        this.config = new TJoinCursorGetConfig(other.config);
      }
    }

    public joinCursorGet_args deepCopy() {
      return new joinCursorGet_args(this);
    }

    @Override
    public void clear() {
      this.cursor = null;
      this.config = null;
    }

    public TJoinCursor getCursor() {
      return this.cursor;
    }

    public joinCursorGet_args setCursor(TJoinCursor cursor) {
      this.cursor = cursor;
      return this;
    }

    public void unsetCursor() {
      this.cursor = null;
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return this.cursor != null;
    }

    public void setCursorIsSet(boolean value) {
      if (!value) {
        this.cursor = null;
      }
    }

    public TJoinCursorGetConfig getConfig() {
      return this.config;
    }

    public joinCursorGet_args setConfig(TJoinCursorGetConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((TJoinCursor)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TJoinCursorGetConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR:
        return getCursor();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR:
        return isSetCursor();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinCursorGet_args)
        return this.equals((joinCursorGet_args)that);
      return false;
    }

    public boolean equals(joinCursorGet_args that) {
      if (that == null)
        return false;

      boolean this_present_cursor = true && this.isSetCursor();
      boolean that_present_cursor = true && that.isSetCursor();
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (!this.cursor.equals(that.cursor))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursor = true && (isSetCursor());
      list.add(present_cursor);
      if (present_cursor)
        list.add(cursor);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(joinCursorGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinCursorGet_args(");
      boolean first = true;

      sb.append("cursor:");
      if (this.cursor == null) {
        sb.append("null");
      } else {
        sb.append(this.cursor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cursor != null) {
        cursor.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinCursorGet_argsStandardSchemeFactory implements SchemeFactory {
      public joinCursorGet_argsStandardScheme getScheme() {
        return new joinCursorGet_argsStandardScheme();
      }
    }

    private static class joinCursorGet_argsStandardScheme extends StandardScheme<joinCursorGet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinCursorGet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cursor = new TJoinCursor();
                struct.cursor.read(iprot);
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TJoinCursorGetConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinCursorGet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cursor != null) {
          oprot.writeFieldBegin(CURSOR_FIELD_DESC);
          struct.cursor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinCursorGet_argsTupleSchemeFactory implements SchemeFactory {
      public joinCursorGet_argsTupleScheme getScheme() {
        return new joinCursorGet_argsTupleScheme();
      }
    }

    private static class joinCursorGet_argsTupleScheme extends TupleScheme<joinCursorGet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinCursorGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursor()) {
          optionals.set(0);
        }
        if (struct.isSetConfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCursor()) {
          struct.cursor.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinCursorGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cursor = new TJoinCursor();
          struct.cursor.read(iprot);
          struct.setCursorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.config = new TJoinCursorGetConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class joinCursorGet_result implements org.apache.thrift.TBase<joinCursorGet_result, joinCursorGet_result._Fields>, java.io.Serializable, Cloneable, Comparable<joinCursorGet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinCursorGet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinCursorGet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinCursorGet_resultTupleSchemeFactory());
    }

    public TGetResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinCursorGet_result.class, metaDataMap);
    }

    public joinCursorGet_result() {
    }

    public joinCursorGet_result(
      TGetResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinCursorGet_result(joinCursorGet_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public joinCursorGet_result deepCopy() {
      return new joinCursorGet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TGetResult getSuccess() {
      return this.success;
    }

    public joinCursorGet_result setSuccess(TGetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public joinCursorGet_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public joinCursorGet_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinCursorGet_result)
        return this.equals((joinCursorGet_result)that);
      return false;
    }

    public boolean equals(joinCursorGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(joinCursorGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinCursorGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinCursorGet_resultStandardSchemeFactory implements SchemeFactory {
      public joinCursorGet_resultStandardScheme getScheme() {
        return new joinCursorGet_resultStandardScheme();
      }
    }

    private static class joinCursorGet_resultStandardScheme extends StandardScheme<joinCursorGet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinCursorGet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinCursorGet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinCursorGet_resultTupleSchemeFactory implements SchemeFactory {
      public joinCursorGet_resultTupleScheme getScheme() {
        return new joinCursorGet_resultTupleScheme();
      }
    }

    private static class joinCursorGet_resultTupleScheme extends TupleScheme<joinCursorGet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinCursorGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinCursorGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TGetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class beginTransaction_args implements org.apache.thrift.TBase<beginTransaction_args, beginTransaction_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginTransaction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginTransaction_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginTransaction_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public TTransaction parent; // required
    public TTransactionConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      PARENT((short)2, "parent"),
      CONFIG((short)3, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // PARENT
            return PARENT;
          case 3: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransactionConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginTransaction_args.class, metaDataMap);
    }

    public beginTransaction_args() {
    }

    public beginTransaction_args(
      TEnvironment env,
      TTransaction parent,
      TTransactionConfig config)
    {
      this();
      this.env = env;
      this.parent = parent;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginTransaction_args(beginTransaction_args other) {
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      if (other.isSetParent()) {
        this.parent = new TTransaction(other.parent);
      }
      if (other.isSetConfig()) {
        this.config = new TTransactionConfig(other.config);
      }
    }

    public beginTransaction_args deepCopy() {
      return new beginTransaction_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.parent = null;
      this.config = null;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public beginTransaction_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public TTransaction getParent() {
      return this.parent;
    }

    public beginTransaction_args setParent(TTransaction parent) {
      this.parent = parent;
      return this;
    }

    public void unsetParent() {
      this.parent = null;
    }

    /** Returns true if field parent is set (has been assigned a value) and false otherwise */
    public boolean isSetParent() {
      return this.parent != null;
    }

    public void setParentIsSet(boolean value) {
      if (!value) {
        this.parent = null;
      }
    }

    public TTransactionConfig getConfig() {
      return this.config;
    }

    public beginTransaction_args setConfig(TTransactionConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case PARENT:
        if (value == null) {
          unsetParent();
        } else {
          setParent((TTransaction)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TTransactionConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case PARENT:
        return getParent();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case PARENT:
        return isSetParent();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginTransaction_args)
        return this.equals((beginTransaction_args)that);
      return false;
    }

    public boolean equals(beginTransaction_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_parent = true && this.isSetParent();
      boolean that_present_parent = true && that.isSetParent();
      if (this_present_parent || that_present_parent) {
        if (!(this_present_parent && that_present_parent))
          return false;
        if (!this.parent.equals(that.parent))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_parent = true && (isSetParent());
      list.add(present_parent);
      if (present_parent)
        list.add(parent);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(beginTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginTransaction_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parent:");
      if (this.parent == null) {
        sb.append("null");
      } else {
        sb.append(this.parent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
      if (parent != null) {
        parent.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public beginTransaction_argsStandardScheme getScheme() {
        return new beginTransaction_argsStandardScheme();
      }
    }

    private static class beginTransaction_argsStandardScheme extends StandardScheme<beginTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parent = new TTransaction();
                struct.parent.read(iprot);
                struct.setParentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TTransactionConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parent != null) {
          oprot.writeFieldBegin(PARENT_FIELD_DESC);
          struct.parent.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public beginTransaction_argsTupleScheme getScheme() {
        return new beginTransaction_argsTupleScheme();
      }
    }

    private static class beginTransaction_argsTupleScheme extends TupleScheme<beginTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetParent()) {
          optionals.set(1);
        }
        if (struct.isSetConfig()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetParent()) {
          struct.parent.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parent = new TTransaction();
          struct.parent.read(iprot);
          struct.setParentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.config = new TTransactionConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class beginTransaction_result implements org.apache.thrift.TBase<beginTransaction_result, beginTransaction_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginTransaction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginTransaction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginTransaction_resultTupleSchemeFactory());
    }

    public TTransaction success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginTransaction_result.class, metaDataMap);
    }

    public beginTransaction_result() {
    }

    public beginTransaction_result(
      TTransaction success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginTransaction_result(beginTransaction_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTransaction(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public beginTransaction_result deepCopy() {
      return new beginTransaction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TTransaction getSuccess() {
      return this.success;
    }

    public beginTransaction_result setSuccess(TTransaction success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public beginTransaction_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public beginTransaction_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTransaction)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginTransaction_result)
        return this.equals((beginTransaction_result)that);
      return false;
    }

    public boolean equals(beginTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(beginTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginTransaction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public beginTransaction_resultStandardScheme getScheme() {
        return new beginTransaction_resultStandardScheme();
      }
    }

    private static class beginTransaction_resultStandardScheme extends StandardScheme<beginTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTransaction();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public beginTransaction_resultTupleScheme getScheme() {
        return new beginTransaction_resultTupleScheme();
      }
    }

    private static class beginTransaction_resultTupleScheme extends TupleScheme<beginTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TTransaction();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class txnAbort_args implements org.apache.thrift.TBase<txnAbort_args, txnAbort_args._Fields>, java.io.Serializable, Cloneable, Comparable<txnAbort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnAbort_args");

    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnAbort_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnAbort_argsTupleSchemeFactory());
    }

    public TTransaction txn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TXN((short)1, "txn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TXN
            return TXN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnAbort_args.class, metaDataMap);
    }

    public txnAbort_args() {
    }

    public txnAbort_args(
      TTransaction txn)
    {
      this();
      this.txn = txn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnAbort_args(txnAbort_args other) {
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
    }

    public txnAbort_args deepCopy() {
      return new txnAbort_args(this);
    }

    @Override
    public void clear() {
      this.txn = null;
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public txnAbort_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TXN:
        return getTxn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TXN:
        return isSetTxn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnAbort_args)
        return this.equals((txnAbort_args)that);
      return false;
    }

    public boolean equals(txnAbort_args that) {
      if (that == null)
        return false;

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      return list.hashCode();
    }

    @Override
    public int compareTo(txnAbort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnAbort_args(");
      boolean first = true;

      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnAbort_argsStandardSchemeFactory implements SchemeFactory {
      public txnAbort_argsStandardScheme getScheme() {
        return new txnAbort_argsStandardScheme();
      }
    }

    private static class txnAbort_argsStandardScheme extends StandardScheme<txnAbort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnAbort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnAbort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnAbort_argsTupleSchemeFactory implements SchemeFactory {
      public txnAbort_argsTupleScheme getScheme() {
        return new txnAbort_argsTupleScheme();
      }
    }

    private static class txnAbort_argsTupleScheme extends TupleScheme<txnAbort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnAbort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxn()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnAbort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
      }
    }

  }

  public static class txnAbort_result implements org.apache.thrift.TBase<txnAbort_result, txnAbort_result._Fields>, java.io.Serializable, Cloneable, Comparable<txnAbort_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnAbort_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnAbort_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnAbort_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnAbort_result.class, metaDataMap);
    }

    public txnAbort_result() {
    }

    public txnAbort_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnAbort_result(txnAbort_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public txnAbort_result deepCopy() {
      return new txnAbort_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public txnAbort_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public txnAbort_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnAbort_result)
        return this.equals((txnAbort_result)that);
      return false;
    }

    public boolean equals(txnAbort_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(txnAbort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnAbort_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnAbort_resultStandardSchemeFactory implements SchemeFactory {
      public txnAbort_resultStandardScheme getScheme() {
        return new txnAbort_resultStandardScheme();
      }
    }

    private static class txnAbort_resultStandardScheme extends StandardScheme<txnAbort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnAbort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnAbort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnAbort_resultTupleSchemeFactory implements SchemeFactory {
      public txnAbort_resultTupleScheme getScheme() {
        return new txnAbort_resultTupleScheme();
      }
    }

    private static class txnAbort_resultTupleScheme extends TupleScheme<txnAbort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnAbort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnAbort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class txnCommit_args implements org.apache.thrift.TBase<txnCommit_args, txnCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<txnCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnCommit_args");

    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DURABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("durability", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnCommit_argsTupleSchemeFactory());
    }

    public TTransaction txn; // required
    /**
     * 
     * @see TDurabilityPolicy
     */
    public TDurabilityPolicy durability; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TXN((short)1, "txn"),
      /**
       * 
       * @see TDurabilityPolicy
       */
      DURABILITY((short)2, "durability");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TXN
            return TXN;
          case 2: // DURABILITY
            return DURABILITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.DURABILITY, new org.apache.thrift.meta_data.FieldMetaData("durability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDurabilityPolicy.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnCommit_args.class, metaDataMap);
    }

    public txnCommit_args() {
    }

    public txnCommit_args(
      TTransaction txn,
      TDurabilityPolicy durability)
    {
      this();
      this.txn = txn;
      this.durability = durability;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnCommit_args(txnCommit_args other) {
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetDurability()) {
        this.durability = other.durability;
      }
    }

    public txnCommit_args deepCopy() {
      return new txnCommit_args(this);
    }

    @Override
    public void clear() {
      this.txn = null;
      this.durability = null;
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public txnCommit_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    /**
     * 
     * @see TDurabilityPolicy
     */
    public TDurabilityPolicy getDurability() {
      return this.durability;
    }

    /**
     * 
     * @see TDurabilityPolicy
     */
    public txnCommit_args setDurability(TDurabilityPolicy durability) {
      this.durability = durability;
      return this;
    }

    public void unsetDurability() {
      this.durability = null;
    }

    /** Returns true if field durability is set (has been assigned a value) and false otherwise */
    public boolean isSetDurability() {
      return this.durability != null;
    }

    public void setDurabilityIsSet(boolean value) {
      if (!value) {
        this.durability = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case DURABILITY:
        if (value == null) {
          unsetDurability();
        } else {
          setDurability((TDurabilityPolicy)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TXN:
        return getTxn();

      case DURABILITY:
        return getDurability();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TXN:
        return isSetTxn();
      case DURABILITY:
        return isSetDurability();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnCommit_args)
        return this.equals((txnCommit_args)that);
      return false;
    }

    public boolean equals(txnCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_durability = true && this.isSetDurability();
      boolean that_present_durability = true && that.isSetDurability();
      if (this_present_durability || that_present_durability) {
        if (!(this_present_durability && that_present_durability))
          return false;
        if (!this.durability.equals(that.durability))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_durability = true && (isSetDurability());
      list.add(present_durability);
      if (present_durability)
        list.add(durability.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(txnCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDurability()).compareTo(other.isSetDurability());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDurability()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, other.durability);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnCommit_args(");
      boolean first = true;

      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("durability:");
      if (this.durability == null) {
        sb.append("null");
      } else {
        sb.append(this.durability);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnCommit_argsStandardSchemeFactory implements SchemeFactory {
      public txnCommit_argsStandardScheme getScheme() {
        return new txnCommit_argsStandardScheme();
      }
    }

    private static class txnCommit_argsStandardScheme extends StandardScheme<txnCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DURABILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.durability = com.sleepycat.thrift.TDurabilityPolicy.findByValue(iprot.readI32());
                struct.setDurabilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.durability != null) {
          oprot.writeFieldBegin(DURABILITY_FIELD_DESC);
          oprot.writeI32(struct.durability.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnCommit_argsTupleSchemeFactory implements SchemeFactory {
      public txnCommit_argsTupleScheme getScheme() {
        return new txnCommit_argsTupleScheme();
      }
    }

    private static class txnCommit_argsTupleScheme extends TupleScheme<txnCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxn()) {
          optionals.set(0);
        }
        if (struct.isSetDurability()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetDurability()) {
          oprot.writeI32(struct.durability.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(1)) {
          struct.durability = com.sleepycat.thrift.TDurabilityPolicy.findByValue(iprot.readI32());
          struct.setDurabilityIsSet(true);
        }
      }
    }

  }

  public static class txnCommit_result implements org.apache.thrift.TBase<txnCommit_result, txnCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<txnCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnCommit_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnCommit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnCommit_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnCommit_result.class, metaDataMap);
    }

    public txnCommit_result() {
    }

    public txnCommit_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnCommit_result(txnCommit_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public txnCommit_result deepCopy() {
      return new txnCommit_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public txnCommit_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public txnCommit_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnCommit_result)
        return this.equals((txnCommit_result)that);
      return false;
    }

    public boolean equals(txnCommit_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(txnCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnCommit_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnCommit_resultStandardSchemeFactory implements SchemeFactory {
      public txnCommit_resultStandardScheme getScheme() {
        return new txnCommit_resultStandardScheme();
      }
    }

    private static class txnCommit_resultStandardScheme extends StandardScheme<txnCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnCommit_resultTupleSchemeFactory implements SchemeFactory {
      public txnCommit_resultTupleScheme getScheme() {
        return new txnCommit_resultTupleScheme();
      }
    }

    private static class txnCommit_resultTupleScheme extends TupleScheme<txnCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class txnGetPriority_args implements org.apache.thrift.TBase<txnGetPriority_args, txnGetPriority_args._Fields>, java.io.Serializable, Cloneable, Comparable<txnGetPriority_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnGetPriority_args");

    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnGetPriority_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnGetPriority_argsTupleSchemeFactory());
    }

    public TTransaction txn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TXN((short)1, "txn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TXN
            return TXN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnGetPriority_args.class, metaDataMap);
    }

    public txnGetPriority_args() {
    }

    public txnGetPriority_args(
      TTransaction txn)
    {
      this();
      this.txn = txn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnGetPriority_args(txnGetPriority_args other) {
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
    }

    public txnGetPriority_args deepCopy() {
      return new txnGetPriority_args(this);
    }

    @Override
    public void clear() {
      this.txn = null;
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public txnGetPriority_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TXN:
        return getTxn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TXN:
        return isSetTxn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnGetPriority_args)
        return this.equals((txnGetPriority_args)that);
      return false;
    }

    public boolean equals(txnGetPriority_args that) {
      if (that == null)
        return false;

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      return list.hashCode();
    }

    @Override
    public int compareTo(txnGetPriority_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnGetPriority_args(");
      boolean first = true;

      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnGetPriority_argsStandardSchemeFactory implements SchemeFactory {
      public txnGetPriority_argsStandardScheme getScheme() {
        return new txnGetPriority_argsStandardScheme();
      }
    }

    private static class txnGetPriority_argsStandardScheme extends StandardScheme<txnGetPriority_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnGetPriority_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnGetPriority_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnGetPriority_argsTupleSchemeFactory implements SchemeFactory {
      public txnGetPriority_argsTupleScheme getScheme() {
        return new txnGetPriority_argsTupleScheme();
      }
    }

    private static class txnGetPriority_argsTupleScheme extends TupleScheme<txnGetPriority_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnGetPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxn()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnGetPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
      }
    }

  }

  public static class txnGetPriority_result implements org.apache.thrift.TBase<txnGetPriority_result, txnGetPriority_result._Fields>, java.io.Serializable, Cloneable, Comparable<txnGetPriority_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnGetPriority_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnGetPriority_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnGetPriority_resultTupleSchemeFactory());
    }

    public int success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnGetPriority_result.class, metaDataMap);
    }

    public txnGetPriority_result() {
    }

    public txnGetPriority_result(
      int success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnGetPriority_result(txnGetPriority_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public txnGetPriority_result deepCopy() {
      return new txnGetPriority_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.dbe = null;
      this.re = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public txnGetPriority_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public txnGetPriority_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public txnGetPriority_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnGetPriority_result)
        return this.equals((txnGetPriority_result)that);
      return false;
    }

    public boolean equals(txnGetPriority_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(txnGetPriority_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnGetPriority_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnGetPriority_resultStandardSchemeFactory implements SchemeFactory {
      public txnGetPriority_resultStandardScheme getScheme() {
        return new txnGetPriority_resultStandardScheme();
      }
    }

    private static class txnGetPriority_resultStandardScheme extends StandardScheme<txnGetPriority_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnGetPriority_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnGetPriority_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnGetPriority_resultTupleSchemeFactory implements SchemeFactory {
      public txnGetPriority_resultTupleScheme getScheme() {
        return new txnGetPriority_resultTupleScheme();
      }
    }

    private static class txnGetPriority_resultTupleScheme extends TupleScheme<txnGetPriority_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnGetPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnGetPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class txnSetPriority_args implements org.apache.thrift.TBase<txnSetPriority_args, txnSetPriority_args._Fields>, java.io.Serializable, Cloneable, Comparable<txnSetPriority_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnSetPriority_args");

    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnSetPriority_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnSetPriority_argsTupleSchemeFactory());
    }

    public TTransaction txn; // required
    public int priority; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TXN((short)1, "txn"),
      PRIORITY((short)2, "priority");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TXN
            return TXN;
          case 2: // PRIORITY
            return PRIORITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIORITY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnSetPriority_args.class, metaDataMap);
    }

    public txnSetPriority_args() {
    }

    public txnSetPriority_args(
      TTransaction txn,
      int priority)
    {
      this();
      this.txn = txn;
      this.priority = priority;
      setPriorityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnSetPriority_args(txnSetPriority_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      this.priority = other.priority;
    }

    public txnSetPriority_args deepCopy() {
      return new txnSetPriority_args(this);
    }

    @Override
    public void clear() {
      this.txn = null;
      setPriorityIsSet(false);
      this.priority = 0;
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public txnSetPriority_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public int getPriority() {
      return this.priority;
    }

    public txnSetPriority_args setPriority(int priority) {
      this.priority = priority;
      setPriorityIsSet(true);
      return this;
    }

    public void unsetPriority() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    /** Returns true if field priority is set (has been assigned a value) and false otherwise */
    public boolean isSetPriority() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    public void setPriorityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case PRIORITY:
        if (value == null) {
          unsetPriority();
        } else {
          setPriority((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TXN:
        return getTxn();

      case PRIORITY:
        return Integer.valueOf(getPriority());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TXN:
        return isSetTxn();
      case PRIORITY:
        return isSetPriority();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnSetPriority_args)
        return this.equals((txnSetPriority_args)that);
      return false;
    }

    public boolean equals(txnSetPriority_args that) {
      if (that == null)
        return false;

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_priority = true;
      boolean that_present_priority = true;
      if (this_present_priority || that_present_priority) {
        if (!(this_present_priority && that_present_priority))
          return false;
        if (this.priority != that.priority)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_priority = true;
      list.add(present_priority);
      if (present_priority)
        list.add(priority);

      return list.hashCode();
    }

    @Override
    public int compareTo(txnSetPriority_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriority()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnSetPriority_args(");
      boolean first = true;

      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnSetPriority_argsStandardSchemeFactory implements SchemeFactory {
      public txnSetPriority_argsStandardScheme getScheme() {
        return new txnSetPriority_argsStandardScheme();
      }
    }

    private static class txnSetPriority_argsStandardScheme extends StandardScheme<txnSetPriority_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnSetPriority_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIORITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priority = iprot.readI32();
                struct.setPriorityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnSetPriority_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnSetPriority_argsTupleSchemeFactory implements SchemeFactory {
      public txnSetPriority_argsTupleScheme getScheme() {
        return new txnSetPriority_argsTupleScheme();
      }
    }

    private static class txnSetPriority_argsTupleScheme extends TupleScheme<txnSetPriority_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnSetPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxn()) {
          optionals.set(0);
        }
        if (struct.isSetPriority()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetPriority()) {
          oprot.writeI32(struct.priority);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnSetPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(1)) {
          struct.priority = iprot.readI32();
          struct.setPriorityIsSet(true);
        }
      }
    }

  }

  public static class txnSetPriority_result implements org.apache.thrift.TBase<txnSetPriority_result, txnSetPriority_result._Fields>, java.io.Serializable, Cloneable, Comparable<txnSetPriority_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("txnSetPriority_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new txnSetPriority_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new txnSetPriority_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(txnSetPriority_result.class, metaDataMap);
    }

    public txnSetPriority_result() {
    }

    public txnSetPriority_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public txnSetPriority_result(txnSetPriority_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public txnSetPriority_result deepCopy() {
      return new txnSetPriority_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public txnSetPriority_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public txnSetPriority_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof txnSetPriority_result)
        return this.equals((txnSetPriority_result)that);
      return false;
    }

    public boolean equals(txnSetPriority_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(txnSetPriority_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("txnSetPriority_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class txnSetPriority_resultStandardSchemeFactory implements SchemeFactory {
      public txnSetPriority_resultStandardScheme getScheme() {
        return new txnSetPriority_resultStandardScheme();
      }
    }

    private static class txnSetPriority_resultStandardScheme extends StandardScheme<txnSetPriority_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, txnSetPriority_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, txnSetPriority_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class txnSetPriority_resultTupleSchemeFactory implements SchemeFactory {
      public txnSetPriority_resultTupleScheme getScheme() {
        return new txnSetPriority_resultTupleScheme();
      }
    }

    private static class txnSetPriority_resultTupleScheme extends TupleScheme<txnSetPriority_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, txnSetPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, txnSetPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class openSequence_args implements org.apache.thrift.TBase<openSequence_args, openSequence_args._Fields>, java.io.Serializable, Cloneable, Comparable<openSequence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSequence_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSequence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSequence_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public TDbt key; // required
    public TSequenceConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      KEY((short)3, "key"),
      CONFIG((short)4, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // KEY
            return KEY;
          case 4: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSequenceConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSequence_args.class, metaDataMap);
    }

    public openSequence_args() {
    }

    public openSequence_args(
      TDatabase db,
      TTransaction txn,
      TDbt key,
      TSequenceConfig config)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.key = key;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSequence_args(openSequence_args other) {
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetKey()) {
        this.key = new TDbt(other.key);
      }
      if (other.isSetConfig()) {
        this.config = new TSequenceConfig(other.config);
      }
    }

    public openSequence_args deepCopy() {
      return new openSequence_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.key = null;
      this.config = null;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public openSequence_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public openSequence_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TDbt getKey() {
      return this.key;
    }

    public openSequence_args setKey(TDbt key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public TSequenceConfig getConfig() {
      return this.config;
    }

    public openSequence_args setConfig(TSequenceConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((TDbt)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TSequenceConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case KEY:
        return getKey();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case KEY:
        return isSetKey();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSequence_args)
        return this.equals((openSequence_args)that);
      return false;
    }

    public boolean equals(openSequence_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(openSequence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSequence_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (key != null) {
        key.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSequence_argsStandardSchemeFactory implements SchemeFactory {
      public openSequence_argsStandardScheme getScheme() {
        return new openSequence_argsStandardScheme();
      }
    }

    private static class openSequence_argsStandardScheme extends StandardScheme<openSequence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSequence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.key = new TDbt();
                struct.key.read(iprot);
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TSequenceConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSequence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          struct.key.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSequence_argsTupleSchemeFactory implements SchemeFactory {
      public openSequence_argsTupleScheme getScheme() {
        return new openSequence_argsTupleScheme();
      }
    }

    private static class openSequence_argsTupleScheme extends TupleScheme<openSequence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSequence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetConfig()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetKey()) {
          struct.key.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSequence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = new TDbt();
          struct.key.read(iprot);
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.config = new TSequenceConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class openSequence_result implements org.apache.thrift.TBase<openSequence_result, openSequence_result._Fields>, java.io.Serializable, Cloneable, Comparable<openSequence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSequence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSequence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSequence_resultTupleSchemeFactory());
    }

    public TSequence success; // required
    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IUE((short)1, "iue"),
      DBE((short)2, "dbe"),
      RE((short)3, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IUE
            return IUE;
          case 2: // DBE
            return DBE;
          case 3: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSequence.class)));
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSequence_result.class, metaDataMap);
    }

    public openSequence_result() {
    }

    public openSequence_result(
      TSequence success,
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSequence_result(openSequence_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSequence(other.success);
      }
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public openSequence_result deepCopy() {
      return new openSequence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TSequence getSuccess() {
      return this.success;
    }

    public openSequence_result setSuccess(TSequence success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public openSequence_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public openSequence_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public openSequence_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSequence)value);
        }
        break;

      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSequence_result)
        return this.equals((openSequence_result)that);
      return false;
    }

    public boolean equals(openSequence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(openSequence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSequence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSequence_resultStandardSchemeFactory implements SchemeFactory {
      public openSequence_resultStandardScheme getScheme() {
        return new openSequence_resultStandardScheme();
      }
    }

    private static class openSequence_resultStandardScheme extends StandardScheme<openSequence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSequence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSequence();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSequence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSequence_resultTupleSchemeFactory implements SchemeFactory {
      public openSequence_resultTupleScheme getScheme() {
        return new openSequence_resultTupleScheme();
      }
    }

    private static class openSequence_resultTupleScheme extends TupleScheme<openSequence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSequence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIue()) {
          optionals.set(1);
        }
        if (struct.isSetDbe()) {
          optionals.set(2);
        }
        if (struct.isSetRe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSequence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TSequence();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class closeSequenceHandle_args implements org.apache.thrift.TBase<closeSequenceHandle_args, closeSequenceHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeSequenceHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeSequenceHandle_args");

    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeSequenceHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeSequenceHandle_argsTupleSchemeFactory());
    }

    public TSequence seq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEQ((short)1, "seq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEQ
            return SEQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSequence.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeSequenceHandle_args.class, metaDataMap);
    }

    public closeSequenceHandle_args() {
    }

    public closeSequenceHandle_args(
      TSequence seq)
    {
      this();
      this.seq = seq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeSequenceHandle_args(closeSequenceHandle_args other) {
      if (other.isSetSeq()) {
        this.seq = new TSequence(other.seq);
      }
    }

    public closeSequenceHandle_args deepCopy() {
      return new closeSequenceHandle_args(this);
    }

    @Override
    public void clear() {
      this.seq = null;
    }

    public TSequence getSeq() {
      return this.seq;
    }

    public closeSequenceHandle_args setSeq(TSequence seq) {
      this.seq = seq;
      return this;
    }

    public void unsetSeq() {
      this.seq = null;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return this.seq != null;
    }

    public void setSeqIsSet(boolean value) {
      if (!value) {
        this.seq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((TSequence)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEQ:
        return getSeq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEQ:
        return isSetSeq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeSequenceHandle_args)
        return this.equals((closeSequenceHandle_args)that);
      return false;
    }

    public boolean equals(closeSequenceHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_seq = true && this.isSetSeq();
      boolean that_present_seq = true && that.isSetSeq();
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (!this.seq.equals(that.seq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_seq = true && (isSetSeq());
      list.add(present_seq);
      if (present_seq)
        list.add(seq);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeSequenceHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeSequenceHandle_args(");
      boolean first = true;

      sb.append("seq:");
      if (this.seq == null) {
        sb.append("null");
      } else {
        sb.append(this.seq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seq != null) {
        seq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeSequenceHandle_argsStandardSchemeFactory implements SchemeFactory {
      public closeSequenceHandle_argsStandardScheme getScheme() {
        return new closeSequenceHandle_argsStandardScheme();
      }
    }

    private static class closeSequenceHandle_argsStandardScheme extends StandardScheme<closeSequenceHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeSequenceHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seq = new TSequence();
                struct.seq.read(iprot);
                struct.setSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeSequenceHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.seq != null) {
          oprot.writeFieldBegin(SEQ_FIELD_DESC);
          struct.seq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeSequenceHandle_argsTupleSchemeFactory implements SchemeFactory {
      public closeSequenceHandle_argsTupleScheme getScheme() {
        return new closeSequenceHandle_argsTupleScheme();
      }
    }

    private static class closeSequenceHandle_argsTupleScheme extends TupleScheme<closeSequenceHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeSequenceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSeq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSeq()) {
          struct.seq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeSequenceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.seq = new TSequence();
          struct.seq.read(iprot);
          struct.setSeqIsSet(true);
        }
      }
    }

  }

  public static class closeSequenceHandle_result implements org.apache.thrift.TBase<closeSequenceHandle_result, closeSequenceHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeSequenceHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeSequenceHandle_result");

    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeSequenceHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeSequenceHandle_resultTupleSchemeFactory());
    }

    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeSequenceHandle_result.class, metaDataMap);
    }

    public closeSequenceHandle_result() {
    }

    public closeSequenceHandle_result(
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeSequenceHandle_result(closeSequenceHandle_result other) {
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public closeSequenceHandle_result deepCopy() {
      return new closeSequenceHandle_result(this);
    }

    @Override
    public void clear() {
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public closeSequenceHandle_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public closeSequenceHandle_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeSequenceHandle_result)
        return this.equals((closeSequenceHandle_result)that);
      return false;
    }

    public boolean equals(closeSequenceHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeSequenceHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeSequenceHandle_result(");
      boolean first = true;

      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeSequenceHandle_resultStandardSchemeFactory implements SchemeFactory {
      public closeSequenceHandle_resultStandardScheme getScheme() {
        return new closeSequenceHandle_resultStandardScheme();
      }
    }

    private static class closeSequenceHandle_resultStandardScheme extends StandardScheme<closeSequenceHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeSequenceHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeSequenceHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeSequenceHandle_resultTupleSchemeFactory implements SchemeFactory {
      public closeSequenceHandle_resultTupleScheme getScheme() {
        return new closeSequenceHandle_resultTupleScheme();
      }
    }

    private static class closeSequenceHandle_resultTupleScheme extends TupleScheme<closeSequenceHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeSequenceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbe()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeSequenceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class removeSequence_args implements org.apache.thrift.TBase<removeSequence_args, removeSequence_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeSequence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSequence_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IS_AUTO_COMMIT_NO_SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutoCommitNoSync", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("force", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSequence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSequence_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public TDbt key; // required
    public boolean isAutoCommitNoSync; // required
    public boolean force; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      KEY((short)3, "key"),
      IS_AUTO_COMMIT_NO_SYNC((short)4, "isAutoCommitNoSync"),
      FORCE((short)5, "force");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // KEY
            return KEY;
          case 4: // IS_AUTO_COMMIT_NO_SYNC
            return IS_AUTO_COMMIT_NO_SYNC;
          case 5: // FORCE
            return FORCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISAUTOCOMMITNOSYNC_ISSET_ID = 0;
    private static final int __FORCE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
      tmpMap.put(_Fields.IS_AUTO_COMMIT_NO_SYNC, new org.apache.thrift.meta_data.FieldMetaData("isAutoCommitNoSync", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FORCE, new org.apache.thrift.meta_data.FieldMetaData("force", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSequence_args.class, metaDataMap);
    }

    public removeSequence_args() {
    }

    public removeSequence_args(
      TDatabase db,
      TTransaction txn,
      TDbt key,
      boolean isAutoCommitNoSync,
      boolean force)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.key = key;
      this.isAutoCommitNoSync = isAutoCommitNoSync;
      setIsAutoCommitNoSyncIsSet(true);
      this.force = force;
      setForceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSequence_args(removeSequence_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      if (other.isSetKey()) {
        this.key = new TDbt(other.key);
      }
      this.isAutoCommitNoSync = other.isAutoCommitNoSync;
      this.force = other.force;
    }

    public removeSequence_args deepCopy() {
      return new removeSequence_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      this.key = null;
      setIsAutoCommitNoSyncIsSet(false);
      this.isAutoCommitNoSync = false;
      setForceIsSet(false);
      this.force = false;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public removeSequence_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public removeSequence_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public TDbt getKey() {
      return this.key;
    }

    public removeSequence_args setKey(TDbt key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public boolean isIsAutoCommitNoSync() {
      return this.isAutoCommitNoSync;
    }

    public removeSequence_args setIsAutoCommitNoSync(boolean isAutoCommitNoSync) {
      this.isAutoCommitNoSync = isAutoCommitNoSync;
      setIsAutoCommitNoSyncIsSet(true);
      return this;
    }

    public void unsetIsAutoCommitNoSync() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTOCOMMITNOSYNC_ISSET_ID);
    }

    /** Returns true if field isAutoCommitNoSync is set (has been assigned a value) and false otherwise */
    public boolean isSetIsAutoCommitNoSync() {
      return EncodingUtils.testBit(__isset_bitfield, __ISAUTOCOMMITNOSYNC_ISSET_ID);
    }

    public void setIsAutoCommitNoSyncIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTOCOMMITNOSYNC_ISSET_ID, value);
    }

    public boolean isForce() {
      return this.force;
    }

    public removeSequence_args setForce(boolean force) {
      this.force = force;
      setForceIsSet(true);
      return this;
    }

    public void unsetForce() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    /** Returns true if field force is set (has been assigned a value) and false otherwise */
    public boolean isSetForce() {
      return EncodingUtils.testBit(__isset_bitfield, __FORCE_ISSET_ID);
    }

    public void setForceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((TDbt)value);
        }
        break;

      case IS_AUTO_COMMIT_NO_SYNC:
        if (value == null) {
          unsetIsAutoCommitNoSync();
        } else {
          setIsAutoCommitNoSync((Boolean)value);
        }
        break;

      case FORCE:
        if (value == null) {
          unsetForce();
        } else {
          setForce((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case KEY:
        return getKey();

      case IS_AUTO_COMMIT_NO_SYNC:
        return Boolean.valueOf(isIsAutoCommitNoSync());

      case FORCE:
        return Boolean.valueOf(isForce());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case KEY:
        return isSetKey();
      case IS_AUTO_COMMIT_NO_SYNC:
        return isSetIsAutoCommitNoSync();
      case FORCE:
        return isSetForce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSequence_args)
        return this.equals((removeSequence_args)that);
      return false;
    }

    public boolean equals(removeSequence_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_isAutoCommitNoSync = true;
      boolean that_present_isAutoCommitNoSync = true;
      if (this_present_isAutoCommitNoSync || that_present_isAutoCommitNoSync) {
        if (!(this_present_isAutoCommitNoSync && that_present_isAutoCommitNoSync))
          return false;
        if (this.isAutoCommitNoSync != that.isAutoCommitNoSync)
          return false;
      }

      boolean this_present_force = true;
      boolean that_present_force = true;
      if (this_present_force || that_present_force) {
        if (!(this_present_force && that_present_force))
          return false;
        if (this.force != that.force)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_isAutoCommitNoSync = true;
      list.add(present_isAutoCommitNoSync);
      if (present_isAutoCommitNoSync)
        list.add(isAutoCommitNoSync);

      boolean present_force = true;
      list.add(present_force);
      if (present_force)
        list.add(force);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeSequence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsAutoCommitNoSync()).compareTo(other.isSetIsAutoCommitNoSync());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsAutoCommitNoSync()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoCommitNoSync, other.isAutoCommitNoSync);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetForce()).compareTo(other.isSetForce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force, other.force);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSequence_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isAutoCommitNoSync:");
      sb.append(this.isAutoCommitNoSync);
      first = false;
      if (!first) sb.append(", ");
      sb.append("force:");
      sb.append(this.force);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
      if (key != null) {
        key.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSequence_argsStandardSchemeFactory implements SchemeFactory {
      public removeSequence_argsStandardScheme getScheme() {
        return new removeSequence_argsStandardScheme();
      }
    }

    private static class removeSequence_argsStandardScheme extends StandardScheme<removeSequence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSequence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.key = new TDbt();
                struct.key.read(iprot);
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_AUTO_COMMIT_NO_SYNC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isAutoCommitNoSync = iprot.readBool();
                struct.setIsAutoCommitNoSyncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FORCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.force = iprot.readBool();
                struct.setForceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSequence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          struct.key.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_AUTO_COMMIT_NO_SYNC_FIELD_DESC);
        oprot.writeBool(struct.isAutoCommitNoSync);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FORCE_FIELD_DESC);
        oprot.writeBool(struct.force);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSequence_argsTupleSchemeFactory implements SchemeFactory {
      public removeSequence_argsTupleScheme getScheme() {
        return new removeSequence_argsTupleScheme();
      }
    }

    private static class removeSequence_argsTupleScheme extends TupleScheme<removeSequence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSequence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetIsAutoCommitNoSync()) {
          optionals.set(3);
        }
        if (struct.isSetForce()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetKey()) {
          struct.key.write(oprot);
        }
        if (struct.isSetIsAutoCommitNoSync()) {
          oprot.writeBool(struct.isAutoCommitNoSync);
        }
        if (struct.isSetForce()) {
          oprot.writeBool(struct.force);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSequence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = new TDbt();
          struct.key.read(iprot);
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isAutoCommitNoSync = iprot.readBool();
          struct.setIsAutoCommitNoSyncIsSet(true);
        }
        if (incoming.get(4)) {
          struct.force = iprot.readBool();
          struct.setForceIsSet(true);
        }
      }
    }

  }

  public static class removeSequence_result implements org.apache.thrift.TBase<removeSequence_result, removeSequence_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeSequence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSequence_result");

    private static final org.apache.thrift.protocol.TField IUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSequence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSequence_resultTupleSchemeFactory());
    }

    public TResourceInUseException iue; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IUE((short)1, "iue"),
      DBE((short)2, "dbe"),
      RE((short)3, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IUE
            return IUE;
          case 2: // DBE
            return DBE;
          case 3: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IUE, new org.apache.thrift.meta_data.FieldMetaData("iue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSequence_result.class, metaDataMap);
    }

    public removeSequence_result() {
    }

    public removeSequence_result(
      TResourceInUseException iue,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.iue = iue;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSequence_result(removeSequence_result other) {
      if (other.isSetIue()) {
        this.iue = new TResourceInUseException(other.iue);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public removeSequence_result deepCopy() {
      return new removeSequence_result(this);
    }

    @Override
    public void clear() {
      this.iue = null;
      this.dbe = null;
      this.re = null;
    }

    public TResourceInUseException getIue() {
      return this.iue;
    }

    public removeSequence_result setIue(TResourceInUseException iue) {
      this.iue = iue;
      return this;
    }

    public void unsetIue() {
      this.iue = null;
    }

    /** Returns true if field iue is set (has been assigned a value) and false otherwise */
    public boolean isSetIue() {
      return this.iue != null;
    }

    public void setIueIsSet(boolean value) {
      if (!value) {
        this.iue = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public removeSequence_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public removeSequence_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IUE:
        if (value == null) {
          unsetIue();
        } else {
          setIue((TResourceInUseException)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IUE:
        return getIue();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IUE:
        return isSetIue();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSequence_result)
        return this.equals((removeSequence_result)that);
      return false;
    }

    public boolean equals(removeSequence_result that) {
      if (that == null)
        return false;

      boolean this_present_iue = true && this.isSetIue();
      boolean that_present_iue = true && that.isSetIue();
      if (this_present_iue || that_present_iue) {
        if (!(this_present_iue && that_present_iue))
          return false;
        if (!this.iue.equals(that.iue))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_iue = true && (isSetIue());
      list.add(present_iue);
      if (present_iue)
        list.add(iue);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeSequence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIue()).compareTo(other.isSetIue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iue, other.iue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSequence_result(");
      boolean first = true;

      sb.append("iue:");
      if (this.iue == null) {
        sb.append("null");
      } else {
        sb.append(this.iue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSequence_resultStandardSchemeFactory implements SchemeFactory {
      public removeSequence_resultStandardScheme getScheme() {
        return new removeSequence_resultStandardScheme();
      }
    }

    private static class removeSequence_resultStandardScheme extends StandardScheme<removeSequence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSequence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iue = new TResourceInUseException();
                struct.iue.read(iprot);
                struct.setIueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSequence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.iue != null) {
          oprot.writeFieldBegin(IUE_FIELD_DESC);
          struct.iue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSequence_resultTupleSchemeFactory implements SchemeFactory {
      public removeSequence_resultTupleScheme getScheme() {
        return new removeSequence_resultTupleScheme();
      }
    }

    private static class removeSequence_resultTupleScheme extends TupleScheme<removeSequence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSequence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIue()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIue()) {
          struct.iue.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSequence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.iue = new TResourceInUseException();
          struct.iue.read(iprot);
          struct.setIueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class sequenceGet_args implements org.apache.thrift.TBase<sequenceGet_args, sequenceGet_args._Fields>, java.io.Serializable, Cloneable, Comparable<sequenceGet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sequenceGet_args");

    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("delta", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sequenceGet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sequenceGet_argsTupleSchemeFactory());
    }

    public TSequence seq; // required
    public TTransaction txn; // required
    public int delta; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEQ((short)1, "seq"),
      TXN((short)2, "txn"),
      DELTA((short)3, "delta");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEQ
            return SEQ;
          case 2: // TXN
            return TXN;
          case 3: // DELTA
            return DELTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DELTA_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSequence.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.DELTA, new org.apache.thrift.meta_data.FieldMetaData("delta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sequenceGet_args.class, metaDataMap);
    }

    public sequenceGet_args() {
    }

    public sequenceGet_args(
      TSequence seq,
      TTransaction txn,
      int delta)
    {
      this();
      this.seq = seq;
      this.txn = txn;
      this.delta = delta;
      setDeltaIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sequenceGet_args(sequenceGet_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSeq()) {
        this.seq = new TSequence(other.seq);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      this.delta = other.delta;
    }

    public sequenceGet_args deepCopy() {
      return new sequenceGet_args(this);
    }

    @Override
    public void clear() {
      this.seq = null;
      this.txn = null;
      setDeltaIsSet(false);
      this.delta = 0;
    }

    public TSequence getSeq() {
      return this.seq;
    }

    public sequenceGet_args setSeq(TSequence seq) {
      this.seq = seq;
      return this;
    }

    public void unsetSeq() {
      this.seq = null;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return this.seq != null;
    }

    public void setSeqIsSet(boolean value) {
      if (!value) {
        this.seq = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public sequenceGet_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public int getDelta() {
      return this.delta;
    }

    public sequenceGet_args setDelta(int delta) {
      this.delta = delta;
      setDeltaIsSet(true);
      return this;
    }

    public void unsetDelta() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    /** Returns true if field delta is set (has been assigned a value) and false otherwise */
    public boolean isSetDelta() {
      return EncodingUtils.testBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    public void setDeltaIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELTA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((TSequence)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case DELTA:
        if (value == null) {
          unsetDelta();
        } else {
          setDelta((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEQ:
        return getSeq();

      case TXN:
        return getTxn();

      case DELTA:
        return Integer.valueOf(getDelta());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEQ:
        return isSetSeq();
      case TXN:
        return isSetTxn();
      case DELTA:
        return isSetDelta();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sequenceGet_args)
        return this.equals((sequenceGet_args)that);
      return false;
    }

    public boolean equals(sequenceGet_args that) {
      if (that == null)
        return false;

      boolean this_present_seq = true && this.isSetSeq();
      boolean that_present_seq = true && that.isSetSeq();
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (!this.seq.equals(that.seq))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_delta = true;
      boolean that_present_delta = true;
      if (this_present_delta || that_present_delta) {
        if (!(this_present_delta && that_present_delta))
          return false;
        if (this.delta != that.delta)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_seq = true && (isSetSeq());
      list.add(present_seq);
      if (present_seq)
        list.add(seq);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_delta = true;
      list.add(present_delta);
      if (present_delta)
        list.add(delta);

      return list.hashCode();
    }

    @Override
    public int compareTo(sequenceGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDelta()).compareTo(other.isSetDelta());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelta()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta, other.delta);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sequenceGet_args(");
      boolean first = true;

      sb.append("seq:");
      if (this.seq == null) {
        sb.append("null");
      } else {
        sb.append(this.seq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("delta:");
      sb.append(this.delta);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seq != null) {
        seq.validate();
      }
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sequenceGet_argsStandardSchemeFactory implements SchemeFactory {
      public sequenceGet_argsStandardScheme getScheme() {
        return new sequenceGet_argsStandardScheme();
      }
    }

    private static class sequenceGet_argsStandardScheme extends StandardScheme<sequenceGet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sequenceGet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seq = new TSequence();
                struct.seq.read(iprot);
                struct.setSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DELTA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.delta = iprot.readI32();
                struct.setDeltaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sequenceGet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.seq != null) {
          oprot.writeFieldBegin(SEQ_FIELD_DESC);
          struct.seq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DELTA_FIELD_DESC);
        oprot.writeI32(struct.delta);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sequenceGet_argsTupleSchemeFactory implements SchemeFactory {
      public sequenceGet_argsTupleScheme getScheme() {
        return new sequenceGet_argsTupleScheme();
      }
    }

    private static class sequenceGet_argsTupleScheme extends TupleScheme<sequenceGet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sequenceGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSeq()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetDelta()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSeq()) {
          struct.seq.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetDelta()) {
          oprot.writeI32(struct.delta);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sequenceGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.seq = new TSequence();
          struct.seq.read(iprot);
          struct.setSeqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.delta = iprot.readI32();
          struct.setDeltaIsSet(true);
        }
      }
    }

  }

  public static class sequenceGet_result implements org.apache.thrift.TBase<sequenceGet_result, sequenceGet_result._Fields>, java.io.Serializable, Cloneable, Comparable<sequenceGet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sequenceGet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sequenceGet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sequenceGet_resultTupleSchemeFactory());
    }

    public long success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sequenceGet_result.class, metaDataMap);
    }

    public sequenceGet_result() {
    }

    public sequenceGet_result(
      long success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sequenceGet_result(sequenceGet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public sequenceGet_result deepCopy() {
      return new sequenceGet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.dbe = null;
      this.re = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public sequenceGet_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public sequenceGet_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public sequenceGet_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sequenceGet_result)
        return this.equals((sequenceGet_result)that);
      return false;
    }

    public boolean equals(sequenceGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(sequenceGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sequenceGet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sequenceGet_resultStandardSchemeFactory implements SchemeFactory {
      public sequenceGet_resultStandardScheme getScheme() {
        return new sequenceGet_resultStandardScheme();
      }
    }

    private static class sequenceGet_resultStandardScheme extends StandardScheme<sequenceGet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sequenceGet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sequenceGet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sequenceGet_resultTupleSchemeFactory implements SchemeFactory {
      public sequenceGet_resultTupleScheme getScheme() {
        return new sequenceGet_resultTupleScheme();
      }
    }

    private static class sequenceGet_resultTupleScheme extends TupleScheme<sequenceGet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sequenceGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sequenceGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getEnvStatistics_args implements org.apache.thrift.TBase<getEnvStatistics_args, getEnvStatistics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEnvStatistics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEnvStatistics_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEnvStatistics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnvStatistics_argsTupleSchemeFactory());
    }

    public TEnvironment env; // required
    public TEnvStatConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      CONFIG((short)2, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvironment.class)));
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvStatConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEnvStatistics_args.class, metaDataMap);
    }

    public getEnvStatistics_args() {
    }

    public getEnvStatistics_args(
      TEnvironment env,
      TEnvStatConfig config)
    {
      this();
      this.env = env;
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEnvStatistics_args(getEnvStatistics_args other) {
      if (other.isSetEnv()) {
        this.env = new TEnvironment(other.env);
      }
      if (other.isSetConfig()) {
        this.config = new TEnvStatConfig(other.config);
      }
    }

    public getEnvStatistics_args deepCopy() {
      return new getEnvStatistics_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.config = null;
    }

    public TEnvironment getEnv() {
      return this.env;
    }

    public getEnvStatistics_args setEnv(TEnvironment env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public TEnvStatConfig getConfig() {
      return this.config;
    }

    public getEnvStatistics_args setConfig(TEnvStatConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((TEnvironment)value);
        }
        break;

      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((TEnvStatConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEnvStatistics_args)
        return this.equals((getEnvStatistics_args)that);
      return false;
    }

    public boolean equals(getEnvStatistics_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_env = true && (isSetEnv());
      list.add(present_env);
      if (present_env)
        list.add(env);

      boolean present_config = true && (isSetConfig());
      list.add(present_config);
      if (present_config)
        list.add(config);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnvStatistics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnvStatistics_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (env != null) {
        env.validate();
      }
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnvStatistics_argsStandardSchemeFactory implements SchemeFactory {
      public getEnvStatistics_argsStandardScheme getScheme() {
        return new getEnvStatistics_argsStandardScheme();
      }
    }

    private static class getEnvStatistics_argsStandardScheme extends StandardScheme<getEnvStatistics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnvStatistics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.env = new TEnvironment();
                struct.env.read(iprot);
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new TEnvStatConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnvStatistics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          struct.env.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEnvStatistics_argsTupleSchemeFactory implements SchemeFactory {
      public getEnvStatistics_argsTupleScheme getScheme() {
        return new getEnvStatistics_argsTupleScheme();
      }
    }

    private static class getEnvStatistics_argsTupleScheme extends TupleScheme<getEnvStatistics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnvStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetConfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEnv()) {
          struct.env.write(oprot);
        }
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnvStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.env = new TEnvironment();
          struct.env.read(iprot);
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.config = new TEnvStatConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class getEnvStatistics_result implements org.apache.thrift.TBase<getEnvStatistics_result, getEnvStatistics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEnvStatistics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEnvStatistics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEnvStatistics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnvStatistics_resultTupleSchemeFactory());
    }

    public TEnvStatResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEnvStatResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEnvStatistics_result.class, metaDataMap);
    }

    public getEnvStatistics_result() {
    }

    public getEnvStatistics_result(
      TEnvStatResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEnvStatistics_result(getEnvStatistics_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEnvStatResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public getEnvStatistics_result deepCopy() {
      return new getEnvStatistics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TEnvStatResult getSuccess() {
      return this.success;
    }

    public getEnvStatistics_result setSuccess(TEnvStatResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public getEnvStatistics_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public getEnvStatistics_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEnvStatResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEnvStatistics_result)
        return this.equals((getEnvStatistics_result)that);
      return false;
    }

    public boolean equals(getEnvStatistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnvStatistics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnvStatistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnvStatistics_resultStandardSchemeFactory implements SchemeFactory {
      public getEnvStatistics_resultStandardScheme getScheme() {
        return new getEnvStatistics_resultStandardScheme();
      }
    }

    private static class getEnvStatistics_resultStandardScheme extends StandardScheme<getEnvStatistics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnvStatistics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEnvStatResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnvStatistics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEnvStatistics_resultTupleSchemeFactory implements SchemeFactory {
      public getEnvStatistics_resultTupleScheme getScheme() {
        return new getEnvStatistics_resultTupleScheme();
      }
    }

    private static class getEnvStatistics_resultTupleScheme extends TupleScheme<getEnvStatistics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnvStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnvStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TEnvStatResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getDatabaseStatistics_args implements org.apache.thrift.TBase<getDatabaseStatistics_args, getDatabaseStatistics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDatabaseStatistics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDatabaseStatistics_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_FIELD_DESC = new org.apache.thrift.protocol.TField("txn", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FAST_FIELD_DESC = new org.apache.thrift.protocol.TField("fast", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDatabaseStatistics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDatabaseStatistics_argsTupleSchemeFactory());
    }

    public TDatabase db; // required
    public TTransaction txn; // required
    public boolean fast; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TXN((short)2, "txn"),
      FAST((short)3, "fast");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TXN
            return TXN;
          case 3: // FAST
            return FAST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FAST_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
      tmpMap.put(_Fields.TXN, new org.apache.thrift.meta_data.FieldMetaData("txn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
      tmpMap.put(_Fields.FAST, new org.apache.thrift.meta_data.FieldMetaData("fast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatabaseStatistics_args.class, metaDataMap);
    }

    public getDatabaseStatistics_args() {
    }

    public getDatabaseStatistics_args(
      TDatabase db,
      TTransaction txn,
      boolean fast)
    {
      this();
      this.db = db;
      this.txn = txn;
      this.fast = fast;
      setFastIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDatabaseStatistics_args(getDatabaseStatistics_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDb()) {
        this.db = new TDatabase(other.db);
      }
      if (other.isSetTxn()) {
        this.txn = new TTransaction(other.txn);
      }
      this.fast = other.fast;
    }

    public getDatabaseStatistics_args deepCopy() {
      return new getDatabaseStatistics_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.txn = null;
      setFastIsSet(false);
      this.fast = false;
    }

    public TDatabase getDb() {
      return this.db;
    }

    public getDatabaseStatistics_args setDb(TDatabase db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public TTransaction getTxn() {
      return this.txn;
    }

    public getDatabaseStatistics_args setTxn(TTransaction txn) {
      this.txn = txn;
      return this;
    }

    public void unsetTxn() {
      this.txn = null;
    }

    /** Returns true if field txn is set (has been assigned a value) and false otherwise */
    public boolean isSetTxn() {
      return this.txn != null;
    }

    public void setTxnIsSet(boolean value) {
      if (!value) {
        this.txn = null;
      }
    }

    public boolean isFast() {
      return this.fast;
    }

    public getDatabaseStatistics_args setFast(boolean fast) {
      this.fast = fast;
      setFastIsSet(true);
      return this;
    }

    public void unsetFast() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAST_ISSET_ID);
    }

    /** Returns true if field fast is set (has been assigned a value) and false otherwise */
    public boolean isSetFast() {
      return EncodingUtils.testBit(__isset_bitfield, __FAST_ISSET_ID);
    }

    public void setFastIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((TDatabase)value);
        }
        break;

      case TXN:
        if (value == null) {
          unsetTxn();
        } else {
          setTxn((TTransaction)value);
        }
        break;

      case FAST:
        if (value == null) {
          unsetFast();
        } else {
          setFast((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TXN:
        return getTxn();

      case FAST:
        return Boolean.valueOf(isFast());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TXN:
        return isSetTxn();
      case FAST:
        return isSetFast();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDatabaseStatistics_args)
        return this.equals((getDatabaseStatistics_args)that);
      return false;
    }

    public boolean equals(getDatabaseStatistics_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_txn = true && this.isSetTxn();
      boolean that_present_txn = true && that.isSetTxn();
      if (this_present_txn || that_present_txn) {
        if (!(this_present_txn && that_present_txn))
          return false;
        if (!this.txn.equals(that.txn))
          return false;
      }

      boolean this_present_fast = true;
      boolean that_present_fast = true;
      if (this_present_fast || that_present_fast) {
        if (!(this_present_fast && that_present_fast))
          return false;
        if (this.fast != that.fast)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_db = true && (isSetDb());
      list.add(present_db);
      if (present_db)
        list.add(db);

      boolean present_txn = true && (isSetTxn());
      list.add(present_txn);
      if (present_txn)
        list.add(txn);

      boolean present_fast = true;
      list.add(present_fast);
      if (present_fast)
        list.add(fast);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDatabaseStatistics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxn()).compareTo(other.isSetTxn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn, other.txn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFast()).compareTo(other.isSetFast());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFast()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fast, other.fast);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDatabaseStatistics_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txn:");
      if (this.txn == null) {
        sb.append("null");
      } else {
        sb.append(this.txn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fast:");
      sb.append(this.fast);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (db != null) {
        db.validate();
      }
      if (txn != null) {
        txn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDatabaseStatistics_argsStandardSchemeFactory implements SchemeFactory {
      public getDatabaseStatistics_argsStandardScheme getScheme() {
        return new getDatabaseStatistics_argsStandardScheme();
      }
    }

    private static class getDatabaseStatistics_argsStandardScheme extends StandardScheme<getDatabaseStatistics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDatabaseStatistics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.db = new TDatabase();
                struct.db.read(iprot);
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TXN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txn = new TTransaction();
                struct.txn.read(iprot);
                struct.setTxnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAST
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.fast = iprot.readBool();
                struct.setFastIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDatabaseStatistics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          struct.db.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.txn != null) {
          oprot.writeFieldBegin(TXN_FIELD_DESC);
          struct.txn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FAST_FIELD_DESC);
        oprot.writeBool(struct.fast);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDatabaseStatistics_argsTupleSchemeFactory implements SchemeFactory {
      public getDatabaseStatistics_argsTupleScheme getScheme() {
        return new getDatabaseStatistics_argsTupleScheme();
      }
    }

    private static class getDatabaseStatistics_argsTupleScheme extends TupleScheme<getDatabaseStatistics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDatabaseStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTxn()) {
          optionals.set(1);
        }
        if (struct.isSetFast()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          struct.db.write(oprot);
        }
        if (struct.isSetTxn()) {
          struct.txn.write(oprot);
        }
        if (struct.isSetFast()) {
          oprot.writeBool(struct.fast);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDatabaseStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = new TDatabase();
          struct.db.read(iprot);
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txn = new TTransaction();
          struct.txn.read(iprot);
          struct.setTxnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fast = iprot.readBool();
          struct.setFastIsSet(true);
        }
      }
    }

  }

  public static class getDatabaseStatistics_result implements org.apache.thrift.TBase<getDatabaseStatistics_result, getDatabaseStatistics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDatabaseStatistics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDatabaseStatistics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DBE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDatabaseStatistics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDatabaseStatistics_resultTupleSchemeFactory());
    }

    public TDatabaseStatResult success; // required
    public TDatabaseException dbe; // required
    public TRuntimeException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DBE((short)1, "dbe"),
      RE((short)2, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DBE
            return DBE;
          case 2: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabaseStatResult.class)));
      tmpMap.put(_Fields.DBE, new org.apache.thrift.meta_data.FieldMetaData("dbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatabaseStatistics_result.class, metaDataMap);
    }

    public getDatabaseStatistics_result() {
    }

    public getDatabaseStatistics_result(
      TDatabaseStatResult success,
      TDatabaseException dbe,
      TRuntimeException re)
    {
      this();
      this.success = success;
      this.dbe = dbe;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDatabaseStatistics_result(getDatabaseStatistics_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDatabaseStatResult(other.success);
      }
      if (other.isSetDbe()) {
        this.dbe = new TDatabaseException(other.dbe);
      }
      if (other.isSetRe()) {
        this.re = new TRuntimeException(other.re);
      }
    }

    public getDatabaseStatistics_result deepCopy() {
      return new getDatabaseStatistics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dbe = null;
      this.re = null;
    }

    public TDatabaseStatResult getSuccess() {
      return this.success;
    }

    public getDatabaseStatistics_result setSuccess(TDatabaseStatResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDatabaseException getDbe() {
      return this.dbe;
    }

    public getDatabaseStatistics_result setDbe(TDatabaseException dbe) {
      this.dbe = dbe;
      return this;
    }

    public void unsetDbe() {
      this.dbe = null;
    }

    /** Returns true if field dbe is set (has been assigned a value) and false otherwise */
    public boolean isSetDbe() {
      return this.dbe != null;
    }

    public void setDbeIsSet(boolean value) {
      if (!value) {
        this.dbe = null;
      }
    }

    public TRuntimeException getRe() {
      return this.re;
    }

    public getDatabaseStatistics_result setRe(TRuntimeException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDatabaseStatResult)value);
        }
        break;

      case DBE:
        if (value == null) {
          unsetDbe();
        } else {
          setDbe((TDatabaseException)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DBE:
        return getDbe();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DBE:
        return isSetDbe();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDatabaseStatistics_result)
        return this.equals((getDatabaseStatistics_result)that);
      return false;
    }

    public boolean equals(getDatabaseStatistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dbe = true && this.isSetDbe();
      boolean that_present_dbe = true && that.isSetDbe();
      if (this_present_dbe || that_present_dbe) {
        if (!(this_present_dbe && that_present_dbe))
          return false;
        if (!this.dbe.equals(that.dbe))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dbe = true && (isSetDbe());
      list.add(present_dbe);
      if (present_dbe)
        list.add(dbe);

      boolean present_re = true && (isSetRe());
      list.add(present_re);
      if (present_re)
        list.add(re);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDatabaseStatistics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbe()).compareTo(other.isSetDbe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbe, other.dbe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDatabaseStatistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbe:");
      if (this.dbe == null) {
        sb.append("null");
      } else {
        sb.append(this.dbe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDatabaseStatistics_resultStandardSchemeFactory implements SchemeFactory {
      public getDatabaseStatistics_resultStandardScheme getScheme() {
        return new getDatabaseStatistics_resultStandardScheme();
      }
    }

    private static class getDatabaseStatistics_resultStandardScheme extends StandardScheme<getDatabaseStatistics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDatabaseStatistics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDatabaseStatResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DBE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbe = new TDatabaseException();
                struct.dbe.read(iprot);
                struct.setDbeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TRuntimeException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDatabaseStatistics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbe != null) {
          oprot.writeFieldBegin(DBE_FIELD_DESC);
          struct.dbe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDatabaseStatistics_resultTupleSchemeFactory implements SchemeFactory {
      public getDatabaseStatistics_resultTupleScheme getScheme() {
        return new getDatabaseStatistics_resultTupleScheme();
      }
    }

    private static class getDatabaseStatistics_resultTupleScheme extends TupleScheme<getDatabaseStatistics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDatabaseStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDbe()) {
          optionals.set(1);
        }
        if (struct.isSetRe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDbe()) {
          struct.dbe.write(oprot);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDatabaseStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TDatabaseStatResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dbe = new TDatabaseException();
          struct.dbe.read(iprot);
          struct.setDbeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.re = new TRuntimeException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

}
