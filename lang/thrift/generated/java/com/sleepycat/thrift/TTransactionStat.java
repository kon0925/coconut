/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class TTransactionStat implements org.apache.thrift.TBase<TTransactionStat, TTransactionStat._Fields>, java.io.Serializable, Cloneable, Comparable<TTransactionStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTransactionStat");

  private static final org.apache.thrift.protocol.TField INITTXNS_FIELD_DESC = new org.apache.thrift.protocol.TField("inittxns", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_CKP_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastCkpFile", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CKP_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("lastCkpOffset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTxnId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_NACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNactive", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_NSNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNsnapshot", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_TXNS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxTxns", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NABORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("naborts", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField NACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("nactive", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_BEGINS_FIELD_DESC = new org.apache.thrift.protocol.TField("numBegins", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField NUM_COMMITS_FIELD_DESC = new org.apache.thrift.protocol.TField("numCommits", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField NUM_RESTORES_FIELD_DESC = new org.apache.thrift.protocol.TField("numRestores", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NUM_SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("numSnapshot", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REGION_NOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionNowait", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField REGION_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionWait", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField REG_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("regSize", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField TIME_CKP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCkp", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField ACTIVE_TXNS_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTxns", org.apache.thrift.protocol.TType.LIST, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTransactionStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTransactionStatTupleSchemeFactory());
  }

  public int inittxns; // required
  public int lastCkpFile; // required
  public int lastCkpOffset; // required
  public int lastTxnId; // required
  public int maxNactive; // required
  public int maxNsnapshot; // required
  public int maxTxns; // required
  public long naborts; // required
  public int nactive; // required
  public long numBegins; // required
  public long numCommits; // required
  public int numRestores; // required
  public int numSnapshot; // required
  public long regionNowait; // required
  public long regionWait; // required
  public long regSize; // required
  public long timeCkp; // required
  public List<TActiveTxnStat> activeTxns; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INITTXNS((short)1, "inittxns"),
    LAST_CKP_FILE((short)2, "lastCkpFile"),
    LAST_CKP_OFFSET((short)3, "lastCkpOffset"),
    LAST_TXN_ID((short)4, "lastTxnId"),
    MAX_NACTIVE((short)5, "maxNactive"),
    MAX_NSNAPSHOT((short)6, "maxNsnapshot"),
    MAX_TXNS((short)7, "maxTxns"),
    NABORTS((short)8, "naborts"),
    NACTIVE((short)9, "nactive"),
    NUM_BEGINS((short)10, "numBegins"),
    NUM_COMMITS((short)11, "numCommits"),
    NUM_RESTORES((short)12, "numRestores"),
    NUM_SNAPSHOT((short)13, "numSnapshot"),
    REGION_NOWAIT((short)14, "regionNowait"),
    REGION_WAIT((short)15, "regionWait"),
    REG_SIZE((short)16, "regSize"),
    TIME_CKP((short)17, "timeCkp"),
    ACTIVE_TXNS((short)18, "activeTxns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INITTXNS
          return INITTXNS;
        case 2: // LAST_CKP_FILE
          return LAST_CKP_FILE;
        case 3: // LAST_CKP_OFFSET
          return LAST_CKP_OFFSET;
        case 4: // LAST_TXN_ID
          return LAST_TXN_ID;
        case 5: // MAX_NACTIVE
          return MAX_NACTIVE;
        case 6: // MAX_NSNAPSHOT
          return MAX_NSNAPSHOT;
        case 7: // MAX_TXNS
          return MAX_TXNS;
        case 8: // NABORTS
          return NABORTS;
        case 9: // NACTIVE
          return NACTIVE;
        case 10: // NUM_BEGINS
          return NUM_BEGINS;
        case 11: // NUM_COMMITS
          return NUM_COMMITS;
        case 12: // NUM_RESTORES
          return NUM_RESTORES;
        case 13: // NUM_SNAPSHOT
          return NUM_SNAPSHOT;
        case 14: // REGION_NOWAIT
          return REGION_NOWAIT;
        case 15: // REGION_WAIT
          return REGION_WAIT;
        case 16: // REG_SIZE
          return REG_SIZE;
        case 17: // TIME_CKP
          return TIME_CKP;
        case 18: // ACTIVE_TXNS
          return ACTIVE_TXNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INITTXNS_ISSET_ID = 0;
  private static final int __LASTCKPFILE_ISSET_ID = 1;
  private static final int __LASTCKPOFFSET_ISSET_ID = 2;
  private static final int __LASTTXNID_ISSET_ID = 3;
  private static final int __MAXNACTIVE_ISSET_ID = 4;
  private static final int __MAXNSNAPSHOT_ISSET_ID = 5;
  private static final int __MAXTXNS_ISSET_ID = 6;
  private static final int __NABORTS_ISSET_ID = 7;
  private static final int __NACTIVE_ISSET_ID = 8;
  private static final int __NUMBEGINS_ISSET_ID = 9;
  private static final int __NUMCOMMITS_ISSET_ID = 10;
  private static final int __NUMRESTORES_ISSET_ID = 11;
  private static final int __NUMSNAPSHOT_ISSET_ID = 12;
  private static final int __REGIONNOWAIT_ISSET_ID = 13;
  private static final int __REGIONWAIT_ISSET_ID = 14;
  private static final int __REGSIZE_ISSET_ID = 15;
  private static final int __TIMECKP_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INITTXNS, new org.apache.thrift.meta_data.FieldMetaData("inittxns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CKP_FILE, new org.apache.thrift.meta_data.FieldMetaData("lastCkpFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CKP_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("lastCkpOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("lastTxnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_NACTIVE, new org.apache.thrift.meta_data.FieldMetaData("maxNactive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_NSNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("maxNsnapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_TXNS, new org.apache.thrift.meta_data.FieldMetaData("maxTxns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NABORTS, new org.apache.thrift.meta_data.FieldMetaData("naborts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NACTIVE, new org.apache.thrift.meta_data.FieldMetaData("nactive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_BEGINS, new org.apache.thrift.meta_data.FieldMetaData("numBegins", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_COMMITS, new org.apache.thrift.meta_data.FieldMetaData("numCommits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_RESTORES, new org.apache.thrift.meta_data.FieldMetaData("numRestores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("numSnapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGION_NOWAIT, new org.apache.thrift.meta_data.FieldMetaData("regionNowait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGION_WAIT, new org.apache.thrift.meta_data.FieldMetaData("regionWait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REG_SIZE, new org.apache.thrift.meta_data.FieldMetaData("regSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME_CKP, new org.apache.thrift.meta_data.FieldMetaData("timeCkp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_TXNS, new org.apache.thrift.meta_data.FieldMetaData("activeTxns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TActiveTxnStat.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTransactionStat.class, metaDataMap);
  }

  public TTransactionStat() {
  }

  public TTransactionStat(
    int inittxns,
    int lastCkpFile,
    int lastCkpOffset,
    int lastTxnId,
    int maxNactive,
    int maxNsnapshot,
    int maxTxns,
    long naborts,
    int nactive,
    long numBegins,
    long numCommits,
    int numRestores,
    int numSnapshot,
    long regionNowait,
    long regionWait,
    long regSize,
    long timeCkp,
    List<TActiveTxnStat> activeTxns)
  {
    this();
    this.inittxns = inittxns;
    setInittxnsIsSet(true);
    this.lastCkpFile = lastCkpFile;
    setLastCkpFileIsSet(true);
    this.lastCkpOffset = lastCkpOffset;
    setLastCkpOffsetIsSet(true);
    this.lastTxnId = lastTxnId;
    setLastTxnIdIsSet(true);
    this.maxNactive = maxNactive;
    setMaxNactiveIsSet(true);
    this.maxNsnapshot = maxNsnapshot;
    setMaxNsnapshotIsSet(true);
    this.maxTxns = maxTxns;
    setMaxTxnsIsSet(true);
    this.naborts = naborts;
    setNabortsIsSet(true);
    this.nactive = nactive;
    setNactiveIsSet(true);
    this.numBegins = numBegins;
    setNumBeginsIsSet(true);
    this.numCommits = numCommits;
    setNumCommitsIsSet(true);
    this.numRestores = numRestores;
    setNumRestoresIsSet(true);
    this.numSnapshot = numSnapshot;
    setNumSnapshotIsSet(true);
    this.regionNowait = regionNowait;
    setRegionNowaitIsSet(true);
    this.regionWait = regionWait;
    setRegionWaitIsSet(true);
    this.regSize = regSize;
    setRegSizeIsSet(true);
    this.timeCkp = timeCkp;
    setTimeCkpIsSet(true);
    this.activeTxns = activeTxns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTransactionStat(TTransactionStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inittxns = other.inittxns;
    this.lastCkpFile = other.lastCkpFile;
    this.lastCkpOffset = other.lastCkpOffset;
    this.lastTxnId = other.lastTxnId;
    this.maxNactive = other.maxNactive;
    this.maxNsnapshot = other.maxNsnapshot;
    this.maxTxns = other.maxTxns;
    this.naborts = other.naborts;
    this.nactive = other.nactive;
    this.numBegins = other.numBegins;
    this.numCommits = other.numCommits;
    this.numRestores = other.numRestores;
    this.numSnapshot = other.numSnapshot;
    this.regionNowait = other.regionNowait;
    this.regionWait = other.regionWait;
    this.regSize = other.regSize;
    this.timeCkp = other.timeCkp;
    if (other.isSetActiveTxns()) {
      List<TActiveTxnStat> __this__activeTxns = new ArrayList<TActiveTxnStat>(other.activeTxns.size());
      for (TActiveTxnStat other_element : other.activeTxns) {
        __this__activeTxns.add(new TActiveTxnStat(other_element));
      }
      this.activeTxns = __this__activeTxns;
    }
  }

  public TTransactionStat deepCopy() {
    return new TTransactionStat(this);
  }

  @Override
  public void clear() {
    setInittxnsIsSet(false);
    this.inittxns = 0;
    setLastCkpFileIsSet(false);
    this.lastCkpFile = 0;
    setLastCkpOffsetIsSet(false);
    this.lastCkpOffset = 0;
    setLastTxnIdIsSet(false);
    this.lastTxnId = 0;
    setMaxNactiveIsSet(false);
    this.maxNactive = 0;
    setMaxNsnapshotIsSet(false);
    this.maxNsnapshot = 0;
    setMaxTxnsIsSet(false);
    this.maxTxns = 0;
    setNabortsIsSet(false);
    this.naborts = 0;
    setNactiveIsSet(false);
    this.nactive = 0;
    setNumBeginsIsSet(false);
    this.numBegins = 0;
    setNumCommitsIsSet(false);
    this.numCommits = 0;
    setNumRestoresIsSet(false);
    this.numRestores = 0;
    setNumSnapshotIsSet(false);
    this.numSnapshot = 0;
    setRegionNowaitIsSet(false);
    this.regionNowait = 0;
    setRegionWaitIsSet(false);
    this.regionWait = 0;
    setRegSizeIsSet(false);
    this.regSize = 0;
    setTimeCkpIsSet(false);
    this.timeCkp = 0;
    this.activeTxns = null;
  }

  public int getInittxns() {
    return this.inittxns;
  }

  public TTransactionStat setInittxns(int inittxns) {
    this.inittxns = inittxns;
    setInittxnsIsSet(true);
    return this;
  }

  public void unsetInittxns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITTXNS_ISSET_ID);
  }

  /** Returns true if field inittxns is set (has been assigned a value) and false otherwise */
  public boolean isSetInittxns() {
    return EncodingUtils.testBit(__isset_bitfield, __INITTXNS_ISSET_ID);
  }

  public void setInittxnsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITTXNS_ISSET_ID, value);
  }

  public int getLastCkpFile() {
    return this.lastCkpFile;
  }

  public TTransactionStat setLastCkpFile(int lastCkpFile) {
    this.lastCkpFile = lastCkpFile;
    setLastCkpFileIsSet(true);
    return this;
  }

  public void unsetLastCkpFile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTCKPFILE_ISSET_ID);
  }

  /** Returns true if field lastCkpFile is set (has been assigned a value) and false otherwise */
  public boolean isSetLastCkpFile() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTCKPFILE_ISSET_ID);
  }

  public void setLastCkpFileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTCKPFILE_ISSET_ID, value);
  }

  public int getLastCkpOffset() {
    return this.lastCkpOffset;
  }

  public TTransactionStat setLastCkpOffset(int lastCkpOffset) {
    this.lastCkpOffset = lastCkpOffset;
    setLastCkpOffsetIsSet(true);
    return this;
  }

  public void unsetLastCkpOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTCKPOFFSET_ISSET_ID);
  }

  /** Returns true if field lastCkpOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetLastCkpOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTCKPOFFSET_ISSET_ID);
  }

  public void setLastCkpOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTCKPOFFSET_ISSET_ID, value);
  }

  public int getLastTxnId() {
    return this.lastTxnId;
  }

  public TTransactionStat setLastTxnId(int lastTxnId) {
    this.lastTxnId = lastTxnId;
    setLastTxnIdIsSet(true);
    return this;
  }

  public void unsetLastTxnId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTTXNID_ISSET_ID);
  }

  /** Returns true if field lastTxnId is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTxnId() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTTXNID_ISSET_ID);
  }

  public void setLastTxnIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTTXNID_ISSET_ID, value);
  }

  public int getMaxNactive() {
    return this.maxNactive;
  }

  public TTransactionStat setMaxNactive(int maxNactive) {
    this.maxNactive = maxNactive;
    setMaxNactiveIsSet(true);
    return this;
  }

  public void unsetMaxNactive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNACTIVE_ISSET_ID);
  }

  /** Returns true if field maxNactive is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNactive() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNACTIVE_ISSET_ID);
  }

  public void setMaxNactiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNACTIVE_ISSET_ID, value);
  }

  public int getMaxNsnapshot() {
    return this.maxNsnapshot;
  }

  public TTransactionStat setMaxNsnapshot(int maxNsnapshot) {
    this.maxNsnapshot = maxNsnapshot;
    setMaxNsnapshotIsSet(true);
    return this;
  }

  public void unsetMaxNsnapshot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNSNAPSHOT_ISSET_ID);
  }

  /** Returns true if field maxNsnapshot is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNsnapshot() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNSNAPSHOT_ISSET_ID);
  }

  public void setMaxNsnapshotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNSNAPSHOT_ISSET_ID, value);
  }

  public int getMaxTxns() {
    return this.maxTxns;
  }

  public TTransactionStat setMaxTxns(int maxTxns) {
    this.maxTxns = maxTxns;
    setMaxTxnsIsSet(true);
    return this;
  }

  public void unsetMaxTxns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXTXNS_ISSET_ID);
  }

  /** Returns true if field maxTxns is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxTxns() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXTXNS_ISSET_ID);
  }

  public void setMaxTxnsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXTXNS_ISSET_ID, value);
  }

  public long getNaborts() {
    return this.naborts;
  }

  public TTransactionStat setNaborts(long naborts) {
    this.naborts = naborts;
    setNabortsIsSet(true);
    return this;
  }

  public void unsetNaborts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NABORTS_ISSET_ID);
  }

  /** Returns true if field naborts is set (has been assigned a value) and false otherwise */
  public boolean isSetNaborts() {
    return EncodingUtils.testBit(__isset_bitfield, __NABORTS_ISSET_ID);
  }

  public void setNabortsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NABORTS_ISSET_ID, value);
  }

  public int getNactive() {
    return this.nactive;
  }

  public TTransactionStat setNactive(int nactive) {
    this.nactive = nactive;
    setNactiveIsSet(true);
    return this;
  }

  public void unsetNactive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NACTIVE_ISSET_ID);
  }

  /** Returns true if field nactive is set (has been assigned a value) and false otherwise */
  public boolean isSetNactive() {
    return EncodingUtils.testBit(__isset_bitfield, __NACTIVE_ISSET_ID);
  }

  public void setNactiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NACTIVE_ISSET_ID, value);
  }

  public long getNumBegins() {
    return this.numBegins;
  }

  public TTransactionStat setNumBegins(long numBegins) {
    this.numBegins = numBegins;
    setNumBeginsIsSet(true);
    return this;
  }

  public void unsetNumBegins() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEGINS_ISSET_ID);
  }

  /** Returns true if field numBegins is set (has been assigned a value) and false otherwise */
  public boolean isSetNumBegins() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEGINS_ISSET_ID);
  }

  public void setNumBeginsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEGINS_ISSET_ID, value);
  }

  public long getNumCommits() {
    return this.numCommits;
  }

  public TTransactionStat setNumCommits(long numCommits) {
    this.numCommits = numCommits;
    setNumCommitsIsSet(true);
    return this;
  }

  public void unsetNumCommits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMCOMMITS_ISSET_ID);
  }

  /** Returns true if field numCommits is set (has been assigned a value) and false otherwise */
  public boolean isSetNumCommits() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMCOMMITS_ISSET_ID);
  }

  public void setNumCommitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMCOMMITS_ISSET_ID, value);
  }

  public int getNumRestores() {
    return this.numRestores;
  }

  public TTransactionStat setNumRestores(int numRestores) {
    this.numRestores = numRestores;
    setNumRestoresIsSet(true);
    return this;
  }

  public void unsetNumRestores() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMRESTORES_ISSET_ID);
  }

  /** Returns true if field numRestores is set (has been assigned a value) and false otherwise */
  public boolean isSetNumRestores() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMRESTORES_ISSET_ID);
  }

  public void setNumRestoresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMRESTORES_ISSET_ID, value);
  }

  public int getNumSnapshot() {
    return this.numSnapshot;
  }

  public TTransactionStat setNumSnapshot(int numSnapshot) {
    this.numSnapshot = numSnapshot;
    setNumSnapshotIsSet(true);
    return this;
  }

  public void unsetNumSnapshot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMSNAPSHOT_ISSET_ID);
  }

  /** Returns true if field numSnapshot is set (has been assigned a value) and false otherwise */
  public boolean isSetNumSnapshot() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMSNAPSHOT_ISSET_ID);
  }

  public void setNumSnapshotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMSNAPSHOT_ISSET_ID, value);
  }

  public long getRegionNowait() {
    return this.regionNowait;
  }

  public TTransactionStat setRegionNowait(long regionNowait) {
    this.regionNowait = regionNowait;
    setRegionNowaitIsSet(true);
    return this;
  }

  public void unsetRegionNowait() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGIONNOWAIT_ISSET_ID);
  }

  /** Returns true if field regionNowait is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionNowait() {
    return EncodingUtils.testBit(__isset_bitfield, __REGIONNOWAIT_ISSET_ID);
  }

  public void setRegionNowaitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGIONNOWAIT_ISSET_ID, value);
  }

  public long getRegionWait() {
    return this.regionWait;
  }

  public TTransactionStat setRegionWait(long regionWait) {
    this.regionWait = regionWait;
    setRegionWaitIsSet(true);
    return this;
  }

  public void unsetRegionWait() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGIONWAIT_ISSET_ID);
  }

  /** Returns true if field regionWait is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionWait() {
    return EncodingUtils.testBit(__isset_bitfield, __REGIONWAIT_ISSET_ID);
  }

  public void setRegionWaitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGIONWAIT_ISSET_ID, value);
  }

  public long getRegSize() {
    return this.regSize;
  }

  public TTransactionStat setRegSize(long regSize) {
    this.regSize = regSize;
    setRegSizeIsSet(true);
    return this;
  }

  public void unsetRegSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGSIZE_ISSET_ID);
  }

  /** Returns true if field regSize is set (has been assigned a value) and false otherwise */
  public boolean isSetRegSize() {
    return EncodingUtils.testBit(__isset_bitfield, __REGSIZE_ISSET_ID);
  }

  public void setRegSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGSIZE_ISSET_ID, value);
  }

  public long getTimeCkp() {
    return this.timeCkp;
  }

  public TTransactionStat setTimeCkp(long timeCkp) {
    this.timeCkp = timeCkp;
    setTimeCkpIsSet(true);
    return this;
  }

  public void unsetTimeCkp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMECKP_ISSET_ID);
  }

  /** Returns true if field timeCkp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCkp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMECKP_ISSET_ID);
  }

  public void setTimeCkpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMECKP_ISSET_ID, value);
  }

  public int getActiveTxnsSize() {
    return (this.activeTxns == null) ? 0 : this.activeTxns.size();
  }

  public java.util.Iterator<TActiveTxnStat> getActiveTxnsIterator() {
    return (this.activeTxns == null) ? null : this.activeTxns.iterator();
  }

  public void addToActiveTxns(TActiveTxnStat elem) {
    if (this.activeTxns == null) {
      this.activeTxns = new ArrayList<TActiveTxnStat>();
    }
    this.activeTxns.add(elem);
  }

  public List<TActiveTxnStat> getActiveTxns() {
    return this.activeTxns;
  }

  public TTransactionStat setActiveTxns(List<TActiveTxnStat> activeTxns) {
    this.activeTxns = activeTxns;
    return this;
  }

  public void unsetActiveTxns() {
    this.activeTxns = null;
  }

  /** Returns true if field activeTxns is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTxns() {
    return this.activeTxns != null;
  }

  public void setActiveTxnsIsSet(boolean value) {
    if (!value) {
      this.activeTxns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INITTXNS:
      if (value == null) {
        unsetInittxns();
      } else {
        setInittxns((Integer)value);
      }
      break;

    case LAST_CKP_FILE:
      if (value == null) {
        unsetLastCkpFile();
      } else {
        setLastCkpFile((Integer)value);
      }
      break;

    case LAST_CKP_OFFSET:
      if (value == null) {
        unsetLastCkpOffset();
      } else {
        setLastCkpOffset((Integer)value);
      }
      break;

    case LAST_TXN_ID:
      if (value == null) {
        unsetLastTxnId();
      } else {
        setLastTxnId((Integer)value);
      }
      break;

    case MAX_NACTIVE:
      if (value == null) {
        unsetMaxNactive();
      } else {
        setMaxNactive((Integer)value);
      }
      break;

    case MAX_NSNAPSHOT:
      if (value == null) {
        unsetMaxNsnapshot();
      } else {
        setMaxNsnapshot((Integer)value);
      }
      break;

    case MAX_TXNS:
      if (value == null) {
        unsetMaxTxns();
      } else {
        setMaxTxns((Integer)value);
      }
      break;

    case NABORTS:
      if (value == null) {
        unsetNaborts();
      } else {
        setNaborts((Long)value);
      }
      break;

    case NACTIVE:
      if (value == null) {
        unsetNactive();
      } else {
        setNactive((Integer)value);
      }
      break;

    case NUM_BEGINS:
      if (value == null) {
        unsetNumBegins();
      } else {
        setNumBegins((Long)value);
      }
      break;

    case NUM_COMMITS:
      if (value == null) {
        unsetNumCommits();
      } else {
        setNumCommits((Long)value);
      }
      break;

    case NUM_RESTORES:
      if (value == null) {
        unsetNumRestores();
      } else {
        setNumRestores((Integer)value);
      }
      break;

    case NUM_SNAPSHOT:
      if (value == null) {
        unsetNumSnapshot();
      } else {
        setNumSnapshot((Integer)value);
      }
      break;

    case REGION_NOWAIT:
      if (value == null) {
        unsetRegionNowait();
      } else {
        setRegionNowait((Long)value);
      }
      break;

    case REGION_WAIT:
      if (value == null) {
        unsetRegionWait();
      } else {
        setRegionWait((Long)value);
      }
      break;

    case REG_SIZE:
      if (value == null) {
        unsetRegSize();
      } else {
        setRegSize((Long)value);
      }
      break;

    case TIME_CKP:
      if (value == null) {
        unsetTimeCkp();
      } else {
        setTimeCkp((Long)value);
      }
      break;

    case ACTIVE_TXNS:
      if (value == null) {
        unsetActiveTxns();
      } else {
        setActiveTxns((List<TActiveTxnStat>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INITTXNS:
      return Integer.valueOf(getInittxns());

    case LAST_CKP_FILE:
      return Integer.valueOf(getLastCkpFile());

    case LAST_CKP_OFFSET:
      return Integer.valueOf(getLastCkpOffset());

    case LAST_TXN_ID:
      return Integer.valueOf(getLastTxnId());

    case MAX_NACTIVE:
      return Integer.valueOf(getMaxNactive());

    case MAX_NSNAPSHOT:
      return Integer.valueOf(getMaxNsnapshot());

    case MAX_TXNS:
      return Integer.valueOf(getMaxTxns());

    case NABORTS:
      return Long.valueOf(getNaborts());

    case NACTIVE:
      return Integer.valueOf(getNactive());

    case NUM_BEGINS:
      return Long.valueOf(getNumBegins());

    case NUM_COMMITS:
      return Long.valueOf(getNumCommits());

    case NUM_RESTORES:
      return Integer.valueOf(getNumRestores());

    case NUM_SNAPSHOT:
      return Integer.valueOf(getNumSnapshot());

    case REGION_NOWAIT:
      return Long.valueOf(getRegionNowait());

    case REGION_WAIT:
      return Long.valueOf(getRegionWait());

    case REG_SIZE:
      return Long.valueOf(getRegSize());

    case TIME_CKP:
      return Long.valueOf(getTimeCkp());

    case ACTIVE_TXNS:
      return getActiveTxns();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INITTXNS:
      return isSetInittxns();
    case LAST_CKP_FILE:
      return isSetLastCkpFile();
    case LAST_CKP_OFFSET:
      return isSetLastCkpOffset();
    case LAST_TXN_ID:
      return isSetLastTxnId();
    case MAX_NACTIVE:
      return isSetMaxNactive();
    case MAX_NSNAPSHOT:
      return isSetMaxNsnapshot();
    case MAX_TXNS:
      return isSetMaxTxns();
    case NABORTS:
      return isSetNaborts();
    case NACTIVE:
      return isSetNactive();
    case NUM_BEGINS:
      return isSetNumBegins();
    case NUM_COMMITS:
      return isSetNumCommits();
    case NUM_RESTORES:
      return isSetNumRestores();
    case NUM_SNAPSHOT:
      return isSetNumSnapshot();
    case REGION_NOWAIT:
      return isSetRegionNowait();
    case REGION_WAIT:
      return isSetRegionWait();
    case REG_SIZE:
      return isSetRegSize();
    case TIME_CKP:
      return isSetTimeCkp();
    case ACTIVE_TXNS:
      return isSetActiveTxns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTransactionStat)
      return this.equals((TTransactionStat)that);
    return false;
  }

  public boolean equals(TTransactionStat that) {
    if (that == null)
      return false;

    boolean this_present_inittxns = true;
    boolean that_present_inittxns = true;
    if (this_present_inittxns || that_present_inittxns) {
      if (!(this_present_inittxns && that_present_inittxns))
        return false;
      if (this.inittxns != that.inittxns)
        return false;
    }

    boolean this_present_lastCkpFile = true;
    boolean that_present_lastCkpFile = true;
    if (this_present_lastCkpFile || that_present_lastCkpFile) {
      if (!(this_present_lastCkpFile && that_present_lastCkpFile))
        return false;
      if (this.lastCkpFile != that.lastCkpFile)
        return false;
    }

    boolean this_present_lastCkpOffset = true;
    boolean that_present_lastCkpOffset = true;
    if (this_present_lastCkpOffset || that_present_lastCkpOffset) {
      if (!(this_present_lastCkpOffset && that_present_lastCkpOffset))
        return false;
      if (this.lastCkpOffset != that.lastCkpOffset)
        return false;
    }

    boolean this_present_lastTxnId = true;
    boolean that_present_lastTxnId = true;
    if (this_present_lastTxnId || that_present_lastTxnId) {
      if (!(this_present_lastTxnId && that_present_lastTxnId))
        return false;
      if (this.lastTxnId != that.lastTxnId)
        return false;
    }

    boolean this_present_maxNactive = true;
    boolean that_present_maxNactive = true;
    if (this_present_maxNactive || that_present_maxNactive) {
      if (!(this_present_maxNactive && that_present_maxNactive))
        return false;
      if (this.maxNactive != that.maxNactive)
        return false;
    }

    boolean this_present_maxNsnapshot = true;
    boolean that_present_maxNsnapshot = true;
    if (this_present_maxNsnapshot || that_present_maxNsnapshot) {
      if (!(this_present_maxNsnapshot && that_present_maxNsnapshot))
        return false;
      if (this.maxNsnapshot != that.maxNsnapshot)
        return false;
    }

    boolean this_present_maxTxns = true;
    boolean that_present_maxTxns = true;
    if (this_present_maxTxns || that_present_maxTxns) {
      if (!(this_present_maxTxns && that_present_maxTxns))
        return false;
      if (this.maxTxns != that.maxTxns)
        return false;
    }

    boolean this_present_naborts = true;
    boolean that_present_naborts = true;
    if (this_present_naborts || that_present_naborts) {
      if (!(this_present_naborts && that_present_naborts))
        return false;
      if (this.naborts != that.naborts)
        return false;
    }

    boolean this_present_nactive = true;
    boolean that_present_nactive = true;
    if (this_present_nactive || that_present_nactive) {
      if (!(this_present_nactive && that_present_nactive))
        return false;
      if (this.nactive != that.nactive)
        return false;
    }

    boolean this_present_numBegins = true;
    boolean that_present_numBegins = true;
    if (this_present_numBegins || that_present_numBegins) {
      if (!(this_present_numBegins && that_present_numBegins))
        return false;
      if (this.numBegins != that.numBegins)
        return false;
    }

    boolean this_present_numCommits = true;
    boolean that_present_numCommits = true;
    if (this_present_numCommits || that_present_numCommits) {
      if (!(this_present_numCommits && that_present_numCommits))
        return false;
      if (this.numCommits != that.numCommits)
        return false;
    }

    boolean this_present_numRestores = true;
    boolean that_present_numRestores = true;
    if (this_present_numRestores || that_present_numRestores) {
      if (!(this_present_numRestores && that_present_numRestores))
        return false;
      if (this.numRestores != that.numRestores)
        return false;
    }

    boolean this_present_numSnapshot = true;
    boolean that_present_numSnapshot = true;
    if (this_present_numSnapshot || that_present_numSnapshot) {
      if (!(this_present_numSnapshot && that_present_numSnapshot))
        return false;
      if (this.numSnapshot != that.numSnapshot)
        return false;
    }

    boolean this_present_regionNowait = true;
    boolean that_present_regionNowait = true;
    if (this_present_regionNowait || that_present_regionNowait) {
      if (!(this_present_regionNowait && that_present_regionNowait))
        return false;
      if (this.regionNowait != that.regionNowait)
        return false;
    }

    boolean this_present_regionWait = true;
    boolean that_present_regionWait = true;
    if (this_present_regionWait || that_present_regionWait) {
      if (!(this_present_regionWait && that_present_regionWait))
        return false;
      if (this.regionWait != that.regionWait)
        return false;
    }

    boolean this_present_regSize = true;
    boolean that_present_regSize = true;
    if (this_present_regSize || that_present_regSize) {
      if (!(this_present_regSize && that_present_regSize))
        return false;
      if (this.regSize != that.regSize)
        return false;
    }

    boolean this_present_timeCkp = true;
    boolean that_present_timeCkp = true;
    if (this_present_timeCkp || that_present_timeCkp) {
      if (!(this_present_timeCkp && that_present_timeCkp))
        return false;
      if (this.timeCkp != that.timeCkp)
        return false;
    }

    boolean this_present_activeTxns = true && this.isSetActiveTxns();
    boolean that_present_activeTxns = true && that.isSetActiveTxns();
    if (this_present_activeTxns || that_present_activeTxns) {
      if (!(this_present_activeTxns && that_present_activeTxns))
        return false;
      if (!this.activeTxns.equals(that.activeTxns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_inittxns = true;
    list.add(present_inittxns);
    if (present_inittxns)
      list.add(inittxns);

    boolean present_lastCkpFile = true;
    list.add(present_lastCkpFile);
    if (present_lastCkpFile)
      list.add(lastCkpFile);

    boolean present_lastCkpOffset = true;
    list.add(present_lastCkpOffset);
    if (present_lastCkpOffset)
      list.add(lastCkpOffset);

    boolean present_lastTxnId = true;
    list.add(present_lastTxnId);
    if (present_lastTxnId)
      list.add(lastTxnId);

    boolean present_maxNactive = true;
    list.add(present_maxNactive);
    if (present_maxNactive)
      list.add(maxNactive);

    boolean present_maxNsnapshot = true;
    list.add(present_maxNsnapshot);
    if (present_maxNsnapshot)
      list.add(maxNsnapshot);

    boolean present_maxTxns = true;
    list.add(present_maxTxns);
    if (present_maxTxns)
      list.add(maxTxns);

    boolean present_naborts = true;
    list.add(present_naborts);
    if (present_naborts)
      list.add(naborts);

    boolean present_nactive = true;
    list.add(present_nactive);
    if (present_nactive)
      list.add(nactive);

    boolean present_numBegins = true;
    list.add(present_numBegins);
    if (present_numBegins)
      list.add(numBegins);

    boolean present_numCommits = true;
    list.add(present_numCommits);
    if (present_numCommits)
      list.add(numCommits);

    boolean present_numRestores = true;
    list.add(present_numRestores);
    if (present_numRestores)
      list.add(numRestores);

    boolean present_numSnapshot = true;
    list.add(present_numSnapshot);
    if (present_numSnapshot)
      list.add(numSnapshot);

    boolean present_regionNowait = true;
    list.add(present_regionNowait);
    if (present_regionNowait)
      list.add(regionNowait);

    boolean present_regionWait = true;
    list.add(present_regionWait);
    if (present_regionWait)
      list.add(regionWait);

    boolean present_regSize = true;
    list.add(present_regSize);
    if (present_regSize)
      list.add(regSize);

    boolean present_timeCkp = true;
    list.add(present_timeCkp);
    if (present_timeCkp)
      list.add(timeCkp);

    boolean present_activeTxns = true && (isSetActiveTxns());
    list.add(present_activeTxns);
    if (present_activeTxns)
      list.add(activeTxns);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTransactionStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInittxns()).compareTo(other.isSetInittxns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInittxns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inittxns, other.inittxns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastCkpFile()).compareTo(other.isSetLastCkpFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastCkpFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastCkpFile, other.lastCkpFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastCkpOffset()).compareTo(other.isSetLastCkpOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastCkpOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastCkpOffset, other.lastCkpOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTxnId()).compareTo(other.isSetLastTxnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTxnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTxnId, other.lastTxnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNactive()).compareTo(other.isSetMaxNactive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNactive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNactive, other.maxNactive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNsnapshot()).compareTo(other.isSetMaxNsnapshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNsnapshot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNsnapshot, other.maxNsnapshot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxTxns()).compareTo(other.isSetMaxTxns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxTxns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxTxns, other.maxTxns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNaborts()).compareTo(other.isSetNaborts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNaborts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.naborts, other.naborts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNactive()).compareTo(other.isSetNactive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNactive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nactive, other.nactive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumBegins()).compareTo(other.isSetNumBegins());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumBegins()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numBegins, other.numBegins);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumCommits()).compareTo(other.isSetNumCommits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumCommits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numCommits, other.numCommits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumRestores()).compareTo(other.isSetNumRestores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumRestores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRestores, other.numRestores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumSnapshot()).compareTo(other.isSetNumSnapshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumSnapshot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numSnapshot, other.numSnapshot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionNowait()).compareTo(other.isSetRegionNowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionNowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionNowait, other.regionNowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionWait()).compareTo(other.isSetRegionWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionWait, other.regionWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegSize()).compareTo(other.isSetRegSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regSize, other.regSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeCkp()).compareTo(other.isSetTimeCkp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCkp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCkp, other.timeCkp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveTxns()).compareTo(other.isSetActiveTxns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTxns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTxns, other.activeTxns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTransactionStat(");
    boolean first = true;

    sb.append("inittxns:");
    sb.append(this.inittxns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastCkpFile:");
    sb.append(this.lastCkpFile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastCkpOffset:");
    sb.append(this.lastCkpOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastTxnId:");
    sb.append(this.lastTxnId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxNactive:");
    sb.append(this.maxNactive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxNsnapshot:");
    sb.append(this.maxNsnapshot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxTxns:");
    sb.append(this.maxTxns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("naborts:");
    sb.append(this.naborts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nactive:");
    sb.append(this.nactive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numBegins:");
    sb.append(this.numBegins);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numCommits:");
    sb.append(this.numCommits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numRestores:");
    sb.append(this.numRestores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numSnapshot:");
    sb.append(this.numSnapshot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionNowait:");
    sb.append(this.regionNowait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionWait:");
    sb.append(this.regionWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regSize:");
    sb.append(this.regSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeCkp:");
    sb.append(this.timeCkp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeTxns:");
    if (this.activeTxns == null) {
      sb.append("null");
    } else {
      sb.append(this.activeTxns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTransactionStatStandardSchemeFactory implements SchemeFactory {
    public TTransactionStatStandardScheme getScheme() {
      return new TTransactionStatStandardScheme();
    }
  }

  private static class TTransactionStatStandardScheme extends StandardScheme<TTransactionStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTransactionStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INITTXNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inittxns = iprot.readI32();
              struct.setInittxnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_CKP_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastCkpFile = iprot.readI32();
              struct.setLastCkpFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CKP_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastCkpOffset = iprot.readI32();
              struct.setLastCkpOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastTxnId = iprot.readI32();
              struct.setLastTxnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_NACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNactive = iprot.readI32();
              struct.setMaxNactiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_NSNAPSHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNsnapshot = iprot.readI32();
              struct.setMaxNsnapshotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_TXNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxTxns = iprot.readI32();
              struct.setMaxTxnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NABORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.naborts = iprot.readI64();
              struct.setNabortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nactive = iprot.readI32();
              struct.setNactiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUM_BEGINS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numBegins = iprot.readI64();
              struct.setNumBeginsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NUM_COMMITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numCommits = iprot.readI64();
              struct.setNumCommitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NUM_RESTORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numRestores = iprot.readI32();
              struct.setNumRestoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NUM_SNAPSHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numSnapshot = iprot.readI32();
              struct.setNumSnapshotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REGION_NOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regionNowait = iprot.readI64();
              struct.setRegionNowaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REGION_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regionWait = iprot.readI64();
              struct.setRegionWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REG_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regSize = iprot.readI64();
              struct.setRegSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TIME_CKP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeCkp = iprot.readI64();
              struct.setTimeCkpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACTIVE_TXNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.activeTxns = new ArrayList<TActiveTxnStat>(_list26.size);
                TActiveTxnStat _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new TActiveTxnStat();
                  _elem27.read(iprot);
                  struct.activeTxns.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setActiveTxnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTransactionStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INITTXNS_FIELD_DESC);
      oprot.writeI32(struct.inittxns);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_CKP_FILE_FIELD_DESC);
      oprot.writeI32(struct.lastCkpFile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_CKP_OFFSET_FIELD_DESC);
      oprot.writeI32(struct.lastCkpOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_TXN_ID_FIELD_DESC);
      oprot.writeI32(struct.lastTxnId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NACTIVE_FIELD_DESC);
      oprot.writeI32(struct.maxNactive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NSNAPSHOT_FIELD_DESC);
      oprot.writeI32(struct.maxNsnapshot);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_TXNS_FIELD_DESC);
      oprot.writeI32(struct.maxTxns);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NABORTS_FIELD_DESC);
      oprot.writeI64(struct.naborts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NACTIVE_FIELD_DESC);
      oprot.writeI32(struct.nactive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_BEGINS_FIELD_DESC);
      oprot.writeI64(struct.numBegins);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_COMMITS_FIELD_DESC);
      oprot.writeI64(struct.numCommits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_RESTORES_FIELD_DESC);
      oprot.writeI32(struct.numRestores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_SNAPSHOT_FIELD_DESC);
      oprot.writeI32(struct.numSnapshot);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGION_NOWAIT_FIELD_DESC);
      oprot.writeI64(struct.regionNowait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGION_WAIT_FIELD_DESC);
      oprot.writeI64(struct.regionWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REG_SIZE_FIELD_DESC);
      oprot.writeI64(struct.regSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_CKP_FIELD_DESC);
      oprot.writeI64(struct.timeCkp);
      oprot.writeFieldEnd();
      if (struct.activeTxns != null) {
        oprot.writeFieldBegin(ACTIVE_TXNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.activeTxns.size()));
          for (TActiveTxnStat _iter29 : struct.activeTxns)
          {
            _iter29.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTransactionStatTupleSchemeFactory implements SchemeFactory {
    public TTransactionStatTupleScheme getScheme() {
      return new TTransactionStatTupleScheme();
    }
  }

  private static class TTransactionStatTupleScheme extends TupleScheme<TTransactionStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTransactionStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInittxns()) {
        optionals.set(0);
      }
      if (struct.isSetLastCkpFile()) {
        optionals.set(1);
      }
      if (struct.isSetLastCkpOffset()) {
        optionals.set(2);
      }
      if (struct.isSetLastTxnId()) {
        optionals.set(3);
      }
      if (struct.isSetMaxNactive()) {
        optionals.set(4);
      }
      if (struct.isSetMaxNsnapshot()) {
        optionals.set(5);
      }
      if (struct.isSetMaxTxns()) {
        optionals.set(6);
      }
      if (struct.isSetNaborts()) {
        optionals.set(7);
      }
      if (struct.isSetNactive()) {
        optionals.set(8);
      }
      if (struct.isSetNumBegins()) {
        optionals.set(9);
      }
      if (struct.isSetNumCommits()) {
        optionals.set(10);
      }
      if (struct.isSetNumRestores()) {
        optionals.set(11);
      }
      if (struct.isSetNumSnapshot()) {
        optionals.set(12);
      }
      if (struct.isSetRegionNowait()) {
        optionals.set(13);
      }
      if (struct.isSetRegionWait()) {
        optionals.set(14);
      }
      if (struct.isSetRegSize()) {
        optionals.set(15);
      }
      if (struct.isSetTimeCkp()) {
        optionals.set(16);
      }
      if (struct.isSetActiveTxns()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetInittxns()) {
        oprot.writeI32(struct.inittxns);
      }
      if (struct.isSetLastCkpFile()) {
        oprot.writeI32(struct.lastCkpFile);
      }
      if (struct.isSetLastCkpOffset()) {
        oprot.writeI32(struct.lastCkpOffset);
      }
      if (struct.isSetLastTxnId()) {
        oprot.writeI32(struct.lastTxnId);
      }
      if (struct.isSetMaxNactive()) {
        oprot.writeI32(struct.maxNactive);
      }
      if (struct.isSetMaxNsnapshot()) {
        oprot.writeI32(struct.maxNsnapshot);
      }
      if (struct.isSetMaxTxns()) {
        oprot.writeI32(struct.maxTxns);
      }
      if (struct.isSetNaborts()) {
        oprot.writeI64(struct.naborts);
      }
      if (struct.isSetNactive()) {
        oprot.writeI32(struct.nactive);
      }
      if (struct.isSetNumBegins()) {
        oprot.writeI64(struct.numBegins);
      }
      if (struct.isSetNumCommits()) {
        oprot.writeI64(struct.numCommits);
      }
      if (struct.isSetNumRestores()) {
        oprot.writeI32(struct.numRestores);
      }
      if (struct.isSetNumSnapshot()) {
        oprot.writeI32(struct.numSnapshot);
      }
      if (struct.isSetRegionNowait()) {
        oprot.writeI64(struct.regionNowait);
      }
      if (struct.isSetRegionWait()) {
        oprot.writeI64(struct.regionWait);
      }
      if (struct.isSetRegSize()) {
        oprot.writeI64(struct.regSize);
      }
      if (struct.isSetTimeCkp()) {
        oprot.writeI64(struct.timeCkp);
      }
      if (struct.isSetActiveTxns()) {
        {
          oprot.writeI32(struct.activeTxns.size());
          for (TActiveTxnStat _iter30 : struct.activeTxns)
          {
            _iter30.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTransactionStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.inittxns = iprot.readI32();
        struct.setInittxnsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastCkpFile = iprot.readI32();
        struct.setLastCkpFileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastCkpOffset = iprot.readI32();
        struct.setLastCkpOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastTxnId = iprot.readI32();
        struct.setLastTxnIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxNactive = iprot.readI32();
        struct.setMaxNactiveIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxNsnapshot = iprot.readI32();
        struct.setMaxNsnapshotIsSet(true);
      }
      if (incoming.get(6)) {
        struct.maxTxns = iprot.readI32();
        struct.setMaxTxnsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.naborts = iprot.readI64();
        struct.setNabortsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nactive = iprot.readI32();
        struct.setNactiveIsSet(true);
      }
      if (incoming.get(9)) {
        struct.numBegins = iprot.readI64();
        struct.setNumBeginsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.numCommits = iprot.readI64();
        struct.setNumCommitsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.numRestores = iprot.readI32();
        struct.setNumRestoresIsSet(true);
      }
      if (incoming.get(12)) {
        struct.numSnapshot = iprot.readI32();
        struct.setNumSnapshotIsSet(true);
      }
      if (incoming.get(13)) {
        struct.regionNowait = iprot.readI64();
        struct.setRegionNowaitIsSet(true);
      }
      if (incoming.get(14)) {
        struct.regionWait = iprot.readI64();
        struct.setRegionWaitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.regSize = iprot.readI64();
        struct.setRegSizeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.timeCkp = iprot.readI64();
        struct.setTimeCkpIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.activeTxns = new ArrayList<TActiveTxnStat>(_list31.size);
          TActiveTxnStat _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new TActiveTxnStat();
            _elem32.read(iprot);
            struct.activeTxns.add(_elem32);
          }
        }
        struct.setActiveTxnsIsSet(true);
      }
    }
  }

}

