/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class TSecondaryDatabaseConfig implements org.apache.thrift.TBase<TSecondaryDatabaseConfig, TSecondaryDatabaseConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TSecondaryDatabaseConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSecondaryDatabaseConfig");

  private static final org.apache.thrift.protocol.TField DB_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("dbConfig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FOREIGN_DB_FIELD_DESC = new org.apache.thrift.protocol.TField("foreignDb", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FOREIGN_KEY_DELETE_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("foreignKeyDeleteAction", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IMMUTABLE_SECONDARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("immutableSecondaryKey", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSecondaryDatabaseConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSecondaryDatabaseConfigTupleSchemeFactory());
  }

  public TDatabaseConfig dbConfig; // optional
  public TDatabase foreignDb; // optional
  /**
   * 
   * @see TFKDeleteAction
   */
  public TFKDeleteAction foreignKeyDeleteAction; // optional
  public boolean immutableSecondaryKey; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_CONFIG((short)1, "dbConfig"),
    FOREIGN_DB((short)2, "foreignDb"),
    /**
     * 
     * @see TFKDeleteAction
     */
    FOREIGN_KEY_DELETE_ACTION((short)3, "foreignKeyDeleteAction"),
    IMMUTABLE_SECONDARY_KEY((short)4, "immutableSecondaryKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_CONFIG
          return DB_CONFIG;
        case 2: // FOREIGN_DB
          return FOREIGN_DB;
        case 3: // FOREIGN_KEY_DELETE_ACTION
          return FOREIGN_KEY_DELETE_ACTION;
        case 4: // IMMUTABLE_SECONDARY_KEY
          return IMMUTABLE_SECONDARY_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IMMUTABLESECONDARYKEY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DB_CONFIG,_Fields.FOREIGN_DB,_Fields.FOREIGN_KEY_DELETE_ACTION,_Fields.IMMUTABLE_SECONDARY_KEY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("dbConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabaseConfig.class)));
    tmpMap.put(_Fields.FOREIGN_DB, new org.apache.thrift.meta_data.FieldMetaData("foreignDb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabase.class)));
    tmpMap.put(_Fields.FOREIGN_KEY_DELETE_ACTION, new org.apache.thrift.meta_data.FieldMetaData("foreignKeyDeleteAction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFKDeleteAction.class)));
    tmpMap.put(_Fields.IMMUTABLE_SECONDARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("immutableSecondaryKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSecondaryDatabaseConfig.class, metaDataMap);
  }

  public TSecondaryDatabaseConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSecondaryDatabaseConfig(TSecondaryDatabaseConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDbConfig()) {
      this.dbConfig = new TDatabaseConfig(other.dbConfig);
    }
    if (other.isSetForeignDb()) {
      this.foreignDb = new TDatabase(other.foreignDb);
    }
    if (other.isSetForeignKeyDeleteAction()) {
      this.foreignKeyDeleteAction = other.foreignKeyDeleteAction;
    }
    this.immutableSecondaryKey = other.immutableSecondaryKey;
  }

  public TSecondaryDatabaseConfig deepCopy() {
    return new TSecondaryDatabaseConfig(this);
  }

  @Override
  public void clear() {
    this.dbConfig = null;
    this.foreignDb = null;
    this.foreignKeyDeleteAction = null;
    setImmutableSecondaryKeyIsSet(false);
    this.immutableSecondaryKey = false;
  }

  public TDatabaseConfig getDbConfig() {
    return this.dbConfig;
  }

  public TSecondaryDatabaseConfig setDbConfig(TDatabaseConfig dbConfig) {
    this.dbConfig = dbConfig;
    return this;
  }

  public void unsetDbConfig() {
    this.dbConfig = null;
  }

  /** Returns true if field dbConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetDbConfig() {
    return this.dbConfig != null;
  }

  public void setDbConfigIsSet(boolean value) {
    if (!value) {
      this.dbConfig = null;
    }
  }

  public TDatabase getForeignDb() {
    return this.foreignDb;
  }

  public TSecondaryDatabaseConfig setForeignDb(TDatabase foreignDb) {
    this.foreignDb = foreignDb;
    return this;
  }

  public void unsetForeignDb() {
    this.foreignDb = null;
  }

  /** Returns true if field foreignDb is set (has been assigned a value) and false otherwise */
  public boolean isSetForeignDb() {
    return this.foreignDb != null;
  }

  public void setForeignDbIsSet(boolean value) {
    if (!value) {
      this.foreignDb = null;
    }
  }

  /**
   * 
   * @see TFKDeleteAction
   */
  public TFKDeleteAction getForeignKeyDeleteAction() {
    return this.foreignKeyDeleteAction;
  }

  /**
   * 
   * @see TFKDeleteAction
   */
  public TSecondaryDatabaseConfig setForeignKeyDeleteAction(TFKDeleteAction foreignKeyDeleteAction) {
    this.foreignKeyDeleteAction = foreignKeyDeleteAction;
    return this;
  }

  public void unsetForeignKeyDeleteAction() {
    this.foreignKeyDeleteAction = null;
  }

  /** Returns true if field foreignKeyDeleteAction is set (has been assigned a value) and false otherwise */
  public boolean isSetForeignKeyDeleteAction() {
    return this.foreignKeyDeleteAction != null;
  }

  public void setForeignKeyDeleteActionIsSet(boolean value) {
    if (!value) {
      this.foreignKeyDeleteAction = null;
    }
  }

  public boolean isImmutableSecondaryKey() {
    return this.immutableSecondaryKey;
  }

  public TSecondaryDatabaseConfig setImmutableSecondaryKey(boolean immutableSecondaryKey) {
    this.immutableSecondaryKey = immutableSecondaryKey;
    setImmutableSecondaryKeyIsSet(true);
    return this;
  }

  public void unsetImmutableSecondaryKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMMUTABLESECONDARYKEY_ISSET_ID);
  }

  /** Returns true if field immutableSecondaryKey is set (has been assigned a value) and false otherwise */
  public boolean isSetImmutableSecondaryKey() {
    return EncodingUtils.testBit(__isset_bitfield, __IMMUTABLESECONDARYKEY_ISSET_ID);
  }

  public void setImmutableSecondaryKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMMUTABLESECONDARYKEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DB_CONFIG:
      if (value == null) {
        unsetDbConfig();
      } else {
        setDbConfig((TDatabaseConfig)value);
      }
      break;

    case FOREIGN_DB:
      if (value == null) {
        unsetForeignDb();
      } else {
        setForeignDb((TDatabase)value);
      }
      break;

    case FOREIGN_KEY_DELETE_ACTION:
      if (value == null) {
        unsetForeignKeyDeleteAction();
      } else {
        setForeignKeyDeleteAction((TFKDeleteAction)value);
      }
      break;

    case IMMUTABLE_SECONDARY_KEY:
      if (value == null) {
        unsetImmutableSecondaryKey();
      } else {
        setImmutableSecondaryKey((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_CONFIG:
      return getDbConfig();

    case FOREIGN_DB:
      return getForeignDb();

    case FOREIGN_KEY_DELETE_ACTION:
      return getForeignKeyDeleteAction();

    case IMMUTABLE_SECONDARY_KEY:
      return Boolean.valueOf(isImmutableSecondaryKey());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DB_CONFIG:
      return isSetDbConfig();
    case FOREIGN_DB:
      return isSetForeignDb();
    case FOREIGN_KEY_DELETE_ACTION:
      return isSetForeignKeyDeleteAction();
    case IMMUTABLE_SECONDARY_KEY:
      return isSetImmutableSecondaryKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSecondaryDatabaseConfig)
      return this.equals((TSecondaryDatabaseConfig)that);
    return false;
  }

  public boolean equals(TSecondaryDatabaseConfig that) {
    if (that == null)
      return false;

    boolean this_present_dbConfig = true && this.isSetDbConfig();
    boolean that_present_dbConfig = true && that.isSetDbConfig();
    if (this_present_dbConfig || that_present_dbConfig) {
      if (!(this_present_dbConfig && that_present_dbConfig))
        return false;
      if (!this.dbConfig.equals(that.dbConfig))
        return false;
    }

    boolean this_present_foreignDb = true && this.isSetForeignDb();
    boolean that_present_foreignDb = true && that.isSetForeignDb();
    if (this_present_foreignDb || that_present_foreignDb) {
      if (!(this_present_foreignDb && that_present_foreignDb))
        return false;
      if (!this.foreignDb.equals(that.foreignDb))
        return false;
    }

    boolean this_present_foreignKeyDeleteAction = true && this.isSetForeignKeyDeleteAction();
    boolean that_present_foreignKeyDeleteAction = true && that.isSetForeignKeyDeleteAction();
    if (this_present_foreignKeyDeleteAction || that_present_foreignKeyDeleteAction) {
      if (!(this_present_foreignKeyDeleteAction && that_present_foreignKeyDeleteAction))
        return false;
      if (!this.foreignKeyDeleteAction.equals(that.foreignKeyDeleteAction))
        return false;
    }

    boolean this_present_immutableSecondaryKey = true && this.isSetImmutableSecondaryKey();
    boolean that_present_immutableSecondaryKey = true && that.isSetImmutableSecondaryKey();
    if (this_present_immutableSecondaryKey || that_present_immutableSecondaryKey) {
      if (!(this_present_immutableSecondaryKey && that_present_immutableSecondaryKey))
        return false;
      if (this.immutableSecondaryKey != that.immutableSecondaryKey)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dbConfig = true && (isSetDbConfig());
    list.add(present_dbConfig);
    if (present_dbConfig)
      list.add(dbConfig);

    boolean present_foreignDb = true && (isSetForeignDb());
    list.add(present_foreignDb);
    if (present_foreignDb)
      list.add(foreignDb);

    boolean present_foreignKeyDeleteAction = true && (isSetForeignKeyDeleteAction());
    list.add(present_foreignKeyDeleteAction);
    if (present_foreignKeyDeleteAction)
      list.add(foreignKeyDeleteAction.getValue());

    boolean present_immutableSecondaryKey = true && (isSetImmutableSecondaryKey());
    list.add(present_immutableSecondaryKey);
    if (present_immutableSecondaryKey)
      list.add(immutableSecondaryKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSecondaryDatabaseConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDbConfig()).compareTo(other.isSetDbConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbConfig, other.dbConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeignDb()).compareTo(other.isSetForeignDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeignDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreignDb, other.foreignDb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeignKeyDeleteAction()).compareTo(other.isSetForeignKeyDeleteAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeignKeyDeleteAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreignKeyDeleteAction, other.foreignKeyDeleteAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImmutableSecondaryKey()).compareTo(other.isSetImmutableSecondaryKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImmutableSecondaryKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.immutableSecondaryKey, other.immutableSecondaryKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSecondaryDatabaseConfig(");
    boolean first = true;

    if (isSetDbConfig()) {
      sb.append("dbConfig:");
      if (this.dbConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.dbConfig);
      }
      first = false;
    }
    if (isSetForeignDb()) {
      if (!first) sb.append(", ");
      sb.append("foreignDb:");
      if (this.foreignDb == null) {
        sb.append("null");
      } else {
        sb.append(this.foreignDb);
      }
      first = false;
    }
    if (isSetForeignKeyDeleteAction()) {
      if (!first) sb.append(", ");
      sb.append("foreignKeyDeleteAction:");
      if (this.foreignKeyDeleteAction == null) {
        sb.append("null");
      } else {
        sb.append(this.foreignKeyDeleteAction);
      }
      first = false;
    }
    if (isSetImmutableSecondaryKey()) {
      if (!first) sb.append(", ");
      sb.append("immutableSecondaryKey:");
      sb.append(this.immutableSecondaryKey);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dbConfig != null) {
      dbConfig.validate();
    }
    if (foreignDb != null) {
      foreignDb.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSecondaryDatabaseConfigStandardSchemeFactory implements SchemeFactory {
    public TSecondaryDatabaseConfigStandardScheme getScheme() {
      return new TSecondaryDatabaseConfigStandardScheme();
    }
  }

  private static class TSecondaryDatabaseConfigStandardScheme extends StandardScheme<TSecondaryDatabaseConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSecondaryDatabaseConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dbConfig = new TDatabaseConfig();
              struct.dbConfig.read(iprot);
              struct.setDbConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FOREIGN_DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.foreignDb = new TDatabase();
              struct.foreignDb.read(iprot);
              struct.setForeignDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOREIGN_KEY_DELETE_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreignKeyDeleteAction = com.sleepycat.thrift.TFKDeleteAction.findByValue(iprot.readI32());
              struct.setForeignKeyDeleteActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMMUTABLE_SECONDARY_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.immutableSecondaryKey = iprot.readBool();
              struct.setImmutableSecondaryKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSecondaryDatabaseConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dbConfig != null) {
        if (struct.isSetDbConfig()) {
          oprot.writeFieldBegin(DB_CONFIG_FIELD_DESC);
          struct.dbConfig.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.foreignDb != null) {
        if (struct.isSetForeignDb()) {
          oprot.writeFieldBegin(FOREIGN_DB_FIELD_DESC);
          struct.foreignDb.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.foreignKeyDeleteAction != null) {
        if (struct.isSetForeignKeyDeleteAction()) {
          oprot.writeFieldBegin(FOREIGN_KEY_DELETE_ACTION_FIELD_DESC);
          oprot.writeI32(struct.foreignKeyDeleteAction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetImmutableSecondaryKey()) {
        oprot.writeFieldBegin(IMMUTABLE_SECONDARY_KEY_FIELD_DESC);
        oprot.writeBool(struct.immutableSecondaryKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSecondaryDatabaseConfigTupleSchemeFactory implements SchemeFactory {
    public TSecondaryDatabaseConfigTupleScheme getScheme() {
      return new TSecondaryDatabaseConfigTupleScheme();
    }
  }

  private static class TSecondaryDatabaseConfigTupleScheme extends TupleScheme<TSecondaryDatabaseConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSecondaryDatabaseConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDbConfig()) {
        optionals.set(0);
      }
      if (struct.isSetForeignDb()) {
        optionals.set(1);
      }
      if (struct.isSetForeignKeyDeleteAction()) {
        optionals.set(2);
      }
      if (struct.isSetImmutableSecondaryKey()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDbConfig()) {
        struct.dbConfig.write(oprot);
      }
      if (struct.isSetForeignDb()) {
        struct.foreignDb.write(oprot);
      }
      if (struct.isSetForeignKeyDeleteAction()) {
        oprot.writeI32(struct.foreignKeyDeleteAction.getValue());
      }
      if (struct.isSetImmutableSecondaryKey()) {
        oprot.writeBool(struct.immutableSecondaryKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSecondaryDatabaseConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.dbConfig = new TDatabaseConfig();
        struct.dbConfig.read(iprot);
        struct.setDbConfigIsSet(true);
      }
      if (incoming.get(1)) {
        struct.foreignDb = new TDatabase();
        struct.foreignDb.read(iprot);
        struct.setForeignDbIsSet(true);
      }
      if (incoming.get(2)) {
        struct.foreignKeyDeleteAction = com.sleepycat.thrift.TFKDeleteAction.findByValue(iprot.readI32());
        struct.setForeignKeyDeleteActionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.immutableSecondaryKey = iprot.readBool();
        struct.setImmutableSecondaryKeyIsSet(true);
      }
    }
  }

}

