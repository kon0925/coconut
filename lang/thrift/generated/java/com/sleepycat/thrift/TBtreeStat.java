/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-9")
public class TBtreeStat implements org.apache.thrift.TBase<TBtreeStat, TBtreeStat._Fields>, java.io.Serializable, Cloneable, Comparable<TBtreeStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBtreeStat");

  private static final org.apache.thrift.protocol.TField DUP_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("dupPages", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DUP_PAGES_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("dupPagesFree", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EMPTY_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("emptyPages", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("free", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INT_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("intPages", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INT_PAGES_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("intPagesFree", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LEAF_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("leafPages", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LEAF_PAGES_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("leafPagesFree", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LEVELS_FIELD_DESC = new org.apache.thrift.protocol.TField("levels", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MAGIC_FIELD_DESC = new org.apache.thrift.protocol.TField("magic", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField META_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("metaFlags", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MIN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("minKey", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NUM_BLOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("numBlobs", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField NUM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("numData", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField NUM_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("numKeys", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField OVER_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("overPages", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField OVER_PAGES_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("overPagesFree", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField RE_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("reLen", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField RE_PAD_FIELD_DESC = new org.apache.thrift.protocol.TField("rePad", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBtreeStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBtreeStatTupleSchemeFactory());
  }

  public int dupPages; // required
  public long dupPagesFree; // required
  public int emptyPages; // required
  public int free; // required
  public int intPages; // required
  public long intPagesFree; // required
  public int leafPages; // required
  public long leafPagesFree; // required
  public int levels; // required
  public int magic; // required
  public int metaFlags; // required
  public int minKey; // required
  public int numBlobs; // required
  public int numData; // required
  public int numKeys; // required
  public int overPages; // required
  public long overPagesFree; // required
  public int pageCount; // required
  public int pageSize; // required
  public int reLen; // required
  public int rePad; // required
  public int version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DUP_PAGES((short)1, "dupPages"),
    DUP_PAGES_FREE((short)2, "dupPagesFree"),
    EMPTY_PAGES((short)3, "emptyPages"),
    FREE((short)4, "free"),
    INT_PAGES((short)5, "intPages"),
    INT_PAGES_FREE((short)6, "intPagesFree"),
    LEAF_PAGES((short)7, "leafPages"),
    LEAF_PAGES_FREE((short)8, "leafPagesFree"),
    LEVELS((short)9, "levels"),
    MAGIC((short)10, "magic"),
    META_FLAGS((short)11, "metaFlags"),
    MIN_KEY((short)12, "minKey"),
    NUM_BLOBS((short)13, "numBlobs"),
    NUM_DATA((short)14, "numData"),
    NUM_KEYS((short)15, "numKeys"),
    OVER_PAGES((short)16, "overPages"),
    OVER_PAGES_FREE((short)17, "overPagesFree"),
    PAGE_COUNT((short)18, "pageCount"),
    PAGE_SIZE((short)19, "pageSize"),
    RE_LEN((short)20, "reLen"),
    RE_PAD((short)21, "rePad"),
    VERSION((short)22, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DUP_PAGES
          return DUP_PAGES;
        case 2: // DUP_PAGES_FREE
          return DUP_PAGES_FREE;
        case 3: // EMPTY_PAGES
          return EMPTY_PAGES;
        case 4: // FREE
          return FREE;
        case 5: // INT_PAGES
          return INT_PAGES;
        case 6: // INT_PAGES_FREE
          return INT_PAGES_FREE;
        case 7: // LEAF_PAGES
          return LEAF_PAGES;
        case 8: // LEAF_PAGES_FREE
          return LEAF_PAGES_FREE;
        case 9: // LEVELS
          return LEVELS;
        case 10: // MAGIC
          return MAGIC;
        case 11: // META_FLAGS
          return META_FLAGS;
        case 12: // MIN_KEY
          return MIN_KEY;
        case 13: // NUM_BLOBS
          return NUM_BLOBS;
        case 14: // NUM_DATA
          return NUM_DATA;
        case 15: // NUM_KEYS
          return NUM_KEYS;
        case 16: // OVER_PAGES
          return OVER_PAGES;
        case 17: // OVER_PAGES_FREE
          return OVER_PAGES_FREE;
        case 18: // PAGE_COUNT
          return PAGE_COUNT;
        case 19: // PAGE_SIZE
          return PAGE_SIZE;
        case 20: // RE_LEN
          return RE_LEN;
        case 21: // RE_PAD
          return RE_PAD;
        case 22: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DUPPAGES_ISSET_ID = 0;
  private static final int __DUPPAGESFREE_ISSET_ID = 1;
  private static final int __EMPTYPAGES_ISSET_ID = 2;
  private static final int __FREE_ISSET_ID = 3;
  private static final int __INTPAGES_ISSET_ID = 4;
  private static final int __INTPAGESFREE_ISSET_ID = 5;
  private static final int __LEAFPAGES_ISSET_ID = 6;
  private static final int __LEAFPAGESFREE_ISSET_ID = 7;
  private static final int __LEVELS_ISSET_ID = 8;
  private static final int __MAGIC_ISSET_ID = 9;
  private static final int __METAFLAGS_ISSET_ID = 10;
  private static final int __MINKEY_ISSET_ID = 11;
  private static final int __NUMBLOBS_ISSET_ID = 12;
  private static final int __NUMDATA_ISSET_ID = 13;
  private static final int __NUMKEYS_ISSET_ID = 14;
  private static final int __OVERPAGES_ISSET_ID = 15;
  private static final int __OVERPAGESFREE_ISSET_ID = 16;
  private static final int __PAGECOUNT_ISSET_ID = 17;
  private static final int __PAGESIZE_ISSET_ID = 18;
  private static final int __RELEN_ISSET_ID = 19;
  private static final int __REPAD_ISSET_ID = 20;
  private static final int __VERSION_ISSET_ID = 21;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DUP_PAGES, new org.apache.thrift.meta_data.FieldMetaData("dupPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUP_PAGES_FREE, new org.apache.thrift.meta_data.FieldMetaData("dupPagesFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMPTY_PAGES, new org.apache.thrift.meta_data.FieldMetaData("emptyPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREE, new org.apache.thrift.meta_data.FieldMetaData("free", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT_PAGES, new org.apache.thrift.meta_data.FieldMetaData("intPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT_PAGES_FREE, new org.apache.thrift.meta_data.FieldMetaData("intPagesFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEAF_PAGES, new org.apache.thrift.meta_data.FieldMetaData("leafPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEAF_PAGES_FREE, new org.apache.thrift.meta_data.FieldMetaData("leafPagesFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEVELS, new org.apache.thrift.meta_data.FieldMetaData("levels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAGIC, new org.apache.thrift.meta_data.FieldMetaData("magic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.META_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("metaFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_KEY, new org.apache.thrift.meta_data.FieldMetaData("minKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_BLOBS, new org.apache.thrift.meta_data.FieldMetaData("numBlobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_DATA, new org.apache.thrift.meta_data.FieldMetaData("numData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_KEYS, new org.apache.thrift.meta_data.FieldMetaData("numKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVER_PAGES, new org.apache.thrift.meta_data.FieldMetaData("overPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVER_PAGES_FREE, new org.apache.thrift.meta_data.FieldMetaData("overPagesFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_LEN, new org.apache.thrift.meta_data.FieldMetaData("reLen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_PAD, new org.apache.thrift.meta_data.FieldMetaData("rePad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBtreeStat.class, metaDataMap);
  }

  public TBtreeStat() {
  }

  public TBtreeStat(
    int dupPages,
    long dupPagesFree,
    int emptyPages,
    int free,
    int intPages,
    long intPagesFree,
    int leafPages,
    long leafPagesFree,
    int levels,
    int magic,
    int metaFlags,
    int minKey,
    int numBlobs,
    int numData,
    int numKeys,
    int overPages,
    long overPagesFree,
    int pageCount,
    int pageSize,
    int reLen,
    int rePad,
    int version)
  {
    this();
    this.dupPages = dupPages;
    setDupPagesIsSet(true);
    this.dupPagesFree = dupPagesFree;
    setDupPagesFreeIsSet(true);
    this.emptyPages = emptyPages;
    setEmptyPagesIsSet(true);
    this.free = free;
    setFreeIsSet(true);
    this.intPages = intPages;
    setIntPagesIsSet(true);
    this.intPagesFree = intPagesFree;
    setIntPagesFreeIsSet(true);
    this.leafPages = leafPages;
    setLeafPagesIsSet(true);
    this.leafPagesFree = leafPagesFree;
    setLeafPagesFreeIsSet(true);
    this.levels = levels;
    setLevelsIsSet(true);
    this.magic = magic;
    setMagicIsSet(true);
    this.metaFlags = metaFlags;
    setMetaFlagsIsSet(true);
    this.minKey = minKey;
    setMinKeyIsSet(true);
    this.numBlobs = numBlobs;
    setNumBlobsIsSet(true);
    this.numData = numData;
    setNumDataIsSet(true);
    this.numKeys = numKeys;
    setNumKeysIsSet(true);
    this.overPages = overPages;
    setOverPagesIsSet(true);
    this.overPagesFree = overPagesFree;
    setOverPagesFreeIsSet(true);
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.reLen = reLen;
    setReLenIsSet(true);
    this.rePad = rePad;
    setRePadIsSet(true);
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBtreeStat(TBtreeStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dupPages = other.dupPages;
    this.dupPagesFree = other.dupPagesFree;
    this.emptyPages = other.emptyPages;
    this.free = other.free;
    this.intPages = other.intPages;
    this.intPagesFree = other.intPagesFree;
    this.leafPages = other.leafPages;
    this.leafPagesFree = other.leafPagesFree;
    this.levels = other.levels;
    this.magic = other.magic;
    this.metaFlags = other.metaFlags;
    this.minKey = other.minKey;
    this.numBlobs = other.numBlobs;
    this.numData = other.numData;
    this.numKeys = other.numKeys;
    this.overPages = other.overPages;
    this.overPagesFree = other.overPagesFree;
    this.pageCount = other.pageCount;
    this.pageSize = other.pageSize;
    this.reLen = other.reLen;
    this.rePad = other.rePad;
    this.version = other.version;
  }

  public TBtreeStat deepCopy() {
    return new TBtreeStat(this);
  }

  @Override
  public void clear() {
    setDupPagesIsSet(false);
    this.dupPages = 0;
    setDupPagesFreeIsSet(false);
    this.dupPagesFree = 0;
    setEmptyPagesIsSet(false);
    this.emptyPages = 0;
    setFreeIsSet(false);
    this.free = 0;
    setIntPagesIsSet(false);
    this.intPages = 0;
    setIntPagesFreeIsSet(false);
    this.intPagesFree = 0;
    setLeafPagesIsSet(false);
    this.leafPages = 0;
    setLeafPagesFreeIsSet(false);
    this.leafPagesFree = 0;
    setLevelsIsSet(false);
    this.levels = 0;
    setMagicIsSet(false);
    this.magic = 0;
    setMetaFlagsIsSet(false);
    this.metaFlags = 0;
    setMinKeyIsSet(false);
    this.minKey = 0;
    setNumBlobsIsSet(false);
    this.numBlobs = 0;
    setNumDataIsSet(false);
    this.numData = 0;
    setNumKeysIsSet(false);
    this.numKeys = 0;
    setOverPagesIsSet(false);
    this.overPages = 0;
    setOverPagesFreeIsSet(false);
    this.overPagesFree = 0;
    setPageCountIsSet(false);
    this.pageCount = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setReLenIsSet(false);
    this.reLen = 0;
    setRePadIsSet(false);
    this.rePad = 0;
    setVersionIsSet(false);
    this.version = 0;
  }

  public int getDupPages() {
    return this.dupPages;
  }

  public TBtreeStat setDupPages(int dupPages) {
    this.dupPages = dupPages;
    setDupPagesIsSet(true);
    return this;
  }

  public void unsetDupPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUPPAGES_ISSET_ID);
  }

  /** Returns true if field dupPages is set (has been assigned a value) and false otherwise */
  public boolean isSetDupPages() {
    return EncodingUtils.testBit(__isset_bitfield, __DUPPAGES_ISSET_ID);
  }

  public void setDupPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUPPAGES_ISSET_ID, value);
  }

  public long getDupPagesFree() {
    return this.dupPagesFree;
  }

  public TBtreeStat setDupPagesFree(long dupPagesFree) {
    this.dupPagesFree = dupPagesFree;
    setDupPagesFreeIsSet(true);
    return this;
  }

  public void unsetDupPagesFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUPPAGESFREE_ISSET_ID);
  }

  /** Returns true if field dupPagesFree is set (has been assigned a value) and false otherwise */
  public boolean isSetDupPagesFree() {
    return EncodingUtils.testBit(__isset_bitfield, __DUPPAGESFREE_ISSET_ID);
  }

  public void setDupPagesFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUPPAGESFREE_ISSET_ID, value);
  }

  public int getEmptyPages() {
    return this.emptyPages;
  }

  public TBtreeStat setEmptyPages(int emptyPages) {
    this.emptyPages = emptyPages;
    setEmptyPagesIsSet(true);
    return this;
  }

  public void unsetEmptyPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMPTYPAGES_ISSET_ID);
  }

  /** Returns true if field emptyPages is set (has been assigned a value) and false otherwise */
  public boolean isSetEmptyPages() {
    return EncodingUtils.testBit(__isset_bitfield, __EMPTYPAGES_ISSET_ID);
  }

  public void setEmptyPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMPTYPAGES_ISSET_ID, value);
  }

  public int getFree() {
    return this.free;
  }

  public TBtreeStat setFree(int free) {
    this.free = free;
    setFreeIsSet(true);
    return this;
  }

  public void unsetFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  /** Returns true if field free is set (has been assigned a value) and false otherwise */
  public boolean isSetFree() {
    return EncodingUtils.testBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  public void setFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREE_ISSET_ID, value);
  }

  public int getIntPages() {
    return this.intPages;
  }

  public TBtreeStat setIntPages(int intPages) {
    this.intPages = intPages;
    setIntPagesIsSet(true);
    return this;
  }

  public void unsetIntPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTPAGES_ISSET_ID);
  }

  /** Returns true if field intPages is set (has been assigned a value) and false otherwise */
  public boolean isSetIntPages() {
    return EncodingUtils.testBit(__isset_bitfield, __INTPAGES_ISSET_ID);
  }

  public void setIntPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTPAGES_ISSET_ID, value);
  }

  public long getIntPagesFree() {
    return this.intPagesFree;
  }

  public TBtreeStat setIntPagesFree(long intPagesFree) {
    this.intPagesFree = intPagesFree;
    setIntPagesFreeIsSet(true);
    return this;
  }

  public void unsetIntPagesFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTPAGESFREE_ISSET_ID);
  }

  /** Returns true if field intPagesFree is set (has been assigned a value) and false otherwise */
  public boolean isSetIntPagesFree() {
    return EncodingUtils.testBit(__isset_bitfield, __INTPAGESFREE_ISSET_ID);
  }

  public void setIntPagesFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTPAGESFREE_ISSET_ID, value);
  }

  public int getLeafPages() {
    return this.leafPages;
  }

  public TBtreeStat setLeafPages(int leafPages) {
    this.leafPages = leafPages;
    setLeafPagesIsSet(true);
    return this;
  }

  public void unsetLeafPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEAFPAGES_ISSET_ID);
  }

  /** Returns true if field leafPages is set (has been assigned a value) and false otherwise */
  public boolean isSetLeafPages() {
    return EncodingUtils.testBit(__isset_bitfield, __LEAFPAGES_ISSET_ID);
  }

  public void setLeafPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEAFPAGES_ISSET_ID, value);
  }

  public long getLeafPagesFree() {
    return this.leafPagesFree;
  }

  public TBtreeStat setLeafPagesFree(long leafPagesFree) {
    this.leafPagesFree = leafPagesFree;
    setLeafPagesFreeIsSet(true);
    return this;
  }

  public void unsetLeafPagesFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEAFPAGESFREE_ISSET_ID);
  }

  /** Returns true if field leafPagesFree is set (has been assigned a value) and false otherwise */
  public boolean isSetLeafPagesFree() {
    return EncodingUtils.testBit(__isset_bitfield, __LEAFPAGESFREE_ISSET_ID);
  }

  public void setLeafPagesFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEAFPAGESFREE_ISSET_ID, value);
  }

  public int getLevels() {
    return this.levels;
  }

  public TBtreeStat setLevels(int levels) {
    this.levels = levels;
    setLevelsIsSet(true);
    return this;
  }

  public void unsetLevels() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELS_ISSET_ID);
  }

  /** Returns true if field levels is set (has been assigned a value) and false otherwise */
  public boolean isSetLevels() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVELS_ISSET_ID);
  }

  public void setLevelsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELS_ISSET_ID, value);
  }

  public int getMagic() {
    return this.magic;
  }

  public TBtreeStat setMagic(int magic) {
    this.magic = magic;
    setMagicIsSet(true);
    return this;
  }

  public void unsetMagic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAGIC_ISSET_ID);
  }

  /** Returns true if field magic is set (has been assigned a value) and false otherwise */
  public boolean isSetMagic() {
    return EncodingUtils.testBit(__isset_bitfield, __MAGIC_ISSET_ID);
  }

  public void setMagicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAGIC_ISSET_ID, value);
  }

  public int getMetaFlags() {
    return this.metaFlags;
  }

  public TBtreeStat setMetaFlags(int metaFlags) {
    this.metaFlags = metaFlags;
    setMetaFlagsIsSet(true);
    return this;
  }

  public void unsetMetaFlags() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METAFLAGS_ISSET_ID);
  }

  /** Returns true if field metaFlags is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaFlags() {
    return EncodingUtils.testBit(__isset_bitfield, __METAFLAGS_ISSET_ID);
  }

  public void setMetaFlagsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METAFLAGS_ISSET_ID, value);
  }

  public int getMinKey() {
    return this.minKey;
  }

  public TBtreeStat setMinKey(int minKey) {
    this.minKey = minKey;
    setMinKeyIsSet(true);
    return this;
  }

  public void unsetMinKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINKEY_ISSET_ID);
  }

  /** Returns true if field minKey is set (has been assigned a value) and false otherwise */
  public boolean isSetMinKey() {
    return EncodingUtils.testBit(__isset_bitfield, __MINKEY_ISSET_ID);
  }

  public void setMinKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINKEY_ISSET_ID, value);
  }

  public int getNumBlobs() {
    return this.numBlobs;
  }

  public TBtreeStat setNumBlobs(int numBlobs) {
    this.numBlobs = numBlobs;
    setNumBlobsIsSet(true);
    return this;
  }

  public void unsetNumBlobs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBLOBS_ISSET_ID);
  }

  /** Returns true if field numBlobs is set (has been assigned a value) and false otherwise */
  public boolean isSetNumBlobs() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBLOBS_ISSET_ID);
  }

  public void setNumBlobsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBLOBS_ISSET_ID, value);
  }

  public int getNumData() {
    return this.numData;
  }

  public TBtreeStat setNumData(int numData) {
    this.numData = numData;
    setNumDataIsSet(true);
    return this;
  }

  public void unsetNumData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMDATA_ISSET_ID);
  }

  /** Returns true if field numData is set (has been assigned a value) and false otherwise */
  public boolean isSetNumData() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMDATA_ISSET_ID);
  }

  public void setNumDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMDATA_ISSET_ID, value);
  }

  public int getNumKeys() {
    return this.numKeys;
  }

  public TBtreeStat setNumKeys(int numKeys) {
    this.numKeys = numKeys;
    setNumKeysIsSet(true);
    return this;
  }

  public void unsetNumKeys() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMKEYS_ISSET_ID);
  }

  /** Returns true if field numKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetNumKeys() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMKEYS_ISSET_ID);
  }

  public void setNumKeysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMKEYS_ISSET_ID, value);
  }

  public int getOverPages() {
    return this.overPages;
  }

  public TBtreeStat setOverPages(int overPages) {
    this.overPages = overPages;
    setOverPagesIsSet(true);
    return this;
  }

  public void unsetOverPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERPAGES_ISSET_ID);
  }

  /** Returns true if field overPages is set (has been assigned a value) and false otherwise */
  public boolean isSetOverPages() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERPAGES_ISSET_ID);
  }

  public void setOverPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERPAGES_ISSET_ID, value);
  }

  public long getOverPagesFree() {
    return this.overPagesFree;
  }

  public TBtreeStat setOverPagesFree(long overPagesFree) {
    this.overPagesFree = overPagesFree;
    setOverPagesFreeIsSet(true);
    return this;
  }

  public void unsetOverPagesFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERPAGESFREE_ISSET_ID);
  }

  /** Returns true if field overPagesFree is set (has been assigned a value) and false otherwise */
  public boolean isSetOverPagesFree() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERPAGESFREE_ISSET_ID);
  }

  public void setOverPagesFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERPAGESFREE_ISSET_ID, value);
  }

  public int getPageCount() {
    return this.pageCount;
  }

  public TBtreeStat setPageCount(int pageCount) {
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    return this;
  }

  public void unsetPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  public void setPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public TBtreeStat setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getReLen() {
    return this.reLen;
  }

  public TBtreeStat setReLen(int reLen) {
    this.reLen = reLen;
    setReLenIsSet(true);
    return this;
  }

  public void unsetReLen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELEN_ISSET_ID);
  }

  /** Returns true if field reLen is set (has been assigned a value) and false otherwise */
  public boolean isSetReLen() {
    return EncodingUtils.testBit(__isset_bitfield, __RELEN_ISSET_ID);
  }

  public void setReLenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELEN_ISSET_ID, value);
  }

  public int getRePad() {
    return this.rePad;
  }

  public TBtreeStat setRePad(int rePad) {
    this.rePad = rePad;
    setRePadIsSet(true);
    return this;
  }

  public void unsetRePad() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAD_ISSET_ID);
  }

  /** Returns true if field rePad is set (has been assigned a value) and false otherwise */
  public boolean isSetRePad() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAD_ISSET_ID);
  }

  public void setRePadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAD_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public TBtreeStat setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DUP_PAGES:
      if (value == null) {
        unsetDupPages();
      } else {
        setDupPages((Integer)value);
      }
      break;

    case DUP_PAGES_FREE:
      if (value == null) {
        unsetDupPagesFree();
      } else {
        setDupPagesFree((Long)value);
      }
      break;

    case EMPTY_PAGES:
      if (value == null) {
        unsetEmptyPages();
      } else {
        setEmptyPages((Integer)value);
      }
      break;

    case FREE:
      if (value == null) {
        unsetFree();
      } else {
        setFree((Integer)value);
      }
      break;

    case INT_PAGES:
      if (value == null) {
        unsetIntPages();
      } else {
        setIntPages((Integer)value);
      }
      break;

    case INT_PAGES_FREE:
      if (value == null) {
        unsetIntPagesFree();
      } else {
        setIntPagesFree((Long)value);
      }
      break;

    case LEAF_PAGES:
      if (value == null) {
        unsetLeafPages();
      } else {
        setLeafPages((Integer)value);
      }
      break;

    case LEAF_PAGES_FREE:
      if (value == null) {
        unsetLeafPagesFree();
      } else {
        setLeafPagesFree((Long)value);
      }
      break;

    case LEVELS:
      if (value == null) {
        unsetLevels();
      } else {
        setLevels((Integer)value);
      }
      break;

    case MAGIC:
      if (value == null) {
        unsetMagic();
      } else {
        setMagic((Integer)value);
      }
      break;

    case META_FLAGS:
      if (value == null) {
        unsetMetaFlags();
      } else {
        setMetaFlags((Integer)value);
      }
      break;

    case MIN_KEY:
      if (value == null) {
        unsetMinKey();
      } else {
        setMinKey((Integer)value);
      }
      break;

    case NUM_BLOBS:
      if (value == null) {
        unsetNumBlobs();
      } else {
        setNumBlobs((Integer)value);
      }
      break;

    case NUM_DATA:
      if (value == null) {
        unsetNumData();
      } else {
        setNumData((Integer)value);
      }
      break;

    case NUM_KEYS:
      if (value == null) {
        unsetNumKeys();
      } else {
        setNumKeys((Integer)value);
      }
      break;

    case OVER_PAGES:
      if (value == null) {
        unsetOverPages();
      } else {
        setOverPages((Integer)value);
      }
      break;

    case OVER_PAGES_FREE:
      if (value == null) {
        unsetOverPagesFree();
      } else {
        setOverPagesFree((Long)value);
      }
      break;

    case PAGE_COUNT:
      if (value == null) {
        unsetPageCount();
      } else {
        setPageCount((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case RE_LEN:
      if (value == null) {
        unsetReLen();
      } else {
        setReLen((Integer)value);
      }
      break;

    case RE_PAD:
      if (value == null) {
        unsetRePad();
      } else {
        setRePad((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DUP_PAGES:
      return Integer.valueOf(getDupPages());

    case DUP_PAGES_FREE:
      return Long.valueOf(getDupPagesFree());

    case EMPTY_PAGES:
      return Integer.valueOf(getEmptyPages());

    case FREE:
      return Integer.valueOf(getFree());

    case INT_PAGES:
      return Integer.valueOf(getIntPages());

    case INT_PAGES_FREE:
      return Long.valueOf(getIntPagesFree());

    case LEAF_PAGES:
      return Integer.valueOf(getLeafPages());

    case LEAF_PAGES_FREE:
      return Long.valueOf(getLeafPagesFree());

    case LEVELS:
      return Integer.valueOf(getLevels());

    case MAGIC:
      return Integer.valueOf(getMagic());

    case META_FLAGS:
      return Integer.valueOf(getMetaFlags());

    case MIN_KEY:
      return Integer.valueOf(getMinKey());

    case NUM_BLOBS:
      return Integer.valueOf(getNumBlobs());

    case NUM_DATA:
      return Integer.valueOf(getNumData());

    case NUM_KEYS:
      return Integer.valueOf(getNumKeys());

    case OVER_PAGES:
      return Integer.valueOf(getOverPages());

    case OVER_PAGES_FREE:
      return Long.valueOf(getOverPagesFree());

    case PAGE_COUNT:
      return Integer.valueOf(getPageCount());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case RE_LEN:
      return Integer.valueOf(getReLen());

    case RE_PAD:
      return Integer.valueOf(getRePad());

    case VERSION:
      return Integer.valueOf(getVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DUP_PAGES:
      return isSetDupPages();
    case DUP_PAGES_FREE:
      return isSetDupPagesFree();
    case EMPTY_PAGES:
      return isSetEmptyPages();
    case FREE:
      return isSetFree();
    case INT_PAGES:
      return isSetIntPages();
    case INT_PAGES_FREE:
      return isSetIntPagesFree();
    case LEAF_PAGES:
      return isSetLeafPages();
    case LEAF_PAGES_FREE:
      return isSetLeafPagesFree();
    case LEVELS:
      return isSetLevels();
    case MAGIC:
      return isSetMagic();
    case META_FLAGS:
      return isSetMetaFlags();
    case MIN_KEY:
      return isSetMinKey();
    case NUM_BLOBS:
      return isSetNumBlobs();
    case NUM_DATA:
      return isSetNumData();
    case NUM_KEYS:
      return isSetNumKeys();
    case OVER_PAGES:
      return isSetOverPages();
    case OVER_PAGES_FREE:
      return isSetOverPagesFree();
    case PAGE_COUNT:
      return isSetPageCount();
    case PAGE_SIZE:
      return isSetPageSize();
    case RE_LEN:
      return isSetReLen();
    case RE_PAD:
      return isSetRePad();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBtreeStat)
      return this.equals((TBtreeStat)that);
    return false;
  }

  public boolean equals(TBtreeStat that) {
    if (that == null)
      return false;

    boolean this_present_dupPages = true;
    boolean that_present_dupPages = true;
    if (this_present_dupPages || that_present_dupPages) {
      if (!(this_present_dupPages && that_present_dupPages))
        return false;
      if (this.dupPages != that.dupPages)
        return false;
    }

    boolean this_present_dupPagesFree = true;
    boolean that_present_dupPagesFree = true;
    if (this_present_dupPagesFree || that_present_dupPagesFree) {
      if (!(this_present_dupPagesFree && that_present_dupPagesFree))
        return false;
      if (this.dupPagesFree != that.dupPagesFree)
        return false;
    }

    boolean this_present_emptyPages = true;
    boolean that_present_emptyPages = true;
    if (this_present_emptyPages || that_present_emptyPages) {
      if (!(this_present_emptyPages && that_present_emptyPages))
        return false;
      if (this.emptyPages != that.emptyPages)
        return false;
    }

    boolean this_present_free = true;
    boolean that_present_free = true;
    if (this_present_free || that_present_free) {
      if (!(this_present_free && that_present_free))
        return false;
      if (this.free != that.free)
        return false;
    }

    boolean this_present_intPages = true;
    boolean that_present_intPages = true;
    if (this_present_intPages || that_present_intPages) {
      if (!(this_present_intPages && that_present_intPages))
        return false;
      if (this.intPages != that.intPages)
        return false;
    }

    boolean this_present_intPagesFree = true;
    boolean that_present_intPagesFree = true;
    if (this_present_intPagesFree || that_present_intPagesFree) {
      if (!(this_present_intPagesFree && that_present_intPagesFree))
        return false;
      if (this.intPagesFree != that.intPagesFree)
        return false;
    }

    boolean this_present_leafPages = true;
    boolean that_present_leafPages = true;
    if (this_present_leafPages || that_present_leafPages) {
      if (!(this_present_leafPages && that_present_leafPages))
        return false;
      if (this.leafPages != that.leafPages)
        return false;
    }

    boolean this_present_leafPagesFree = true;
    boolean that_present_leafPagesFree = true;
    if (this_present_leafPagesFree || that_present_leafPagesFree) {
      if (!(this_present_leafPagesFree && that_present_leafPagesFree))
        return false;
      if (this.leafPagesFree != that.leafPagesFree)
        return false;
    }

    boolean this_present_levels = true;
    boolean that_present_levels = true;
    if (this_present_levels || that_present_levels) {
      if (!(this_present_levels && that_present_levels))
        return false;
      if (this.levels != that.levels)
        return false;
    }

    boolean this_present_magic = true;
    boolean that_present_magic = true;
    if (this_present_magic || that_present_magic) {
      if (!(this_present_magic && that_present_magic))
        return false;
      if (this.magic != that.magic)
        return false;
    }

    boolean this_present_metaFlags = true;
    boolean that_present_metaFlags = true;
    if (this_present_metaFlags || that_present_metaFlags) {
      if (!(this_present_metaFlags && that_present_metaFlags))
        return false;
      if (this.metaFlags != that.metaFlags)
        return false;
    }

    boolean this_present_minKey = true;
    boolean that_present_minKey = true;
    if (this_present_minKey || that_present_minKey) {
      if (!(this_present_minKey && that_present_minKey))
        return false;
      if (this.minKey != that.minKey)
        return false;
    }

    boolean this_present_numBlobs = true;
    boolean that_present_numBlobs = true;
    if (this_present_numBlobs || that_present_numBlobs) {
      if (!(this_present_numBlobs && that_present_numBlobs))
        return false;
      if (this.numBlobs != that.numBlobs)
        return false;
    }

    boolean this_present_numData = true;
    boolean that_present_numData = true;
    if (this_present_numData || that_present_numData) {
      if (!(this_present_numData && that_present_numData))
        return false;
      if (this.numData != that.numData)
        return false;
    }

    boolean this_present_numKeys = true;
    boolean that_present_numKeys = true;
    if (this_present_numKeys || that_present_numKeys) {
      if (!(this_present_numKeys && that_present_numKeys))
        return false;
      if (this.numKeys != that.numKeys)
        return false;
    }

    boolean this_present_overPages = true;
    boolean that_present_overPages = true;
    if (this_present_overPages || that_present_overPages) {
      if (!(this_present_overPages && that_present_overPages))
        return false;
      if (this.overPages != that.overPages)
        return false;
    }

    boolean this_present_overPagesFree = true;
    boolean that_present_overPagesFree = true;
    if (this_present_overPagesFree || that_present_overPagesFree) {
      if (!(this_present_overPagesFree && that_present_overPagesFree))
        return false;
      if (this.overPagesFree != that.overPagesFree)
        return false;
    }

    boolean this_present_pageCount = true;
    boolean that_present_pageCount = true;
    if (this_present_pageCount || that_present_pageCount) {
      if (!(this_present_pageCount && that_present_pageCount))
        return false;
      if (this.pageCount != that.pageCount)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_reLen = true;
    boolean that_present_reLen = true;
    if (this_present_reLen || that_present_reLen) {
      if (!(this_present_reLen && that_present_reLen))
        return false;
      if (this.reLen != that.reLen)
        return false;
    }

    boolean this_present_rePad = true;
    boolean that_present_rePad = true;
    if (this_present_rePad || that_present_rePad) {
      if (!(this_present_rePad && that_present_rePad))
        return false;
      if (this.rePad != that.rePad)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dupPages = true;
    list.add(present_dupPages);
    if (present_dupPages)
      list.add(dupPages);

    boolean present_dupPagesFree = true;
    list.add(present_dupPagesFree);
    if (present_dupPagesFree)
      list.add(dupPagesFree);

    boolean present_emptyPages = true;
    list.add(present_emptyPages);
    if (present_emptyPages)
      list.add(emptyPages);

    boolean present_free = true;
    list.add(present_free);
    if (present_free)
      list.add(free);

    boolean present_intPages = true;
    list.add(present_intPages);
    if (present_intPages)
      list.add(intPages);

    boolean present_intPagesFree = true;
    list.add(present_intPagesFree);
    if (present_intPagesFree)
      list.add(intPagesFree);

    boolean present_leafPages = true;
    list.add(present_leafPages);
    if (present_leafPages)
      list.add(leafPages);

    boolean present_leafPagesFree = true;
    list.add(present_leafPagesFree);
    if (present_leafPagesFree)
      list.add(leafPagesFree);

    boolean present_levels = true;
    list.add(present_levels);
    if (present_levels)
      list.add(levels);

    boolean present_magic = true;
    list.add(present_magic);
    if (present_magic)
      list.add(magic);

    boolean present_metaFlags = true;
    list.add(present_metaFlags);
    if (present_metaFlags)
      list.add(metaFlags);

    boolean present_minKey = true;
    list.add(present_minKey);
    if (present_minKey)
      list.add(minKey);

    boolean present_numBlobs = true;
    list.add(present_numBlobs);
    if (present_numBlobs)
      list.add(numBlobs);

    boolean present_numData = true;
    list.add(present_numData);
    if (present_numData)
      list.add(numData);

    boolean present_numKeys = true;
    list.add(present_numKeys);
    if (present_numKeys)
      list.add(numKeys);

    boolean present_overPages = true;
    list.add(present_overPages);
    if (present_overPages)
      list.add(overPages);

    boolean present_overPagesFree = true;
    list.add(present_overPagesFree);
    if (present_overPagesFree)
      list.add(overPagesFree);

    boolean present_pageCount = true;
    list.add(present_pageCount);
    if (present_pageCount)
      list.add(pageCount);

    boolean present_pageSize = true;
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_reLen = true;
    list.add(present_reLen);
    if (present_reLen)
      list.add(reLen);

    boolean present_rePad = true;
    list.add(present_rePad);
    if (present_rePad)
      list.add(rePad);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBtreeStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDupPages()).compareTo(other.isSetDupPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDupPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dupPages, other.dupPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDupPagesFree()).compareTo(other.isSetDupPagesFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDupPagesFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dupPagesFree, other.dupPagesFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmptyPages()).compareTo(other.isSetEmptyPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmptyPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emptyPages, other.emptyPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFree()).compareTo(other.isSetFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free, other.free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntPages()).compareTo(other.isSetIntPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intPages, other.intPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntPagesFree()).compareTo(other.isSetIntPagesFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntPagesFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intPagesFree, other.intPagesFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeafPages()).compareTo(other.isSetLeafPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeafPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leafPages, other.leafPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeafPagesFree()).compareTo(other.isSetLeafPagesFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeafPagesFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leafPagesFree, other.leafPagesFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevels()).compareTo(other.isSetLevels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levels, other.levels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMagic()).compareTo(other.isSetMagic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMagic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.magic, other.magic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetaFlags()).compareTo(other.isSetMetaFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaFlags, other.metaFlags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinKey()).compareTo(other.isSetMinKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minKey, other.minKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumBlobs()).compareTo(other.isSetNumBlobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumBlobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numBlobs, other.numBlobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumData()).compareTo(other.isSetNumData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numData, other.numData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumKeys()).compareTo(other.isSetNumKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numKeys, other.numKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverPages()).compareTo(other.isSetOverPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overPages, other.overPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverPagesFree()).compareTo(other.isSetOverPagesFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverPagesFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overPagesFree, other.overPagesFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(other.isSetPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, other.pageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReLen()).compareTo(other.isSetReLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reLen, other.reLen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRePad()).compareTo(other.isSetRePad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRePad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rePad, other.rePad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBtreeStat(");
    boolean first = true;

    sb.append("dupPages:");
    sb.append(this.dupPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dupPagesFree:");
    sb.append(this.dupPagesFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emptyPages:");
    sb.append(this.emptyPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("free:");
    sb.append(this.free);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intPages:");
    sb.append(this.intPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intPagesFree:");
    sb.append(this.intPagesFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leafPages:");
    sb.append(this.leafPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leafPagesFree:");
    sb.append(this.leafPagesFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("levels:");
    sb.append(this.levels);
    first = false;
    if (!first) sb.append(", ");
    sb.append("magic:");
    sb.append(this.magic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metaFlags:");
    sb.append(this.metaFlags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minKey:");
    sb.append(this.minKey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numBlobs:");
    sb.append(this.numBlobs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numData:");
    sb.append(this.numData);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numKeys:");
    sb.append(this.numKeys);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overPages:");
    sb.append(this.overPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overPagesFree:");
    sb.append(this.overPagesFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageCount:");
    sb.append(this.pageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reLen:");
    sb.append(this.reLen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rePad:");
    sb.append(this.rePad);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBtreeStatStandardSchemeFactory implements SchemeFactory {
    public TBtreeStatStandardScheme getScheme() {
      return new TBtreeStatStandardScheme();
    }
  }

  private static class TBtreeStatStandardScheme extends StandardScheme<TBtreeStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBtreeStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DUP_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dupPages = iprot.readI32();
              struct.setDupPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DUP_PAGES_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dupPagesFree = iprot.readI64();
              struct.setDupPagesFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMPTY_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emptyPages = iprot.readI32();
              struct.setEmptyPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.free = iprot.readI32();
              struct.setFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intPages = iprot.readI32();
              struct.setIntPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INT_PAGES_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.intPagesFree = iprot.readI64();
              struct.setIntPagesFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEAF_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leafPages = iprot.readI32();
              struct.setLeafPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LEAF_PAGES_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leafPagesFree = iprot.readI64();
              struct.setLeafPagesFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LEVELS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levels = iprot.readI32();
              struct.setLevelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAGIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.magic = iprot.readI32();
              struct.setMagicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // META_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.metaFlags = iprot.readI32();
              struct.setMetaFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MIN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minKey = iprot.readI32();
              struct.setMinKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NUM_BLOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numBlobs = iprot.readI32();
              struct.setNumBlobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NUM_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numData = iprot.readI32();
              struct.setNumDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NUM_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numKeys = iprot.readI32();
              struct.setNumKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OVER_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overPages = iprot.readI32();
              struct.setOverPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OVER_PAGES_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.overPagesFree = iprot.readI64();
              struct.setOverPagesFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageCount = iprot.readI32();
              struct.setPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RE_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reLen = iprot.readI32();
              struct.setReLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RE_PAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rePad = iprot.readI32();
              struct.setRePadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBtreeStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DUP_PAGES_FIELD_DESC);
      oprot.writeI32(struct.dupPages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUP_PAGES_FREE_FIELD_DESC);
      oprot.writeI64(struct.dupPagesFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EMPTY_PAGES_FIELD_DESC);
      oprot.writeI32(struct.emptyPages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_FIELD_DESC);
      oprot.writeI32(struct.free);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_PAGES_FIELD_DESC);
      oprot.writeI32(struct.intPages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_PAGES_FREE_FIELD_DESC);
      oprot.writeI64(struct.intPagesFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEAF_PAGES_FIELD_DESC);
      oprot.writeI32(struct.leafPages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEAF_PAGES_FREE_FIELD_DESC);
      oprot.writeI64(struct.leafPagesFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVELS_FIELD_DESC);
      oprot.writeI32(struct.levels);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAGIC_FIELD_DESC);
      oprot.writeI32(struct.magic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(META_FLAGS_FIELD_DESC);
      oprot.writeI32(struct.metaFlags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_KEY_FIELD_DESC);
      oprot.writeI32(struct.minKey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_BLOBS_FIELD_DESC);
      oprot.writeI32(struct.numBlobs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_DATA_FIELD_DESC);
      oprot.writeI32(struct.numData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_KEYS_FIELD_DESC);
      oprot.writeI32(struct.numKeys);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVER_PAGES_FIELD_DESC);
      oprot.writeI32(struct.overPages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVER_PAGES_FREE_FIELD_DESC);
      oprot.writeI64(struct.overPagesFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.pageCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RE_LEN_FIELD_DESC);
      oprot.writeI32(struct.reLen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RE_PAD_FIELD_DESC);
      oprot.writeI32(struct.rePad);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBtreeStatTupleSchemeFactory implements SchemeFactory {
    public TBtreeStatTupleScheme getScheme() {
      return new TBtreeStatTupleScheme();
    }
  }

  private static class TBtreeStatTupleScheme extends TupleScheme<TBtreeStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBtreeStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDupPages()) {
        optionals.set(0);
      }
      if (struct.isSetDupPagesFree()) {
        optionals.set(1);
      }
      if (struct.isSetEmptyPages()) {
        optionals.set(2);
      }
      if (struct.isSetFree()) {
        optionals.set(3);
      }
      if (struct.isSetIntPages()) {
        optionals.set(4);
      }
      if (struct.isSetIntPagesFree()) {
        optionals.set(5);
      }
      if (struct.isSetLeafPages()) {
        optionals.set(6);
      }
      if (struct.isSetLeafPagesFree()) {
        optionals.set(7);
      }
      if (struct.isSetLevels()) {
        optionals.set(8);
      }
      if (struct.isSetMagic()) {
        optionals.set(9);
      }
      if (struct.isSetMetaFlags()) {
        optionals.set(10);
      }
      if (struct.isSetMinKey()) {
        optionals.set(11);
      }
      if (struct.isSetNumBlobs()) {
        optionals.set(12);
      }
      if (struct.isSetNumData()) {
        optionals.set(13);
      }
      if (struct.isSetNumKeys()) {
        optionals.set(14);
      }
      if (struct.isSetOverPages()) {
        optionals.set(15);
      }
      if (struct.isSetOverPagesFree()) {
        optionals.set(16);
      }
      if (struct.isSetPageCount()) {
        optionals.set(17);
      }
      if (struct.isSetPageSize()) {
        optionals.set(18);
      }
      if (struct.isSetReLen()) {
        optionals.set(19);
      }
      if (struct.isSetRePad()) {
        optionals.set(20);
      }
      if (struct.isSetVersion()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetDupPages()) {
        oprot.writeI32(struct.dupPages);
      }
      if (struct.isSetDupPagesFree()) {
        oprot.writeI64(struct.dupPagesFree);
      }
      if (struct.isSetEmptyPages()) {
        oprot.writeI32(struct.emptyPages);
      }
      if (struct.isSetFree()) {
        oprot.writeI32(struct.free);
      }
      if (struct.isSetIntPages()) {
        oprot.writeI32(struct.intPages);
      }
      if (struct.isSetIntPagesFree()) {
        oprot.writeI64(struct.intPagesFree);
      }
      if (struct.isSetLeafPages()) {
        oprot.writeI32(struct.leafPages);
      }
      if (struct.isSetLeafPagesFree()) {
        oprot.writeI64(struct.leafPagesFree);
      }
      if (struct.isSetLevels()) {
        oprot.writeI32(struct.levels);
      }
      if (struct.isSetMagic()) {
        oprot.writeI32(struct.magic);
      }
      if (struct.isSetMetaFlags()) {
        oprot.writeI32(struct.metaFlags);
      }
      if (struct.isSetMinKey()) {
        oprot.writeI32(struct.minKey);
      }
      if (struct.isSetNumBlobs()) {
        oprot.writeI32(struct.numBlobs);
      }
      if (struct.isSetNumData()) {
        oprot.writeI32(struct.numData);
      }
      if (struct.isSetNumKeys()) {
        oprot.writeI32(struct.numKeys);
      }
      if (struct.isSetOverPages()) {
        oprot.writeI32(struct.overPages);
      }
      if (struct.isSetOverPagesFree()) {
        oprot.writeI64(struct.overPagesFree);
      }
      if (struct.isSetPageCount()) {
        oprot.writeI32(struct.pageCount);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetReLen()) {
        oprot.writeI32(struct.reLen);
      }
      if (struct.isSetRePad()) {
        oprot.writeI32(struct.rePad);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBtreeStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.dupPages = iprot.readI32();
        struct.setDupPagesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dupPagesFree = iprot.readI64();
        struct.setDupPagesFreeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.emptyPages = iprot.readI32();
        struct.setEmptyPagesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.free = iprot.readI32();
        struct.setFreeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.intPages = iprot.readI32();
        struct.setIntPagesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.intPagesFree = iprot.readI64();
        struct.setIntPagesFreeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.leafPages = iprot.readI32();
        struct.setLeafPagesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.leafPagesFree = iprot.readI64();
        struct.setLeafPagesFreeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.levels = iprot.readI32();
        struct.setLevelsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.magic = iprot.readI32();
        struct.setMagicIsSet(true);
      }
      if (incoming.get(10)) {
        struct.metaFlags = iprot.readI32();
        struct.setMetaFlagsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.minKey = iprot.readI32();
        struct.setMinKeyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.numBlobs = iprot.readI32();
        struct.setNumBlobsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.numData = iprot.readI32();
        struct.setNumDataIsSet(true);
      }
      if (incoming.get(14)) {
        struct.numKeys = iprot.readI32();
        struct.setNumKeysIsSet(true);
      }
      if (incoming.get(15)) {
        struct.overPages = iprot.readI32();
        struct.setOverPagesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.overPagesFree = iprot.readI64();
        struct.setOverPagesFreeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.pageCount = iprot.readI32();
        struct.setPageCountIsSet(true);
      }
      if (incoming.get(18)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.reLen = iprot.readI32();
        struct.setReLenIsSet(true);
      }
      if (incoming.get(20)) {
        struct.rePad = iprot.readI32();
        struct.setRePadIsSet(true);
      }
      if (incoming.get(21)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
    }
  }

}

