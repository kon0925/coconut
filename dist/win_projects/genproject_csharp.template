(:
*  This template is only for generating csharp donet project files
*
*  @PROJECT_NAME@  - name of the Visual Studio project
*  @PROJECT_INPUT@ - input XML document that drives the script.
*  @VISUAL_STUDIO_VERSION@ - Visual Studio version.
:)
declare boundary-space preserve;
declare variable $vsversion := "@VISUAL_STUDIO_VERSION@";

declare function local:getProjects()
{
  doc("@PROJECT_INPUT@")/projects/project[@name="@PROJECT_NAME@"]
};

declare function local:getTargetFramework()
{
  if ($vsversion eq "9.00") then ("v3.5") else ("v4.0")
};

declare function local:getToolsVersion()
{
  if ($vsversion eq "9.00") then ("3.5") else ("4.0")
};

declare function local:getOldToolsVersion()
{
  if ($vsversion eq "9.00") then ("2.0") else ("3.5")
};

declare function local:genDllProjects($project)
{
let $ToolsVersion := local:getToolsVersion()
let $OldToolsVersion := local:getOldToolsVersion()
let $TargetFramework := local:getTargetFramework()
let $guid := $project/@guid/string()
let $path := $project/files/@path/string()
let $files := $project/files/file
let $AssemblyName := $project/AssemblyName/string()
let $DocumentationFile := $project/DocumentationFile/string()
return
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="{$ToolsVersion}">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{"&#x7B;"}{$guid}{"&#x7D;"}</ProjectGuid>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <AssemblyName>{$AssemblyName}</AssemblyName>
    <RootNamespace>BerkeleyDB</RootNamespace>
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <StartupObject>
    </StartupObject>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\..\..\build_windows\AnyCPU\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DocumentationFile>{$DocumentationFile}</DocumentationFile>
    <NoWarn>419</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\..\..\build_windows\AnyCPU\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>{$DocumentationFile}</DocumentationFile>
    <NoWarn>419</NoWarn>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    { for $file in $files
      return (<Compile Include="{$path}{$file/@name/string()}" />, "&#xa;    ")
    }
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSHARP.Targets" />
  <ProjectExtensions>
    <VisualStudio AllowExistingFolder="true" />
  </ProjectExtensions>
</Project>
};

declare function local:genAppProjects($project)
{
let $ToolsVersion := local:getToolsVersion()
let $guid := $project/@guid/string()
let $files := $project/files/file
let $path := $project/files/@path/string()
let $projectName := $project/@name/string()
let $ProjectReference := $project/../ProjectReference
let $PreBuildEvent := $project/PreBuildEvent/string()
return
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="{$ToolsVersion}">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{"&#x7B;"}{$guid}{"&#x7D;"}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>{$projectName}</RootNamespace>
    <AssemblyName>{$projectName}</AssemblyName>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\..\..\build_windows\AnyCPU\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\..\..\build_windows\AnyCPU\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    { for $file in $files
      return (<Compile Include="{$path}{$file/@name/string()}" />, "&#xa;    ")
    }
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="{$ProjectReference/@Include/string()}" >
      <Project>{"&#x7B;"}{$ProjectReference/@ProjectUID/string()}{"&#x7D;"}</Project>
      <Name>{$ProjectReference/@ProjectName/string()}</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <PropertyGroup>
    <PreBuildEvent>{$PreBuildEvent}</PreBuildEvent>
  </PropertyGroup>
</Project>
};

declare function local:genTestProjects($project)
{
let $ToolsVersion := local:getToolsVersion()
let $guid := $project/@guid/string()
let $files := $project/files/file
let $path := $project/files/@path/string()
let $projectName := $project/@name/string()
let $ProjectReference := $project/ProjectReference
let $PreBuildEvent := $project/PreBuildEvent/string()
return
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"  ToolsVersion="{$ToolsVersion}">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{"&#x7B;"}{$guid}{"&#x7D;"}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>DotNetTest</RootNamespace>
    <AssemblyName>DotNetTest</AssemblyName>
    <StartupObject>
    </StartupObject>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <ItemGroup>
    { for $file in $files
      return
        if (exists($file/@SubType)) then
          (<Compile Include="{$path}{$file/@name/string()}"><SubType>{$file/@SubType/string()}</SubType></Compile>, "&#xa;    ")
        else
          (<Compile Include="{$path}{$file/@name/string()}" />, "&#xa;    ")
    }
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="{$ProjectReference/@Include/string()}" >
      <Project>{"&#x7B;"}{$ProjectReference/@ProjectUID/string()}{"&#x7D;"}</Project>
      <Name>{$ProjectReference/@ProjectName/string()}</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Reference Include="nunit.framework, Version=2.5.3.9345, Culture=neutral, PublicKeyToken=96d09a1eb7f44a77, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.XML" />
  </ItemGroup>
  <PropertyGroup>
    <PreBuildEvent>{$PreBuildEvent}</PreBuildEvent>
  </PropertyGroup>
  <ItemGroup>
    <Content Include="..\AllTestData.xml" />
  </ItemGroup>
  <ItemGroup>
    <None Include="..\bdb4.7.db" />
  </ItemGroup>
</Project>
};

for $project in local:getProjects()
return
  if ($project/type[string()="dll"]) then
    local:genDllProjects($project)
  else if ($project/type[string()="app"]) then
    local:genAppProjects($project)
  else if ($project/type[string()="test"]) then
    local:genTestProjects($project)
  else()
